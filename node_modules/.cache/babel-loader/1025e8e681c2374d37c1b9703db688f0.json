{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Compact = _interopRequireDefault(require(\"./Compact\"));\n\nvar _Raw = _interopRequireDefault(require(\"./Raw\"));\n\nvar _utils = require(\"./utils\"); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name AbstractArray\n * @description\n * This manages codec arrays. It is an extension to Array, providing\n * specific encoding/decoding on top of the base type.\n * @noInheritDoc\n */\n\n\nclass AbstractArray extends Array {\n  constructor(registry, ...values) {\n    super(...values);\n    this.registry = void 0;\n    this.registry = registry;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.reduce((total, raw) => {\n      return total + raw.encodedLength;\n    }, _Compact.default.encodeU8a(this.length).length);\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return new _Raw.default(this.registry, this.registry.hash(this.toU8a()));\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return this.length === 0;\n  }\n  /**\n   * @description The length of the value\n   */\n\n\n  get length() {\n    // only included here since we ignore inherited docs\n    return super.length;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return (0, _utils.compareArray)(this, other);\n  }\n  /**\n   * @description Converts the Object to an standard JavaScript Array\n   */\n\n\n  toArray() {\n    return Array.from(this);\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    return (0, _util.u8aToHex)(this.toU8a());\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExtended) {\n    return this.map(entry => entry.toHuman(isExtended));\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.map(entry => entry.toJSON());\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    // Overwrite the default toString representation of Array.\n    const data = this.map(entry => entry.toString());\n    return `[${data.join(', ')}]`;\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    const encoded = this.map(entry => entry.toU8a(isBare));\n    return isBare ? (0, _util.u8aConcat)(...encoded) : (0, _util.u8aConcat)(_Compact.default.encodeU8a(this.length), ...encoded);\n  } // Below are methods that we override. When we do a `new Vec(...).map()`,\n  // we want it to return an Array. We only override the methods that return a\n  // new instance.\n\n  /**\n   * @description Concatenates two arrays\n   */\n\n\n  concat(other) {\n    return this.toArray().concat(other instanceof AbstractArray ? other.toArray() : other);\n  }\n  /**\n   * @description Filters the array with the callback\n   */\n\n\n  filter(callbackfn, thisArg) {\n    return this.toArray().filter(callbackfn, thisArg);\n  }\n  /**\n   * @description Maps the array with the callback\n   */\n\n\n  map(callbackfn, thisArg) {\n    return this.toArray().map(callbackfn, thisArg);\n  }\n  /**\n   * @description Checks if the array includes a specific value\n   */\n\n\n  includes(check) {\n    return this.some(value => value.eq(check));\n  }\n\n}\n\nexports.default = AbstractArray;","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/types/codec/AbstractArray.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_util","_Compact","_Raw","_utils","AbstractArray","Array","constructor","registry","values","encodedLength","reduce","total","raw","encodeU8a","length","hash","toU8a","isEmpty","eq","other","compareArray","toArray","from","toHex","u8aToHex","toHuman","isExtended","map","entry","toJSON","toString","data","join","isBare","encoded","u8aConcat","concat","filter","callbackfn","thisArg","includes","check","some"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Compact = _interopRequireDefault(require(\"./Compact\"));\n\nvar _Raw = _interopRequireDefault(require(\"./Raw\"));\n\nvar _utils = require(\"./utils\");\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name AbstractArray\n * @description\n * This manages codec arrays. It is an extension to Array, providing\n * specific encoding/decoding on top of the base type.\n * @noInheritDoc\n */\nclass AbstractArray extends Array {\n  constructor(registry, ...values) {\n    super(...values);\n    this.registry = void 0;\n    this.registry = registry;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.reduce((total, raw) => {\n      return total + raw.encodedLength;\n    }, _Compact.default.encodeU8a(this.length).length);\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return new _Raw.default(this.registry, this.registry.hash(this.toU8a()));\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return this.length === 0;\n  }\n  /**\n   * @description The length of the value\n   */\n\n\n  get length() {\n    // only included here since we ignore inherited docs\n    return super.length;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return (0, _utils.compareArray)(this, other);\n  }\n  /**\n   * @description Converts the Object to an standard JavaScript Array\n   */\n\n\n  toArray() {\n    return Array.from(this);\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    return (0, _util.u8aToHex)(this.toU8a());\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExtended) {\n    return this.map(entry => entry.toHuman(isExtended));\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.map(entry => entry.toJSON());\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  /**\n   * @description Returns the string representation of the value\n   */\n  toString() {\n    // Overwrite the default toString representation of Array.\n    const data = this.map(entry => entry.toString());\n    return `[${data.join(', ')}]`;\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    const encoded = this.map(entry => entry.toU8a(isBare));\n    return isBare ? (0, _util.u8aConcat)(...encoded) : (0, _util.u8aConcat)(_Compact.default.encodeU8a(this.length), ...encoded);\n  } // Below are methods that we override. When we do a `new Vec(...).map()`,\n  // we want it to return an Array. We only override the methods that return a\n  // new instance.\n\n  /**\n   * @description Concatenates two arrays\n   */\n\n\n  concat(other) {\n    return this.toArray().concat(other instanceof AbstractArray ? other.toArray() : other);\n  }\n  /**\n   * @description Filters the array with the callback\n   */\n\n\n  filter(callbackfn, thisArg) {\n    return this.toArray().filter(callbackfn, thisArg);\n  }\n  /**\n   * @description Maps the array with the callback\n   */\n\n\n  map(callbackfn, thisArg) {\n    return this.toArray().map(callbackfn, thisArg);\n  }\n  /**\n   * @description Checks if the array includes a specific value\n   */\n\n\n  includes(check) {\n    return this.some(value => value.eq(check));\n  }\n\n}\n\nexports.default = AbstractArray;"]},"metadata":{},"sourceType":"script"}