{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = deriveAddress;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _key = require(\"../key\");\n\nvar _schnorrkel = require(\"../schnorrkel\");\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\")); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name deriveAddress\n * @summary Creates a sr25519 derived address from the supplied and path.\n * @description\n * Creates a sr25519 derived address based on the input address/publicKey and the uri supplied.\n */\n\n\nfunction deriveAddress(who, suri, ss58Format) {\n  const {\n    path\n  } = (0, _key.keyExtractPath)(suri);\n  (0, _util.assert)(path.length && !path.some(path => path.isHard), 'Expected suri to contain a combination of non-hard paths');\n  return (0, _encode.default)(path.reduce((publicKey, path) => {\n    return (0, _schnorrkel.schnorrkelDerivePublic)(publicKey, path.chainCode);\n  }, (0, _decode.default)(who)), ss58Format);\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/util-crypto/address/derive.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","deriveAddress","_util","_key","_schnorrkel","_decode","_encode","who","suri","ss58Format","path","keyExtractPath","assert","length","some","isHard","reduce","publicKey","schnorrkelDerivePublic","chainCode"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,aAAlB;;AAEA,IAAIC,KAAK,GAAGP,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIQ,IAAI,GAAGR,OAAO,CAAC,QAAD,CAAlB;;AAEA,IAAIS,WAAW,GAAGT,OAAO,CAAC,eAAD,CAAzB;;AAEA,IAAIU,OAAO,GAAGX,sBAAsB,CAACC,OAAO,CAAC,UAAD,CAAR,CAApC;;AAEA,IAAIW,OAAO,GAAGZ,sBAAsB,CAACC,OAAO,CAAC,UAAD,CAAR,CAApC,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,aAAT,CAAuBM,GAAvB,EAA4BC,IAA5B,EAAkCC,UAAlC,EAA8C;AAC5C,QAAM;AACJC,IAAAA;AADI,MAEF,CAAC,GAAGP,IAAI,CAACQ,cAAT,EAAyBH,IAAzB,CAFJ;AAGA,GAAC,GAAGN,KAAK,CAACU,MAAV,EAAkBF,IAAI,CAACG,MAAL,IAAe,CAACH,IAAI,CAACI,IAAL,CAAUJ,IAAI,IAAIA,IAAI,CAACK,MAAvB,CAAlC,EAAkE,0DAAlE;AACA,SAAO,CAAC,GAAGT,OAAO,CAACN,OAAZ,EAAqBU,IAAI,CAACM,MAAL,CAAY,CAACC,SAAD,EAAYP,IAAZ,KAAqB;AAC3D,WAAO,CAAC,GAAGN,WAAW,CAACc,sBAAhB,EAAwCD,SAAxC,EAAmDP,IAAI,CAACS,SAAxD,CAAP;AACD,GAF2B,EAEzB,CAAC,GAAGd,OAAO,CAACL,OAAZ,EAAqBO,GAArB,CAFyB,CAArB,EAEwBE,UAFxB,CAAP;AAGD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = deriveAddress;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _key = require(\"../key\");\n\nvar _schnorrkel = require(\"../schnorrkel\");\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name deriveAddress\n * @summary Creates a sr25519 derived address from the supplied and path.\n * @description\n * Creates a sr25519 derived address based on the input address/publicKey and the uri supplied.\n */\nfunction deriveAddress(who, suri, ss58Format) {\n  const {\n    path\n  } = (0, _key.keyExtractPath)(suri);\n  (0, _util.assert)(path.length && !path.some(path => path.isHard), 'Expected suri to contain a combination of non-hard paths');\n  return (0, _encode.default)(path.reduce((publicKey, path) => {\n    return (0, _schnorrkel.schnorrkelDerivePublic)(publicKey, path.chainCode);\n  }, (0, _decode.default)(who)), ss58Format);\n}"]},"metadata":{},"sourceType":"script"}