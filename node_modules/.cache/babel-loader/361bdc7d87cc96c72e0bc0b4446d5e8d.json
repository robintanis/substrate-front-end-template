{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._erasRewards = _erasRewards;\nexports.erasRewards = erasRewards;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"../util\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nconst CACHE_KEY = 'eraRewards';\n\nfunction mapRewards(eras, optRewards) {\n  return eras.map((era, index) => ({\n    era,\n    eraReward: optRewards[index].unwrapOrDefault()\n  }));\n}\n\nfunction _erasRewards(instanceId, api) {\n  return (0, _util.memo)(instanceId, (eras, withActive) => {\n    if (!eras.length) {\n      return (0, _rxjs.of)([]);\n    }\n\n    const cached = withActive ? [] : eras.map(era => _util.deriveCache.get(`${CACHE_KEY}-${era.toString()}`)).filter(value => !!value);\n    const remaining = eras.filter(era => !cached.some(cached => era.eq(cached.era)));\n\n    if (!remaining.length) {\n      return (0, _rxjs.of)(cached);\n    }\n\n    return api.query.staking.erasValidatorReward.multi(remaining).pipe((0, _operators.map)(optRewards => {\n      const query = mapRewards(remaining, optRewards);\n      !withActive && query.forEach(q => _util.deriveCache.set(`${CACHE_KEY}-${q.era.toString()}`, q));\n      return eras.map(era => cached.find(cached => era.eq(cached.era)) || query.find(query => era.eq(query.era)));\n    }));\n  });\n}\n\nfunction erasRewards(instanceId, api) {\n  return (0, _util.memo)(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0, _operators.switchMap)(eras => api.derive.staking._erasRewards(eras, withActive))));\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/api-derive/staking/erasRewards.js"],"names":["Object","defineProperty","exports","value","_erasRewards","erasRewards","_rxjs","require","_operators","_util","CACHE_KEY","mapRewards","eras","optRewards","map","era","index","eraReward","unwrapOrDefault","instanceId","api","memo","withActive","length","of","cached","deriveCache","get","toString","filter","remaining","some","eq","query","staking","erasValidatorReward","multi","pipe","forEach","q","set","find","derive","erasHistoric","switchMap"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._erasRewards = _erasRewards;\nexports.erasRewards = erasRewards;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"../util\");\n\n// Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst CACHE_KEY = 'eraRewards';\n\nfunction mapRewards(eras, optRewards) {\n  return eras.map((era, index) => ({\n    era,\n    eraReward: optRewards[index].unwrapOrDefault()\n  }));\n}\n\nfunction _erasRewards(instanceId, api) {\n  return (0, _util.memo)(instanceId, (eras, withActive) => {\n    if (!eras.length) {\n      return (0, _rxjs.of)([]);\n    }\n\n    const cached = withActive ? [] : eras.map(era => _util.deriveCache.get(`${CACHE_KEY}-${era.toString()}`)).filter(value => !!value);\n    const remaining = eras.filter(era => !cached.some(cached => era.eq(cached.era)));\n\n    if (!remaining.length) {\n      return (0, _rxjs.of)(cached);\n    }\n\n    return api.query.staking.erasValidatorReward.multi(remaining).pipe((0, _operators.map)(optRewards => {\n      const query = mapRewards(remaining, optRewards);\n      !withActive && query.forEach(q => _util.deriveCache.set(`${CACHE_KEY}-${q.era.toString()}`, q));\n      return eras.map(era => cached.find(cached => era.eq(cached.era)) || query.find(query => era.eq(query.era)));\n    }));\n  });\n}\n\nfunction erasRewards(instanceId, api) {\n  return (0, _util.memo)(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0, _operators.switchMap)(eras => api.derive.staking._erasRewards(eras, withActive))));\n}"]},"metadata":{},"sourceType":"script"}