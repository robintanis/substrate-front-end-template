{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = naclKeypairFromSeed;\n\nvar _tweetnacl = _interopRequireDefault(require(\"tweetnacl\"));\n\nvar _wasmCrypto = require(\"@polkadot/wasm-crypto\"); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name naclKeypairFromSeed\n * @summary Creates a new public/secret keypair from a seed.\n * @description\n * Returns a object containing a `publicKey` & `secretKey` generated from the supplied seed.\n * @example\n * <BR>\n *\n * ```javascript\n * import { naclKeypairFromSeed } from '@polkadot/util-crypto';\n *\n * naclKeypairFromSeed(...); // => { secretKey: [...], publicKey: [...] }\n * ```\n */\n\n\nfunction naclKeypairFromSeed(seed) {\n  if ((0, _wasmCrypto.isReady)()) {\n    const full = (0, _wasmCrypto.ed25519KeypairFromSeed)(seed);\n    return {\n      publicKey: full.slice(32),\n      secretKey: full.slice(0, 64)\n    };\n  }\n\n  return _tweetnacl.default.sign.keyPair.fromSeed(seed);\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/util-crypto/nacl/keypair/fromSeed.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","naclKeypairFromSeed","_tweetnacl","_wasmCrypto","seed","isReady","full","ed25519KeypairFromSeed","publicKey","slice","secretKey","sign","keyPair","fromSeed"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,mBAAlB;;AAEA,IAAIC,UAAU,GAAGR,sBAAsB,CAACC,OAAO,CAAC,WAAD,CAAR,CAAvC;;AAEA,IAAIQ,WAAW,GAAGR,OAAO,CAAC,uBAAD,CAAzB,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,mBAAT,CAA6BG,IAA7B,EAAmC;AACjC,MAAI,CAAC,GAAGD,WAAW,CAACE,OAAhB,GAAJ,EAAgC;AAC9B,UAAMC,IAAI,GAAG,CAAC,GAAGH,WAAW,CAACI,sBAAhB,EAAwCH,IAAxC,CAAb;AACA,WAAO;AACLI,MAAAA,SAAS,EAAEF,IAAI,CAACG,KAAL,CAAW,EAAX,CADN;AAELC,MAAAA,SAAS,EAAEJ,IAAI,CAACG,KAAL,CAAW,CAAX,EAAc,EAAd;AAFN,KAAP;AAID;;AAED,SAAOP,UAAU,CAACF,OAAX,CAAmBW,IAAnB,CAAwBC,OAAxB,CAAgCC,QAAhC,CAAyCT,IAAzC,CAAP;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = naclKeypairFromSeed;\n\nvar _tweetnacl = _interopRequireDefault(require(\"tweetnacl\"));\n\nvar _wasmCrypto = require(\"@polkadot/wasm-crypto\");\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name naclKeypairFromSeed\n * @summary Creates a new public/secret keypair from a seed.\n * @description\n * Returns a object containing a `publicKey` & `secretKey` generated from the supplied seed.\n * @example\n * <BR>\n *\n * ```javascript\n * import { naclKeypairFromSeed } from '@polkadot/util-crypto';\n *\n * naclKeypairFromSeed(...); // => { secretKey: [...], publicKey: [...] }\n * ```\n */\nfunction naclKeypairFromSeed(seed) {\n  if ((0, _wasmCrypto.isReady)()) {\n    const full = (0, _wasmCrypto.ed25519KeypairFromSeed)(seed);\n    return {\n      publicKey: full.slice(32),\n      secretKey: full.slice(0, 64)\n    };\n  }\n\n  return _tweetnacl.default.sign.keyPair.fromSeed(seed);\n}"]},"metadata":{},"sourceType":"script"}