{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.ENUMSET_SIZE = void 0;\n\nvar _bn = _interopRequireDefault(require(\"bn.js\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utilCrypto = require(\"@polkadot/util-crypto\");\n\nvar _U = _interopRequireDefault(require(\"../primitive/U32\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nconst ENUMSET_SIZE = new _bn.default(64);\nexports.ENUMSET_SIZE = ENUMSET_SIZE;\nconst PREFIX_1BYTE = 0xef;\nconst PREFIX_2BYTE = 0xfc;\nconst PREFIX_4BYTE = 0xfd;\nconst PREFIX_8BYTE = 0xfe;\nconst MAX_1BYTE = new _bn.default(PREFIX_1BYTE);\nconst MAX_2BYTE = new _bn.default(1).shln(16);\nconst MAX_4BYTE = new _bn.default(1).shln(32);\n/** @internal */\n\nfunction decodeAccountIndex(value) {\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  if (value instanceof AccountIndex) {\n    // `value.toBn()` on AccountIndex returns a pure BN (i.e. not an\n    // AccountIndex), which has the initial `toString()` implementation.\n    return value.toBn();\n  } else if ((0, _util.isBn)(value) || (0, _util.isNumber)(value) || (0, _util.isHex)(value) || (0, _util.isU8a)(value) || (0, _util.isBigInt)(value)) {\n    return value;\n  }\n\n  return decodeAccountIndex((0, _utilCrypto.decodeAddress)(value));\n}\n/**\n * @name AccountIndex\n * @description\n * A wrapper around an AccountIndex, which is a shortened, variable-length encoding\n * for an Account. We extends from [[U32]] to provide the number-like properties.\n */\n\n\nclass AccountIndex extends _U.default {\n  constructor(registry, value = new _bn.default(0)) {\n    super(registry, decodeAccountIndex(value));\n  }\n\n  static calcLength(_value) {\n    const value = (0, _util.bnToBn)(_value);\n\n    if (value.lte(MAX_1BYTE)) {\n      return 1;\n    } else if (value.lt(MAX_2BYTE)) {\n      return 2;\n    } else if (value.lt(MAX_4BYTE)) {\n      return 4;\n    }\n\n    return 8;\n  }\n\n  static readLength(input) {\n    const first = input[0];\n\n    if (first === PREFIX_2BYTE) {\n      return [1, 2];\n    } else if (first === PREFIX_4BYTE) {\n      return [1, 4];\n    } else if (first === PREFIX_8BYTE) {\n      return [1, 8];\n    }\n\n    return [0, 1];\n  }\n\n  static writeLength(input) {\n    switch (input.length) {\n      case 2:\n        return new Uint8Array([PREFIX_2BYTE]);\n\n      case 4:\n        return new Uint8Array([PREFIX_4BYTE]);\n\n      case 8:\n        return new Uint8Array([PREFIX_8BYTE]);\n\n      default:\n        return new Uint8Array([]);\n    }\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    // shortcut for BN or Number, don't create an object\n    if ((0, _util.isBn)(other) || (0, _util.isNumber)(other)) {\n      return super.eq(other);\n    } // convert and compare\n\n\n    return super.eq(this.registry.createType('AccountIndex', other));\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    const length = AccountIndex.calcLength(this);\n    return (0, _utilCrypto.encodeAddress)(this.toU8a().subarray(0, length), this.registry.chainSS58);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'AccountIndex';\n  }\n\n}\n\nexports.default = AccountIndex;","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/types/generic/AccountIndex.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","ENUMSET_SIZE","_bn","_util","_utilCrypto","_U","PREFIX_1BYTE","PREFIX_2BYTE","PREFIX_4BYTE","PREFIX_8BYTE","MAX_1BYTE","MAX_2BYTE","shln","MAX_4BYTE","decodeAccountIndex","AccountIndex","toBn","isBn","isNumber","isHex","isU8a","isBigInt","decodeAddress","constructor","registry","calcLength","_value","bnToBn","lte","lt","readLength","input","first","writeLength","length","Uint8Array","eq","other","createType","toHuman","toJSON","toString","encodeAddress","toU8a","subarray","chainSS58","toRawType"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.ENUMSET_SIZE = void 0;\n\nvar _bn = _interopRequireDefault(require(\"bn.js\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utilCrypto = require(\"@polkadot/util-crypto\");\n\nvar _U = _interopRequireDefault(require(\"../primitive/U32\"));\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst ENUMSET_SIZE = new _bn.default(64);\nexports.ENUMSET_SIZE = ENUMSET_SIZE;\nconst PREFIX_1BYTE = 0xef;\nconst PREFIX_2BYTE = 0xfc;\nconst PREFIX_4BYTE = 0xfd;\nconst PREFIX_8BYTE = 0xfe;\nconst MAX_1BYTE = new _bn.default(PREFIX_1BYTE);\nconst MAX_2BYTE = new _bn.default(1).shln(16);\nconst MAX_4BYTE = new _bn.default(1).shln(32);\n/** @internal */\n\nfunction decodeAccountIndex(value) {\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  if (value instanceof AccountIndex) {\n    // `value.toBn()` on AccountIndex returns a pure BN (i.e. not an\n    // AccountIndex), which has the initial `toString()` implementation.\n    return value.toBn();\n  } else if ((0, _util.isBn)(value) || (0, _util.isNumber)(value) || (0, _util.isHex)(value) || (0, _util.isU8a)(value) || (0, _util.isBigInt)(value)) {\n    return value;\n  }\n\n  return decodeAccountIndex((0, _utilCrypto.decodeAddress)(value));\n}\n/**\n * @name AccountIndex\n * @description\n * A wrapper around an AccountIndex, which is a shortened, variable-length encoding\n * for an Account. We extends from [[U32]] to provide the number-like properties.\n */\n\n\nclass AccountIndex extends _U.default {\n  constructor(registry, value = new _bn.default(0)) {\n    super(registry, decodeAccountIndex(value));\n  }\n\n  static calcLength(_value) {\n    const value = (0, _util.bnToBn)(_value);\n\n    if (value.lte(MAX_1BYTE)) {\n      return 1;\n    } else if (value.lt(MAX_2BYTE)) {\n      return 2;\n    } else if (value.lt(MAX_4BYTE)) {\n      return 4;\n    }\n\n    return 8;\n  }\n\n  static readLength(input) {\n    const first = input[0];\n\n    if (first === PREFIX_2BYTE) {\n      return [1, 2];\n    } else if (first === PREFIX_4BYTE) {\n      return [1, 4];\n    } else if (first === PREFIX_8BYTE) {\n      return [1, 8];\n    }\n\n    return [0, 1];\n  }\n\n  static writeLength(input) {\n    switch (input.length) {\n      case 2:\n        return new Uint8Array([PREFIX_2BYTE]);\n\n      case 4:\n        return new Uint8Array([PREFIX_4BYTE]);\n\n      case 8:\n        return new Uint8Array([PREFIX_8BYTE]);\n\n      default:\n        return new Uint8Array([]);\n    }\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    // shortcut for BN or Number, don't create an object\n    if ((0, _util.isBn)(other) || (0, _util.isNumber)(other)) {\n      return super.eq(other);\n    } // convert and compare\n\n\n    return super.eq(this.registry.createType('AccountIndex', other));\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    const length = AccountIndex.calcLength(this);\n    return (0, _utilCrypto.encodeAddress)(this.toU8a().subarray(0, length), this.registry.chainSS58);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'AccountIndex';\n  }\n\n}\n\nexports.default = AccountIndex;"]},"metadata":{},"sourceType":"script"}