{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = compactStripLength;\n\nvar _defaults = require(\"./defaults\");\n\nvar _fromU8a = _interopRequireDefault(require(\"./fromU8a\")); // Copyright 2017-2020 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name compactStripLength\n * @description Removes the length prefix, returning both the total length (including the value + compact encoding) and the decoded value with the correct length\n * @example\n * <BR>\n *\n * ```javascript\n * import { compactStripLength } from '@polkadot/util';\n *\n * console.log(compactStripLength(new Uint8Array([2 << 2, 0xde, 0xad]))); // [2, Uint8Array[0xde, 0xad]]\n * ```\n */\n\n\nfunction compactStripLength(input, bitLength = _defaults.DEFAULT_BITLENGTH) {\n  const [offset, length] = (0, _fromU8a.default)(input, bitLength);\n  const total = offset + length.toNumber();\n  return [total, input.subarray(offset, total)];\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/util/compact/stripLength.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","compactStripLength","_defaults","_fromU8a","input","bitLength","DEFAULT_BITLENGTH","offset","length","total","toNumber","subarray"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,kBAAlB;;AAEA,IAAIC,SAAS,GAAGP,OAAO,CAAC,YAAD,CAAvB;;AAEA,IAAIQ,QAAQ,GAAGT,sBAAsB,CAACC,OAAO,CAAC,WAAD,CAAR,CAArC,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,kBAAT,CAA4BG,KAA5B,EAAmCC,SAAS,GAAGH,SAAS,CAACI,iBAAzD,EAA4E;AAC1E,QAAM,CAACC,MAAD,EAASC,MAAT,IAAmB,CAAC,GAAGL,QAAQ,CAACH,OAAb,EAAsBI,KAAtB,EAA6BC,SAA7B,CAAzB;AACA,QAAMI,KAAK,GAAGF,MAAM,GAAGC,MAAM,CAACE,QAAP,EAAvB;AACA,SAAO,CAACD,KAAD,EAAQL,KAAK,CAACO,QAAN,CAAeJ,MAAf,EAAuBE,KAAvB,CAAR,CAAP;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = compactStripLength;\n\nvar _defaults = require(\"./defaults\");\n\nvar _fromU8a = _interopRequireDefault(require(\"./fromU8a\"));\n\n// Copyright 2017-2020 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name compactStripLength\n * @description Removes the length prefix, returning both the total length (including the value + compact encoding) and the decoded value with the correct length\n * @example\n * <BR>\n *\n * ```javascript\n * import { compactStripLength } from '@polkadot/util';\n *\n * console.log(compactStripLength(new Uint8Array([2 << 2, 0xde, 0xad]))); // [2, Uint8Array[0xde, 0xad]]\n * ```\n */\nfunction compactStripLength(input, bitLength = _defaults.DEFAULT_BITLENGTH) {\n  const [offset, length] = (0, _fromU8a.default)(input, bitLength);\n  const total = offset + length.toNumber();\n  return [total, input.subarray(offset, total)];\n}"]},"metadata":{},"sourceType":"script"}