{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = base32Decode;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _bs = require(\"./bs32\");\n\nvar _validate = _interopRequireDefault(require(\"./validate\")); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// adapted from https://github.com/multiformats/js-multibase/blob/424709195b46ffb1d6f2f69a7707598ebe751e5e/src/rfc4648.js\n// Build the character lookup table:\n\n\nconst LOOKUP = _bs.BASE32_ALPHABET.split('').reduce((lookup, char, index) => {\n  lookup[char] = index;\n  return lookup;\n}, {});\n/**\n * @name base32Decode\n * @summary Delookup a base32 value.\n * @description\n * From the provided input, decode the base32 and return the result as an `Uint8Array`.\n */\n\n\nfunction base32Decode(value, ipfsCompat = false) {\n  (0, _validate.default)(value, ipfsCompat);\n  const out = new Uint8Array((value.length - (ipfsCompat ? 1 : 0)) * _bs.BITS_PER_CHAR / 8 | 0);\n  let bits = 0;\n  let buffer = 0;\n  let written = 0;\n\n  for (let i = ipfsCompat ? 1 : 0; i < value.length; ++i) {\n    buffer = buffer << _bs.BITS_PER_CHAR | LOOKUP[value[i]];\n    bits += _bs.BITS_PER_CHAR;\n\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 0xff & buffer >> bits;\n    }\n  }\n\n  (0, _util.assert)(!(bits >= _bs.BITS_PER_CHAR || 0xff & buffer << 8 - bits), 'Unexpected end of data');\n  return out;\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/util-crypto/base32/decode.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","base32Decode","_util","_bs","_validate","LOOKUP","BASE32_ALPHABET","split","reduce","lookup","char","index","ipfsCompat","out","Uint8Array","length","BITS_PER_CHAR","bits","buffer","written","i","assert"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,YAAlB;;AAEA,IAAIC,KAAK,GAAGP,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIQ,GAAG,GAAGR,OAAO,CAAC,QAAD,CAAjB;;AAEA,IAAIS,SAAS,GAAGV,sBAAsB,CAACC,OAAO,CAAC,YAAD,CAAR,CAAtC,C,CAEA;AACA;AACA;AACA;;;AACA,MAAMU,MAAM,GAAGF,GAAG,CAACG,eAAJ,CAAoBC,KAApB,CAA0B,EAA1B,EAA8BC,MAA9B,CAAqC,CAACC,MAAD,EAASC,IAAT,EAAeC,KAAf,KAAyB;AAC3EF,EAAAA,MAAM,CAACC,IAAD,CAAN,GAAeC,KAAf;AACA,SAAOF,MAAP;AACD,CAHc,EAGZ,EAHY,CAAf;AAIA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASR,YAAT,CAAsBF,KAAtB,EAA6Ba,UAAU,GAAG,KAA1C,EAAiD;AAC/C,GAAC,GAAGR,SAAS,CAACJ,OAAd,EAAuBD,KAAvB,EAA8Ba,UAA9B;AACA,QAAMC,GAAG,GAAG,IAAIC,UAAJ,CAAe,CAACf,KAAK,CAACgB,MAAN,IAAgBH,UAAU,GAAG,CAAH,GAAO,CAAjC,CAAD,IAAwCT,GAAG,CAACa,aAA5C,GAA4D,CAA5D,GAAgE,CAA/E,CAAZ;AACA,MAAIC,IAAI,GAAG,CAAX;AACA,MAAIC,MAAM,GAAG,CAAb;AACA,MAAIC,OAAO,GAAG,CAAd;;AAEA,OAAK,IAAIC,CAAC,GAAGR,UAAU,GAAG,CAAH,GAAO,CAA9B,EAAiCQ,CAAC,GAAGrB,KAAK,CAACgB,MAA3C,EAAmD,EAAEK,CAArD,EAAwD;AACtDF,IAAAA,MAAM,GAAGA,MAAM,IAAIf,GAAG,CAACa,aAAd,GAA8BX,MAAM,CAACN,KAAK,CAACqB,CAAD,CAAN,CAA7C;AACAH,IAAAA,IAAI,IAAId,GAAG,CAACa,aAAZ;;AAEA,QAAIC,IAAI,IAAI,CAAZ,EAAe;AACbA,MAAAA,IAAI,IAAI,CAAR;AACAJ,MAAAA,GAAG,CAACM,OAAO,EAAR,CAAH,GAAiB,OAAOD,MAAM,IAAID,IAAlC;AACD;AACF;;AAED,GAAC,GAAGf,KAAK,CAACmB,MAAV,EAAkB,EAAEJ,IAAI,IAAId,GAAG,CAACa,aAAZ,IAA6B,OAAOE,MAAM,IAAI,IAAID,IAApD,CAAlB,EAA6E,wBAA7E;AACA,SAAOJ,GAAP;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = base32Decode;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _bs = require(\"./bs32\");\n\nvar _validate = _interopRequireDefault(require(\"./validate\"));\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// adapted from https://github.com/multiformats/js-multibase/blob/424709195b46ffb1d6f2f69a7707598ebe751e5e/src/rfc4648.js\n// Build the character lookup table:\nconst LOOKUP = _bs.BASE32_ALPHABET.split('').reduce((lookup, char, index) => {\n  lookup[char] = index;\n  return lookup;\n}, {});\n/**\n * @name base32Decode\n * @summary Delookup a base32 value.\n * @description\n * From the provided input, decode the base32 and return the result as an `Uint8Array`.\n */\n\n\nfunction base32Decode(value, ipfsCompat = false) {\n  (0, _validate.default)(value, ipfsCompat);\n  const out = new Uint8Array((value.length - (ipfsCompat ? 1 : 0)) * _bs.BITS_PER_CHAR / 8 | 0);\n  let bits = 0;\n  let buffer = 0;\n  let written = 0;\n\n  for (let i = ipfsCompat ? 1 : 0; i < value.length; ++i) {\n    buffer = buffer << _bs.BITS_PER_CHAR | LOOKUP[value[i]];\n    bits += _bs.BITS_PER_CHAR;\n\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 0xff & buffer >> bits;\n    }\n  }\n\n  (0, _util.assert)(!(bits >= _bs.BITS_PER_CHAR || 0xff & buffer << 8 - bits), 'Unexpected end of data');\n  return out;\n}"]},"metadata":{},"sourceType":"script"}