{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = hexToU8a;\n\nvar _assert = _interopRequireDefault(require(\"../assert\"));\n\nvar _hex = _interopRequireDefault(require(\"../is/hex\"));\n\nvar _stripPrefix = _interopRequireDefault(require(\"./stripPrefix\")); // Copyright 2017-2020 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name hexToU8a\n * @summary Creates a Uint8Array object from a hex string.\n * @description\n * `null` inputs returns an empty `Uint8Array` result. Hex input values return the actual bytes value converted to a Uint8Array. Anything that is not a hex string (including the `0x` prefix) throws an error.\n * @example\n * <BR>\n *\n * ```javascript\n * import { hexToU8a } from '@polkadot/util';\n *\n * hexToU8a('0x80001f'); // Uint8Array([0x80, 0x00, 0x1f])\n * hexToU8a('0x80001f', 32); // Uint8Array([0x00, 0x80, 0x00, 0x1f])\n * ```\n */\n\n\nfunction hexToU8a(_value, bitLength = -1) {\n  if (!_value) {\n    return new Uint8Array();\n  }\n\n  (0, _assert.default)((0, _hex.default)(_value), `Expected hex value to convert, found '${_value}'`);\n  const value = (0, _stripPrefix.default)(_value);\n  const valLength = value.length / 2;\n  const bufLength = Math.ceil(bitLength === -1 ? valLength : bitLength / 8);\n  const result = new Uint8Array(bufLength);\n  const offset = Math.max(0, bufLength - valLength);\n\n  for (let index = 0; index < bufLength; index++) {\n    result[index + offset] = parseInt(value.substr(index * 2, 2), 16);\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/util/hex/toU8a.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","hexToU8a","_assert","_hex","_stripPrefix","_value","bitLength","Uint8Array","valLength","length","bufLength","Math","ceil","result","offset","max","index","parseInt","substr"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,QAAlB;;AAEA,IAAIC,OAAO,GAAGR,sBAAsB,CAACC,OAAO,CAAC,WAAD,CAAR,CAApC;;AAEA,IAAIQ,IAAI,GAAGT,sBAAsB,CAACC,OAAO,CAAC,WAAD,CAAR,CAAjC;;AAEA,IAAIS,YAAY,GAAGV,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAAzC,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,QAAT,CAAkBI,MAAlB,EAA0BC,SAAS,GAAG,CAAC,CAAvC,EAA0C;AACxC,MAAI,CAACD,MAAL,EAAa;AACX,WAAO,IAAIE,UAAJ,EAAP;AACD;;AAED,GAAC,GAAGL,OAAO,CAACF,OAAZ,EAAqB,CAAC,GAAGG,IAAI,CAACH,OAAT,EAAkBK,MAAlB,CAArB,EAAiD,yCAAwCA,MAAO,GAAhG;AACA,QAAMN,KAAK,GAAG,CAAC,GAAGK,YAAY,CAACJ,OAAjB,EAA0BK,MAA1B,CAAd;AACA,QAAMG,SAAS,GAAGT,KAAK,CAACU,MAAN,GAAe,CAAjC;AACA,QAAMC,SAAS,GAAGC,IAAI,CAACC,IAAL,CAAUN,SAAS,KAAK,CAAC,CAAf,GAAmBE,SAAnB,GAA+BF,SAAS,GAAG,CAArD,CAAlB;AACA,QAAMO,MAAM,GAAG,IAAIN,UAAJ,CAAeG,SAAf,CAAf;AACA,QAAMI,MAAM,GAAGH,IAAI,CAACI,GAAL,CAAS,CAAT,EAAYL,SAAS,GAAGF,SAAxB,CAAf;;AAEA,OAAK,IAAIQ,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGN,SAA5B,EAAuCM,KAAK,EAA5C,EAAgD;AAC9CH,IAAAA,MAAM,CAACG,KAAK,GAAGF,MAAT,CAAN,GAAyBG,QAAQ,CAAClB,KAAK,CAACmB,MAAN,CAAaF,KAAK,GAAG,CAArB,EAAwB,CAAxB,CAAD,EAA6B,EAA7B,CAAjC;AACD;;AAED,SAAOH,MAAP;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = hexToU8a;\n\nvar _assert = _interopRequireDefault(require(\"../assert\"));\n\nvar _hex = _interopRequireDefault(require(\"../is/hex\"));\n\nvar _stripPrefix = _interopRequireDefault(require(\"./stripPrefix\"));\n\n// Copyright 2017-2020 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name hexToU8a\n * @summary Creates a Uint8Array object from a hex string.\n * @description\n * `null` inputs returns an empty `Uint8Array` result. Hex input values return the actual bytes value converted to a Uint8Array. Anything that is not a hex string (including the `0x` prefix) throws an error.\n * @example\n * <BR>\n *\n * ```javascript\n * import { hexToU8a } from '@polkadot/util';\n *\n * hexToU8a('0x80001f'); // Uint8Array([0x80, 0x00, 0x1f])\n * hexToU8a('0x80001f', 32); // Uint8Array([0x00, 0x80, 0x00, 0x1f])\n * ```\n */\nfunction hexToU8a(_value, bitLength = -1) {\n  if (!_value) {\n    return new Uint8Array();\n  }\n\n  (0, _assert.default)((0, _hex.default)(_value), `Expected hex value to convert, found '${_value}'`);\n  const value = (0, _stripPrefix.default)(_value);\n  const valLength = value.length / 2;\n  const bufLength = Math.ceil(bitLength === -1 ? valLength : bitLength / 8);\n  const result = new Uint8Array(bufLength);\n  const offset = Math.max(0, bufLength - valLength);\n\n  for (let index = 0; index < bufLength; index++) {\n    result[index + offset] = parseInt(value.substr(index * 2, 2), 16);\n  }\n\n  return result;\n}"]},"metadata":{},"sourceType":"script"}