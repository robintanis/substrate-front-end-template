{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\"); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\n\n\nfunction decodeU8a(value) {\n  if ((0, _util.isU8a)(value)) {\n    return value;\n  }\n\n  return (0, _util.u8aToU8a)(value);\n}\n/**\n * @name Raw\n * @description\n * A basic wrapper around Uint8Array, with no frills and no fuss. It does differ\n * from other implementations where it will consume the full Uint8Array as passed to it.\n * As such it is meant to be subclassed where the wrapper takes care of the\n * actual lengths instead of used directly.\n * @noInheritDoc\n */\n\n\nclass Raw extends Uint8Array {\n  constructor(registry, value) {\n    super(decodeU8a(value));\n    this.registry = void 0;\n    this.registry = registry;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.length;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return new Raw(this.registry, this.registry.hash(this.toU8a()));\n  }\n  /**\n   * @description Returns true if the wrapped value contains only ASCII printable characters\n   */\n\n\n  get isAscii() {\n    return (0, _util.isAscii)(this);\n  }\n  /**\n   * @description Returns true if the type wraps an empty/default all-0 value\n   */\n\n\n  get isEmpty() {\n    return !this.length || (0, _util.isUndefined)(this.find(value => !!value));\n  }\n  /**\n   * @description Returns true if the wrapped value contains only utf8 characters\n   */\n\n\n  get isUtf8() {\n    return (0, _util.isUtf8)(this);\n  }\n  /**\n   * @description The length of the value\n   */\n\n\n  get length() {\n    // only included here since we ignore inherited docs\n    return super.length;\n  }\n  /**\n   * @description Returns the number of bits in the value\n   */\n\n\n  bitLength() {\n    return this.length * 8;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    if (other instanceof Uint8Array) {\n      return this.length === other.length && !this.some((value, index) => value !== other[index]);\n    }\n\n    return this.eq(decodeU8a(other));\n  }\n  /**\n   * @description Create a new subarray from the actual buffer. This is needed for compat reasons since a new Uint8Array gets returned here\n   * @param begin The position to start at\n   * @param end The position to end at\n   */\n\n\n  subarray(begin, end) {\n    return Uint8Array.from(this).subarray(begin, end);\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    return (0, _util.u8aToHex)(this);\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.isAscii ? this.toUtf8() : this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toHex();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'Raw';\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return this.toHex();\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toU8a(isBare) {\n    return Uint8Array.from(this);\n  }\n  /**\n   * @description Returns the wrapped data as a UTF-8 string\n   */\n\n\n  toUtf8() {\n    (0, _util.assert)(this.isUtf8, 'The character sequence is not a valid Utf8 string');\n    return (0, _util.u8aToString)(this);\n  }\n\n}\n\nexports.default = Raw;","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/types/codec/Raw.js"],"names":["Object","defineProperty","exports","value","default","_util","require","decodeU8a","isU8a","u8aToU8a","Raw","Uint8Array","constructor","registry","encodedLength","length","hash","toU8a","isAscii","isEmpty","isUndefined","find","isUtf8","bitLength","eq","other","some","index","subarray","begin","end","from","toHex","u8aToHex","toHuman","toUtf8","toJSON","toRawType","toString","isBare","assert","u8aToString"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\nfunction decodeU8a(value) {\n  if ((0, _util.isU8a)(value)) {\n    return value;\n  }\n\n  return (0, _util.u8aToU8a)(value);\n}\n/**\n * @name Raw\n * @description\n * A basic wrapper around Uint8Array, with no frills and no fuss. It does differ\n * from other implementations where it will consume the full Uint8Array as passed to it.\n * As such it is meant to be subclassed where the wrapper takes care of the\n * actual lengths instead of used directly.\n * @noInheritDoc\n */\n\n\nclass Raw extends Uint8Array {\n  constructor(registry, value) {\n    super(decodeU8a(value));\n    this.registry = void 0;\n    this.registry = registry;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.length;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return new Raw(this.registry, this.registry.hash(this.toU8a()));\n  }\n  /**\n   * @description Returns true if the wrapped value contains only ASCII printable characters\n   */\n\n\n  get isAscii() {\n    return (0, _util.isAscii)(this);\n  }\n  /**\n   * @description Returns true if the type wraps an empty/default all-0 value\n   */\n\n\n  get isEmpty() {\n    return !this.length || (0, _util.isUndefined)(this.find(value => !!value));\n  }\n  /**\n   * @description Returns true if the wrapped value contains only utf8 characters\n   */\n\n\n  get isUtf8() {\n    return (0, _util.isUtf8)(this);\n  }\n  /**\n   * @description The length of the value\n   */\n\n\n  get length() {\n    // only included here since we ignore inherited docs\n    return super.length;\n  }\n  /**\n   * @description Returns the number of bits in the value\n   */\n\n\n  bitLength() {\n    return this.length * 8;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    if (other instanceof Uint8Array) {\n      return this.length === other.length && !this.some((value, index) => value !== other[index]);\n    }\n\n    return this.eq(decodeU8a(other));\n  }\n  /**\n   * @description Create a new subarray from the actual buffer. This is needed for compat reasons since a new Uint8Array gets returned here\n   * @param begin The position to start at\n   * @param end The position to end at\n   */\n\n\n  subarray(begin, end) {\n    return Uint8Array.from(this).subarray(begin, end);\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    return (0, _util.u8aToHex)(this);\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.isAscii ? this.toUtf8() : this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toHex();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'Raw';\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return this.toHex();\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toU8a(isBare) {\n    return Uint8Array.from(this);\n  }\n  /**\n   * @description Returns the wrapped data as a UTF-8 string\n   */\n\n\n  toUtf8() {\n    (0, _util.assert)(this.isUtf8, 'The character sequence is not a valid Utf8 string');\n    return (0, _util.u8aToString)(this);\n  }\n\n}\n\nexports.default = Raw;"]},"metadata":{},"sourceType":"script"}