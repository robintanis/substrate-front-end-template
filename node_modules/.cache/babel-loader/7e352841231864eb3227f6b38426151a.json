{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = secp256k1KeypairFromSeed;\n\nvar _elliptic = _interopRequireDefault(require(\"elliptic\"));\n\nvar _util = require(\"@polkadot/util\"); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nconst EC = _elliptic.default.ec;\nconst ec = new EC('secp256k1');\n/**\n * @name secp256k1KeypairFromSeed\n * @description Returns a object containing a `publicKey` & `secretKey` generated from the supplied seed.\n */\n\nfunction secp256k1KeypairFromSeed(seed) {\n  (0, _util.assert)(seed.length === 32, 'Expected valid 32-byte private key as a seed');\n  const key = ec.keyFromPrivate(seed);\n  return {\n    publicKey: new Uint8Array(key.getPublic().encodeCompressed()),\n    secretKey: (0, _util.bnToU8a)(key.getPrivate(), {\n      bitLength: 256,\n      isLe: false\n    })\n  };\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/util-crypto/secp256k1/keypair/fromSeed.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","secp256k1KeypairFromSeed","_elliptic","_util","EC","ec","seed","assert","length","key","keyFromPrivate","publicKey","Uint8Array","getPublic","encodeCompressed","secretKey","bnToU8a","getPrivate","bitLength","isLe"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,wBAAlB;;AAEA,IAAIC,SAAS,GAAGR,sBAAsB,CAACC,OAAO,CAAC,UAAD,CAAR,CAAtC;;AAEA,IAAIQ,KAAK,GAAGR,OAAO,CAAC,gBAAD,CAAnB,C,CAEA;AACA;;;AACA,MAAMS,EAAE,GAAGF,SAAS,CAACF,OAAV,CAAkBK,EAA7B;AACA,MAAMA,EAAE,GAAG,IAAID,EAAJ,CAAO,WAAP,CAAX;AACA;AACA;AACA;AACA;;AAEA,SAASH,wBAAT,CAAkCK,IAAlC,EAAwC;AACtC,GAAC,GAAGH,KAAK,CAACI,MAAV,EAAkBD,IAAI,CAACE,MAAL,KAAgB,EAAlC,EAAsC,8CAAtC;AACA,QAAMC,GAAG,GAAGJ,EAAE,CAACK,cAAH,CAAkBJ,IAAlB,CAAZ;AACA,SAAO;AACLK,IAAAA,SAAS,EAAE,IAAIC,UAAJ,CAAeH,GAAG,CAACI,SAAJ,GAAgBC,gBAAhB,EAAf,CADN;AAELC,IAAAA,SAAS,EAAE,CAAC,GAAGZ,KAAK,CAACa,OAAV,EAAmBP,GAAG,CAACQ,UAAJ,EAAnB,EAAqC;AAC9CC,MAAAA,SAAS,EAAE,GADmC;AAE9CC,MAAAA,IAAI,EAAE;AAFwC,KAArC;AAFN,GAAP;AAOD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = secp256k1KeypairFromSeed;\n\nvar _elliptic = _interopRequireDefault(require(\"elliptic\"));\n\nvar _util = require(\"@polkadot/util\");\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst EC = _elliptic.default.ec;\nconst ec = new EC('secp256k1');\n/**\n * @name secp256k1KeypairFromSeed\n * @description Returns a object containing a `publicKey` & `secretKey` generated from the supplied seed.\n */\n\nfunction secp256k1KeypairFromSeed(seed) {\n  (0, _util.assert)(seed.length === 32, 'Expected valid 32-byte private key as a seed');\n  const key = ec.keyFromPrivate(seed);\n  return {\n    publicKey: new Uint8Array(key.getPublic().encodeCompressed()),\n    secretKey: (0, _util.bnToU8a)(key.getPrivate(), {\n      bitLength: 256,\n      isLe: false\n    })\n  };\n}"]},"metadata":{},"sourceType":"script"}