{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._stakerRewardsEras = _stakerRewardsEras;\nexports._stakerRewards = _stakerRewards;\nexports.stakerRewards = stakerRewards;\nexports.stakerRewardsMultiEras = stakerRewardsMultiEras;\nexports.stakerRewardsMulti = stakerRewardsMulti;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _bn = _interopRequireDefault(require(\"bn.js\"));\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _util2 = require(\"../util\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nconst ZERO = new _bn.default(0);\nconst MIN_ONE = new _bn.default(-1);\nconst COMM_DIV = new _bn.default(1000000000);\nconst MAX_ERAS = new _bn.default(1000000000);\n\nfunction parseRewards(api, stashId, [, erasPoints, erasPrefs, erasRewards], exposures) {\n  return exposures.map(({\n    era,\n    isEmpty,\n    isValidator,\n    nominating,\n    validators: eraValidators\n  }) => {\n    const {\n      eraPoints,\n      validators: allValPoints\n    } = erasPoints.find(p => p.era.eq(era)) || {\n      eraPoints: ZERO,\n      validators: {}\n    };\n    const {\n      eraReward\n    } = erasRewards.find(r => r.era.eq(era)) || {\n      eraReward: api.registry.createType('Balance')\n    };\n    const {\n      validators: allValPrefs\n    } = erasPrefs.find(p => p.era.eq(era)) || {\n      validators: {}\n    };\n    const validators = {};\n    const stakerId = stashId.toString();\n    Object.entries(eraValidators).forEach(([validatorId, exposure]) => {\n      var _allValPrefs$validato;\n\n      const valPoints = allValPoints[validatorId] || ZERO;\n      const valComm = ((_allValPrefs$validato = allValPrefs[validatorId]) === null || _allValPrefs$validato === void 0 ? void 0 : _allValPrefs$validato.commission.unwrap()) || ZERO;\n      const expTotal = exposure.total.unwrap();\n      let avail = ZERO;\n      let value;\n\n      if (!(expTotal.isZero() || valPoints.isZero() || eraPoints.isZero())) {\n        avail = eraReward.mul(valPoints).div(eraPoints);\n        const valCut = valComm.mul(avail).div(COMM_DIV);\n        let staked;\n\n        if (validatorId === stakerId) {\n          staked = exposure.own.unwrap();\n        } else {\n          const stakerExp = exposure.others.find(({\n            who\n          }) => who.eq(stakerId));\n          staked = stakerExp ? stakerExp.value.unwrap() : ZERO;\n        }\n\n        value = avail.sub(valCut).imul(staked).div(expTotal).iadd(validatorId === stakerId ? valCut : ZERO);\n      }\n\n      validators[validatorId] = {\n        total: api.registry.createType('Balance', avail),\n        value: api.registry.createType('Balance', value)\n      };\n    });\n    return {\n      era,\n      eraReward,\n      isEmpty,\n      isValidator,\n      nominating,\n      validators\n    };\n  });\n}\n\nfunction uniqValidators(rewards) {\n  const uniq = [];\n  rewards.forEach(({\n    validators\n  }) => {\n    Object.keys(validators).forEach(validatorId => {\n      if (!uniq.includes(validatorId)) {\n        uniq.push(validatorId);\n      }\n    });\n  });\n  return uniq;\n}\n\nfunction isOldLedger(ledger) {\n  return !!(ledger === null || ledger === void 0 ? void 0 : ledger.lastReward);\n}\n\nfunction filterEra(era, stakingLedger) {\n  return isOldLedger(stakingLedger) ? era.gt(stakingLedger.lastReward.unwrapOr(MIN_ONE)) : !stakingLedger.claimedRewards.some(e => e.eq(era));\n}\n\nfunction filterEras(eras, stakingLedger) {\n  return eras.filter(era => filterEra(era, stakingLedger));\n}\n\nfunction filterRewards(api, eras, migrateEra, rewards, stakingLedger, withActive) {\n  if (withActive) {\n    return (0, _rxjs.of)(rewards);\n  }\n\n  const validators = uniqValidators(rewards);\n  return ((0, _util.isFunction)(api.tx.staking.payoutStakers) ? api.derive.staking.queryMulti(validators) : (0, _rxjs.of)([])).pipe((0, _operators.map)(queryValidators => {\n    const filter = withActive ? eras : filterEras(eras, stakingLedger);\n    return rewards.filter(({\n      isEmpty\n    }) => !isEmpty).filter(reward => {\n      if (!filter.some(filter => reward.era.eq(filter))) {\n        return false;\n      } else if (reward.era.lt(migrateEra)) {\n        // we filter again here, the actual ledger may have changed, e.g. something has been claimed\n        return filterEra(reward.era, stakingLedger);\n      }\n\n      reward.isStakerPayout = true;\n      const rm = [];\n      Object.keys(reward.validators).forEach(validatorId => {\n        const index = validators.indexOf(validatorId);\n\n        if (index !== -1) {\n          const valLedger = queryValidators[index].stakingLedger;\n\n          if (valLedger === null || valLedger === void 0 ? void 0 : valLedger.claimedRewards.some(era => reward.era.eq(era))) {\n            rm.push(validatorId);\n          }\n        }\n      });\n      rm.forEach(validatorId => {\n        delete reward.validators[validatorId];\n      });\n      return true;\n    }).filter(({\n      validators\n    }) => Object.keys(validators).length !== 0).map(reward => _objectSpread(_objectSpread({}, reward), {}, {\n      nominators: reward.nominating.filter(({\n        validatorId\n      }) => !!reward.validators[validatorId])\n    }));\n  }));\n}\n\nfunction _stakerRewardsEras(instanceId, api) {\n  return (0, _util2.memo)(instanceId, (eras, withActive) => (0, _rxjs.combineLatest)([(0, _util.isFunction)(api.query.staking.migrateEra) ? api.query.staking.migrateEra() : (0, _rxjs.of)({\n    unwrapOr: () => (0, _util.isFunction)(api.tx.staking.payoutStakers) ? ZERO : MAX_ERAS\n  }), api.derive.staking._erasPoints(eras, withActive), api.derive.staking._erasPrefs(eras, withActive), api.derive.staking._erasRewards(eras, withActive)]));\n}\n\nfunction _stakerRewards(instanceId, api) {\n  return (0, _util2.memo)(instanceId, (accountId, eras, withActive) => (0, _rxjs.combineLatest)([api.derive.staking.query(accountId), api.derive.staking._stakerExposure(accountId, eras, withActive), api.derive.staking._stakerRewardsEras(eras, withActive)]).pipe((0, _operators.switchMap)(([{\n    stakingLedger,\n    stashId\n  }, exposures, erasResult]) => {\n    const migrateEra = erasResult[0].unwrapOr(ZERO);\n\n    if (!stashId || !stakingLedger) {\n      return (0, _rxjs.of)([]);\n    }\n\n    return filterRewards(api, eras, migrateEra, parseRewards(api, stashId, erasResult, exposures), stakingLedger, withActive);\n  })));\n}\n\nfunction stakerRewards(instanceId, api) {\n  return (0, _util2.memo)(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0, _operators.switchMap)(eras => api.derive.staking._stakerRewards(accountId, eras, withActive))));\n}\n\nfunction stakerRewardsMultiEras(instanceId, api) {\n  return (0, _util2.memo)(instanceId, (accountIds, eras) => accountIds.length && eras.length ? (0, _rxjs.combineLatest)(accountIds.map(acc => api.derive.staking._stakerRewards(acc, eras, false))) : (0, _rxjs.of)([]));\n}\n\nfunction stakerRewardsMulti(instanceId, api) {\n  return (0, _util2.memo)(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0, _operators.switchMap)(eras => api.derive.staking.stakerRewardsMultiEras(accountIds, eras))));\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/api-derive/staking/stakerRewards.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","_stakerRewardsEras","_stakerRewards","stakerRewards","stakerRewardsMultiEras","stakerRewardsMulti","_defineProperty2","_bn","_rxjs","_operators","_util","_util2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","default","getOwnPropertyDescriptors","defineProperties","ZERO","MIN_ONE","COMM_DIV","MAX_ERAS","parseRewards","api","stashId","erasPoints","erasPrefs","erasRewards","exposures","map","era","isEmpty","isValidator","nominating","validators","eraValidators","eraPoints","allValPoints","find","p","eq","eraReward","r","registry","createType","allValPrefs","stakerId","toString","entries","validatorId","exposure","_allValPrefs$validato","valPoints","valComm","commission","unwrap","expTotal","total","avail","isZero","mul","div","valCut","staked","own","stakerExp","others","who","sub","imul","iadd","uniqValidators","rewards","uniq","includes","isOldLedger","ledger","lastReward","filterEra","stakingLedger","gt","unwrapOr","claimedRewards","some","e","filterEras","eras","filterRewards","migrateEra","withActive","of","isFunction","tx","staking","payoutStakers","derive","queryMulti","pipe","queryValidators","reward","lt","isStakerPayout","rm","index","indexOf","valLedger","nominators","instanceId","memo","combineLatest","query","_erasPoints","_erasPrefs","_erasRewards","accountId","_stakerExposure","switchMap","erasResult","erasHistoric","accountIds","acc"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._stakerRewardsEras = _stakerRewardsEras;\nexports._stakerRewards = _stakerRewards;\nexports.stakerRewards = stakerRewards;\nexports.stakerRewardsMultiEras = stakerRewardsMultiEras;\nexports.stakerRewardsMulti = stakerRewardsMulti;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _bn = _interopRequireDefault(require(\"bn.js\"));\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _util2 = require(\"../util\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst ZERO = new _bn.default(0);\nconst MIN_ONE = new _bn.default(-1);\nconst COMM_DIV = new _bn.default(1000000000);\nconst MAX_ERAS = new _bn.default(1000000000);\n\nfunction parseRewards(api, stashId, [, erasPoints, erasPrefs, erasRewards], exposures) {\n  return exposures.map(({\n    era,\n    isEmpty,\n    isValidator,\n    nominating,\n    validators: eraValidators\n  }) => {\n    const {\n      eraPoints,\n      validators: allValPoints\n    } = erasPoints.find(p => p.era.eq(era)) || {\n      eraPoints: ZERO,\n      validators: {}\n    };\n    const {\n      eraReward\n    } = erasRewards.find(r => r.era.eq(era)) || {\n      eraReward: api.registry.createType('Balance')\n    };\n    const {\n      validators: allValPrefs\n    } = erasPrefs.find(p => p.era.eq(era)) || {\n      validators: {}\n    };\n    const validators = {};\n    const stakerId = stashId.toString();\n    Object.entries(eraValidators).forEach(([validatorId, exposure]) => {\n      var _allValPrefs$validato;\n\n      const valPoints = allValPoints[validatorId] || ZERO;\n      const valComm = ((_allValPrefs$validato = allValPrefs[validatorId]) === null || _allValPrefs$validato === void 0 ? void 0 : _allValPrefs$validato.commission.unwrap()) || ZERO;\n      const expTotal = exposure.total.unwrap();\n      let avail = ZERO;\n      let value;\n\n      if (!(expTotal.isZero() || valPoints.isZero() || eraPoints.isZero())) {\n        avail = eraReward.mul(valPoints).div(eraPoints);\n        const valCut = valComm.mul(avail).div(COMM_DIV);\n        let staked;\n\n        if (validatorId === stakerId) {\n          staked = exposure.own.unwrap();\n        } else {\n          const stakerExp = exposure.others.find(({\n            who\n          }) => who.eq(stakerId));\n          staked = stakerExp ? stakerExp.value.unwrap() : ZERO;\n        }\n\n        value = avail.sub(valCut).imul(staked).div(expTotal).iadd(validatorId === stakerId ? valCut : ZERO);\n      }\n\n      validators[validatorId] = {\n        total: api.registry.createType('Balance', avail),\n        value: api.registry.createType('Balance', value)\n      };\n    });\n    return {\n      era,\n      eraReward,\n      isEmpty,\n      isValidator,\n      nominating,\n      validators\n    };\n  });\n}\n\nfunction uniqValidators(rewards) {\n  const uniq = [];\n  rewards.forEach(({\n    validators\n  }) => {\n    Object.keys(validators).forEach(validatorId => {\n      if (!uniq.includes(validatorId)) {\n        uniq.push(validatorId);\n      }\n    });\n  });\n  return uniq;\n}\n\nfunction isOldLedger(ledger) {\n  return !!(ledger === null || ledger === void 0 ? void 0 : ledger.lastReward);\n}\n\nfunction filterEra(era, stakingLedger) {\n  return isOldLedger(stakingLedger) ? era.gt(stakingLedger.lastReward.unwrapOr(MIN_ONE)) : !stakingLedger.claimedRewards.some(e => e.eq(era));\n}\n\nfunction filterEras(eras, stakingLedger) {\n  return eras.filter(era => filterEra(era, stakingLedger));\n}\n\nfunction filterRewards(api, eras, migrateEra, rewards, stakingLedger, withActive) {\n  if (withActive) {\n    return (0, _rxjs.of)(rewards);\n  }\n\n  const validators = uniqValidators(rewards);\n  return ((0, _util.isFunction)(api.tx.staking.payoutStakers) ? api.derive.staking.queryMulti(validators) : (0, _rxjs.of)([])).pipe((0, _operators.map)(queryValidators => {\n    const filter = withActive ? eras : filterEras(eras, stakingLedger);\n    return rewards.filter(({\n      isEmpty\n    }) => !isEmpty).filter(reward => {\n      if (!filter.some(filter => reward.era.eq(filter))) {\n        return false;\n      } else if (reward.era.lt(migrateEra)) {\n        // we filter again here, the actual ledger may have changed, e.g. something has been claimed\n        return filterEra(reward.era, stakingLedger);\n      }\n\n      reward.isStakerPayout = true;\n      const rm = [];\n      Object.keys(reward.validators).forEach(validatorId => {\n        const index = validators.indexOf(validatorId);\n\n        if (index !== -1) {\n          const valLedger = queryValidators[index].stakingLedger;\n\n          if (valLedger === null || valLedger === void 0 ? void 0 : valLedger.claimedRewards.some(era => reward.era.eq(era))) {\n            rm.push(validatorId);\n          }\n        }\n      });\n      rm.forEach(validatorId => {\n        delete reward.validators[validatorId];\n      });\n      return true;\n    }).filter(({\n      validators\n    }) => Object.keys(validators).length !== 0).map(reward => _objectSpread(_objectSpread({}, reward), {}, {\n      nominators: reward.nominating.filter(({\n        validatorId\n      }) => !!reward.validators[validatorId])\n    }));\n  }));\n}\n\nfunction _stakerRewardsEras(instanceId, api) {\n  return (0, _util2.memo)(instanceId, (eras, withActive) => (0, _rxjs.combineLatest)([(0, _util.isFunction)(api.query.staking.migrateEra) ? api.query.staking.migrateEra() : (0, _rxjs.of)({\n    unwrapOr: () => (0, _util.isFunction)(api.tx.staking.payoutStakers) ? ZERO : MAX_ERAS\n  }), api.derive.staking._erasPoints(eras, withActive), api.derive.staking._erasPrefs(eras, withActive), api.derive.staking._erasRewards(eras, withActive)]));\n}\n\nfunction _stakerRewards(instanceId, api) {\n  return (0, _util2.memo)(instanceId, (accountId, eras, withActive) => (0, _rxjs.combineLatest)([api.derive.staking.query(accountId), api.derive.staking._stakerExposure(accountId, eras, withActive), api.derive.staking._stakerRewardsEras(eras, withActive)]).pipe((0, _operators.switchMap)(([{\n    stakingLedger,\n    stashId\n  }, exposures, erasResult]) => {\n    const migrateEra = erasResult[0].unwrapOr(ZERO);\n\n    if (!stashId || !stakingLedger) {\n      return (0, _rxjs.of)([]);\n    }\n\n    return filterRewards(api, eras, migrateEra, parseRewards(api, stashId, erasResult, exposures), stakingLedger, withActive);\n  })));\n}\n\nfunction stakerRewards(instanceId, api) {\n  return (0, _util2.memo)(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0, _operators.switchMap)(eras => api.derive.staking._stakerRewards(accountId, eras, withActive))));\n}\n\nfunction stakerRewardsMultiEras(instanceId, api) {\n  return (0, _util2.memo)(instanceId, (accountIds, eras) => accountIds.length && eras.length ? (0, _rxjs.combineLatest)(accountIds.map(acc => api.derive.staking._stakerRewards(acc, eras, false))) : (0, _rxjs.of)([]));\n}\n\nfunction stakerRewardsMulti(instanceId, api) {\n  return (0, _util2.memo)(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0, _operators.switchMap)(eras => api.derive.staking.stakerRewardsMultiEras(accountIds, eras))));\n}"]},"metadata":{},"sourceType":"script"}