{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Raw = _interopRequireDefault(require(\"./Raw\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\n\n\nfunction decodeU8aFixed(value, bitLength) {\n  if (Array.isArray(value) || (0, _util.isString)(value)) {\n    return decodeU8aFixed((0, _util.u8aToU8a)(value), bitLength);\n  } // ensure that we have an actual u8a with the full length as specified by\n  // the bitLength input (padded with zeros as required)\n\n\n  const byteLength = bitLength / 8;\n  const sub = value.subarray(0, byteLength);\n\n  if (sub.length === byteLength) {\n    return sub;\n  }\n\n  const u8a = new Uint8Array(byteLength);\n  u8a.set(sub, 0);\n  return u8a;\n}\n/**\n * @name U8aFixed\n * @description\n * A U8a that manages a a sequence of bytes up to the specified bitLength. Not meant\n * to be used directly, rather is should be subclassed with the specific lengths.\n */\n\n\nclass U8aFixed extends _Raw.default {\n  constructor(registry, value = new Uint8Array(), bitLength = 256) {\n    super(registry, decodeU8aFixed(value, bitLength));\n  }\n\n  static with(bitLength, typeName) {\n    return class extends U8aFixed {\n      constructor(registry, value) {\n        super(registry, value, bitLength);\n      }\n\n      toRawType() {\n        return typeName || super.toRawType();\n      }\n\n    };\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return `[u8;${this.length}]`;\n  }\n\n}\n\nexports.default = U8aFixed;","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/types/codec/U8aFixed.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_util","_Raw","decodeU8aFixed","bitLength","Array","isArray","isString","u8aToU8a","byteLength","sub","subarray","length","u8a","Uint8Array","set","U8aFixed","constructor","registry","with","typeName","toRawType"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,KAAK,GAAGN,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIO,IAAI,GAAGR,sBAAsB,CAACC,OAAO,CAAC,OAAD,CAAR,CAAjC,C,CAEA;AACA;;AAEA;;;AACA,SAASQ,cAAT,CAAwBJ,KAAxB,EAA+BK,SAA/B,EAA0C;AACxC,MAAIC,KAAK,CAACC,OAAN,CAAcP,KAAd,KAAwB,CAAC,GAAGE,KAAK,CAACM,QAAV,EAAoBR,KAApB,CAA5B,EAAwD;AACtD,WAAOI,cAAc,CAAC,CAAC,GAAGF,KAAK,CAACO,QAAV,EAAoBT,KAApB,CAAD,EAA6BK,SAA7B,CAArB;AACD,GAHuC,CAGtC;AACF;;;AAGA,QAAMK,UAAU,GAAGL,SAAS,GAAG,CAA/B;AACA,QAAMM,GAAG,GAAGX,KAAK,CAACY,QAAN,CAAe,CAAf,EAAkBF,UAAlB,CAAZ;;AAEA,MAAIC,GAAG,CAACE,MAAJ,KAAeH,UAAnB,EAA+B;AAC7B,WAAOC,GAAP;AACD;;AAED,QAAMG,GAAG,GAAG,IAAIC,UAAJ,CAAeL,UAAf,CAAZ;AACAI,EAAAA,GAAG,CAACE,GAAJ,CAAQL,GAAR,EAAa,CAAb;AACA,SAAOG,GAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,MAAMG,QAAN,SAAuBd,IAAI,CAACF,OAA5B,CAAoC;AAClCiB,EAAAA,WAAW,CAACC,QAAD,EAAWnB,KAAK,GAAG,IAAIe,UAAJ,EAAnB,EAAqCV,SAAS,GAAG,GAAjD,EAAsD;AAC/D,UAAMc,QAAN,EAAgBf,cAAc,CAACJ,KAAD,EAAQK,SAAR,CAA9B;AACD;;AAED,SAAOe,IAAP,CAAYf,SAAZ,EAAuBgB,QAAvB,EAAiC;AAC/B,WAAO,cAAcJ,QAAd,CAAuB;AAC5BC,MAAAA,WAAW,CAACC,QAAD,EAAWnB,KAAX,EAAkB;AAC3B,cAAMmB,QAAN,EAAgBnB,KAAhB,EAAuBK,SAAvB;AACD;;AAEDiB,MAAAA,SAAS,GAAG;AACV,eAAOD,QAAQ,IAAI,MAAMC,SAAN,EAAnB;AACD;;AAP2B,KAA9B;AAUD;AACD;AACF;AACA;;;AAGEA,EAAAA,SAAS,GAAG;AACV,WAAQ,OAAM,KAAKT,MAAO,GAA1B;AACD;;AAxBiC;;AA4BpCd,OAAO,CAACE,OAAR,GAAkBgB,QAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Raw = _interopRequireDefault(require(\"./Raw\"));\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\nfunction decodeU8aFixed(value, bitLength) {\n  if (Array.isArray(value) || (0, _util.isString)(value)) {\n    return decodeU8aFixed((0, _util.u8aToU8a)(value), bitLength);\n  } // ensure that we have an actual u8a with the full length as specified by\n  // the bitLength input (padded with zeros as required)\n\n\n  const byteLength = bitLength / 8;\n  const sub = value.subarray(0, byteLength);\n\n  if (sub.length === byteLength) {\n    return sub;\n  }\n\n  const u8a = new Uint8Array(byteLength);\n  u8a.set(sub, 0);\n  return u8a;\n}\n/**\n * @name U8aFixed\n * @description\n * A U8a that manages a a sequence of bytes up to the specified bitLength. Not meant\n * to be used directly, rather is should be subclassed with the specific lengths.\n */\n\n\nclass U8aFixed extends _Raw.default {\n  constructor(registry, value = new Uint8Array(), bitLength = 256) {\n    super(registry, decodeU8aFixed(value, bitLength));\n  }\n\n  static with(bitLength, typeName) {\n    return class extends U8aFixed {\n      constructor(registry, value) {\n        super(registry, value, bitLength);\n      }\n\n      toRawType() {\n        return typeName || super.toRawType();\n      }\n\n    };\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return `[u8;${this.length}]`;\n  }\n\n}\n\nexports.default = U8aFixed;"]},"metadata":{},"sourceType":"script"}