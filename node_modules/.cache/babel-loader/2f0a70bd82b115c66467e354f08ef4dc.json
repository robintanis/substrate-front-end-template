{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Compact = _interopRequireDefault(require(\"./Compact\"));\n\nvar _Raw = _interopRequireDefault(require(\"./Raw\"));\n\nvar _compareMap = _interopRequireDefault(require(\"./utils/compareMap\"));\n\nvar _decodeU8a = _interopRequireDefault(require(\"./utils/decodeU8a\"));\n\nvar _typeToConstructor = _interopRequireDefault(require(\"./utils/typeToConstructor\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\n\n\nfunction decodeMapFromU8a(registry, KeyClass, ValClass, u8a) {\n  const output = new Map();\n\n  const [offset, length] = _Compact.default.decodeU8a(u8a);\n\n  const types = [];\n\n  for (let i = 0; i < length.toNumber(); i++) {\n    types.push(KeyClass, ValClass);\n  }\n\n  const values = (0, _decodeU8a.default)(registry, u8a.subarray(offset), types);\n\n  for (let i = 0; i < values.length; i += 2) {\n    output.set(values[i], values[i + 1]);\n  }\n\n  return output;\n}\n/** @internal */\n\n\nfunction decodeMapFromMap(registry, KeyClass, ValClass, value) {\n  const output = new Map();\n  value.forEach((val, key) => {\n    try {\n      output.set(key instanceof KeyClass ? key : new KeyClass(registry, key), val instanceof ValClass ? val : new ValClass(registry, val));\n    } catch (error) {\n      console.error('Failed to decode Map key or value:', error.message);\n      throw error;\n    }\n  });\n  return output;\n}\n/**\n * Decode input to pass into constructor.\n *\n * @param KeyClass - Type of the map key\n * @param ValClass - Type of the map value\n * @param value - Value to decode, one of:\n * - null\n * - undefined\n * - hex\n * - Uint8Array\n * - Map<any, any>, where both key and value types are either\n *   constructors or decodeable values for their types.\n * @param jsonMap\n * @internal\n */\n\n\nfunction decodeMap(registry, keyType, valType, value) {\n  const KeyClass = (0, _typeToConstructor.default)(registry, keyType);\n  const ValClass = (0, _typeToConstructor.default)(registry, valType);\n\n  if (!value) {\n    return new Map();\n  } else if ((0, _util.isHex)(value)) {\n    return decodeMap(registry, KeyClass, ValClass, (0, _util.hexToU8a)(value));\n  } else if ((0, _util.isU8a)(value)) {\n    return decodeMapFromU8a(registry, KeyClass, ValClass, (0, _util.u8aToU8a)(value));\n  } else if (value instanceof Map) {\n    return decodeMapFromMap(registry, KeyClass, ValClass, value);\n  } else if ((0, _util.isObject)(value)) {\n    return decodeMapFromMap(registry, KeyClass, ValClass, new Map(Object.entries(value)));\n  }\n\n  throw new Error('Map: cannot decode type');\n}\n\nvar _KeyClass = (0, _classPrivateFieldLooseKey2.default)(\"KeyClass\");\n\nvar _ValClass = (0, _classPrivateFieldLooseKey2.default)(\"ValClass\");\n\nvar _type = (0, _classPrivateFieldLooseKey2.default)(\"type\");\n\nclass CodecMap extends Map {\n  constructor(registry, type, keyType, valType, rawValue) {\n    super(decodeMap(registry, keyType, valType, rawValue));\n    this.registry = void 0;\n    Object.defineProperty(this, _KeyClass, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _ValClass, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _type, {\n      writable: true,\n      value: void 0\n    });\n    this.registry = registry;\n    (0, _classPrivateFieldLooseBase2.default)(this, _KeyClass)[_KeyClass] = (0, _typeToConstructor.default)(registry, keyType);\n    (0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass] = (0, _typeToConstructor.default)(registry, valType);\n    (0, _classPrivateFieldLooseBase2.default)(this, _type)[_type] = type;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    let len = _Compact.default.encodeU8a(this.size).length;\n\n    this.forEach((v, k) => {\n      len += v.encodedLength + k.encodedLength;\n    });\n    return len;\n  }\n  /**\n   * @description Returns a hash of the value\n   */\n\n\n  get hash() {\n    return new _Raw.default(this.registry, this.registry.hash(this.toU8a()));\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return this.size === 0;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return (0, _compareMap.default)(this, other);\n  }\n  /**\n   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n   */\n\n\n  toHex() {\n    return (0, _util.u8aToHex)(this.toU8a());\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExtended) {\n    const json = {};\n    this.forEach((v, k) => {\n      json[k.toString()] = v.toHuman(isExtended);\n    });\n    return json;\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    const json = {};\n    this.forEach((v, k) => {\n      json[k.toString()] = v.toJSON();\n    });\n    return json;\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return `${(0, _classPrivateFieldLooseBase2.default)(this, _type)[_type]}<${this.registry.getClassName((0, _classPrivateFieldLooseBase2.default)(this, _KeyClass)[_KeyClass]) || new ((0, _classPrivateFieldLooseBase2.default)(this, _KeyClass)[_KeyClass])(this.registry).toRawType()},${this.registry.getClassName((0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass]) || new ((0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass])(this.registry).toRawType()}>`;\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    const encoded = new Array();\n\n    if (!isBare) {\n      encoded.push(_Compact.default.encodeU8a(this.size));\n    }\n\n    this.forEach((v, k) => {\n      encoded.push(k.toU8a(isBare), v.toU8a(isBare));\n    });\n    return (0, _util.u8aConcat)(...encoded);\n  }\n\n}\n\nexports.default = CodecMap;","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/types/codec/Map.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_classPrivateFieldLooseBase2","_classPrivateFieldLooseKey2","_util","_Compact","_Raw","_compareMap","_decodeU8a","_typeToConstructor","decodeMapFromU8a","registry","KeyClass","ValClass","u8a","output","Map","offset","length","decodeU8a","types","i","toNumber","push","values","subarray","set","decodeMapFromMap","forEach","val","key","error","console","message","decodeMap","keyType","valType","isHex","hexToU8a","isU8a","u8aToU8a","isObject","entries","Error","_KeyClass","_ValClass","_type","CodecMap","constructor","type","rawValue","writable","encodedLength","len","encodeU8a","size","v","k","hash","toU8a","isEmpty","eq","other","toHex","u8aToHex","toHuman","isExtended","json","toString","toJSON","toRawType","getClassName","JSON","stringify","isBare","encoded","Array","u8aConcat"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Compact = _interopRequireDefault(require(\"./Compact\"));\n\nvar _Raw = _interopRequireDefault(require(\"./Raw\"));\n\nvar _compareMap = _interopRequireDefault(require(\"./utils/compareMap\"));\n\nvar _decodeU8a = _interopRequireDefault(require(\"./utils/decodeU8a\"));\n\nvar _typeToConstructor = _interopRequireDefault(require(\"./utils/typeToConstructor\"));\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\nfunction decodeMapFromU8a(registry, KeyClass, ValClass, u8a) {\n  const output = new Map();\n\n  const [offset, length] = _Compact.default.decodeU8a(u8a);\n\n  const types = [];\n\n  for (let i = 0; i < length.toNumber(); i++) {\n    types.push(KeyClass, ValClass);\n  }\n\n  const values = (0, _decodeU8a.default)(registry, u8a.subarray(offset), types);\n\n  for (let i = 0; i < values.length; i += 2) {\n    output.set(values[i], values[i + 1]);\n  }\n\n  return output;\n}\n/** @internal */\n\n\nfunction decodeMapFromMap(registry, KeyClass, ValClass, value) {\n  const output = new Map();\n  value.forEach((val, key) => {\n    try {\n      output.set(key instanceof KeyClass ? key : new KeyClass(registry, key), val instanceof ValClass ? val : new ValClass(registry, val));\n    } catch (error) {\n      console.error('Failed to decode Map key or value:', error.message);\n      throw error;\n    }\n  });\n  return output;\n}\n/**\n * Decode input to pass into constructor.\n *\n * @param KeyClass - Type of the map key\n * @param ValClass - Type of the map value\n * @param value - Value to decode, one of:\n * - null\n * - undefined\n * - hex\n * - Uint8Array\n * - Map<any, any>, where both key and value types are either\n *   constructors or decodeable values for their types.\n * @param jsonMap\n * @internal\n */\n\n\nfunction decodeMap(registry, keyType, valType, value) {\n  const KeyClass = (0, _typeToConstructor.default)(registry, keyType);\n  const ValClass = (0, _typeToConstructor.default)(registry, valType);\n\n  if (!value) {\n    return new Map();\n  } else if ((0, _util.isHex)(value)) {\n    return decodeMap(registry, KeyClass, ValClass, (0, _util.hexToU8a)(value));\n  } else if ((0, _util.isU8a)(value)) {\n    return decodeMapFromU8a(registry, KeyClass, ValClass, (0, _util.u8aToU8a)(value));\n  } else if (value instanceof Map) {\n    return decodeMapFromMap(registry, KeyClass, ValClass, value);\n  } else if ((0, _util.isObject)(value)) {\n    return decodeMapFromMap(registry, KeyClass, ValClass, new Map(Object.entries(value)));\n  }\n\n  throw new Error('Map: cannot decode type');\n}\n\nvar _KeyClass = (0, _classPrivateFieldLooseKey2.default)(\"KeyClass\");\n\nvar _ValClass = (0, _classPrivateFieldLooseKey2.default)(\"ValClass\");\n\nvar _type = (0, _classPrivateFieldLooseKey2.default)(\"type\");\n\nclass CodecMap extends Map {\n  constructor(registry, type, keyType, valType, rawValue) {\n    super(decodeMap(registry, keyType, valType, rawValue));\n    this.registry = void 0;\n    Object.defineProperty(this, _KeyClass, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _ValClass, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _type, {\n      writable: true,\n      value: void 0\n    });\n    this.registry = registry;\n    (0, _classPrivateFieldLooseBase2.default)(this, _KeyClass)[_KeyClass] = (0, _typeToConstructor.default)(registry, keyType);\n    (0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass] = (0, _typeToConstructor.default)(registry, valType);\n    (0, _classPrivateFieldLooseBase2.default)(this, _type)[_type] = type;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    let len = _Compact.default.encodeU8a(this.size).length;\n\n    this.forEach((v, k) => {\n      len += v.encodedLength + k.encodedLength;\n    });\n    return len;\n  }\n  /**\n   * @description Returns a hash of the value\n   */\n\n\n  get hash() {\n    return new _Raw.default(this.registry, this.registry.hash(this.toU8a()));\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return this.size === 0;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return (0, _compareMap.default)(this, other);\n  }\n  /**\n   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n   */\n\n\n  toHex() {\n    return (0, _util.u8aToHex)(this.toU8a());\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExtended) {\n    const json = {};\n    this.forEach((v, k) => {\n      json[k.toString()] = v.toHuman(isExtended);\n    });\n    return json;\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    const json = {};\n    this.forEach((v, k) => {\n      json[k.toString()] = v.toJSON();\n    });\n    return json;\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return `${(0, _classPrivateFieldLooseBase2.default)(this, _type)[_type]}<${this.registry.getClassName((0, _classPrivateFieldLooseBase2.default)(this, _KeyClass)[_KeyClass]) || new ((0, _classPrivateFieldLooseBase2.default)(this, _KeyClass)[_KeyClass])(this.registry).toRawType()},${this.registry.getClassName((0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass]) || new ((0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass])(this.registry).toRawType()}>`;\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    const encoded = new Array();\n\n    if (!isBare) {\n      encoded.push(_Compact.default.encodeU8a(this.size));\n    }\n\n    this.forEach((v, k) => {\n      encoded.push(k.toU8a(isBare), v.toU8a(isBare));\n    });\n    return (0, _util.u8aConcat)(...encoded);\n  }\n\n}\n\nexports.default = CodecMap;"]},"metadata":{},"sourceType":"script"}