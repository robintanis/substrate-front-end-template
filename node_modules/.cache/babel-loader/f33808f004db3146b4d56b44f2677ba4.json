{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getStorage;\n\nvar substrate = _interopRequireWildcard(require(\"./substrate\")); // Copyright 2017-2020 @polkadot/metadata authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\n\n\nfunction getStorage(registry, metaVersion) {\n  return {\n    substrate: Object.entries(substrate).reduce((storage, [key, fn]) => {\n      storage[key] = fn(registry, metaVersion);\n      return storage;\n    }, {})\n  };\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/metadata/Decorated/storage/fromMetadata/storage.js"],"names":["_interopRequireWildcard","require","Object","defineProperty","exports","value","default","getStorage","substrate","registry","metaVersion","entries","reduce","storage","key","fn"],"mappings":"AAAA;;AAEA,IAAIA,uBAAuB,GAAGC,OAAO,CAAC,+CAAD,CAArC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,UAAlB;;AAEA,IAAIC,SAAS,GAAGR,uBAAuB,CAACC,OAAO,CAAC,aAAD,CAAR,CAAvC,C,CAEA;AACA;;AAEA;;;AACA,SAASM,UAAT,CAAoBE,QAApB,EAA8BC,WAA9B,EAA2C;AACzC,SAAO;AACLF,IAAAA,SAAS,EAAEN,MAAM,CAACS,OAAP,CAAeH,SAAf,EAA0BI,MAA1B,CAAiC,CAACC,OAAD,EAAU,CAACC,GAAD,EAAMC,EAAN,CAAV,KAAwB;AAClEF,MAAAA,OAAO,CAACC,GAAD,CAAP,GAAeC,EAAE,CAACN,QAAD,EAAWC,WAAX,CAAjB;AACA,aAAOG,OAAP;AACD,KAHU,EAGR,EAHQ;AADN,GAAP;AAMD","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getStorage;\n\nvar substrate = _interopRequireWildcard(require(\"./substrate\"));\n\n// Copyright 2017-2020 @polkadot/metadata authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\nfunction getStorage(registry, metaVersion) {\n  return {\n    substrate: Object.entries(substrate).reduce((storage, [key, fn]) => {\n      storage[key] = fn(registry, metaVersion);\n      return storage;\n    }, {})\n  };\n}"]},"metadata":{},"sourceType":"script"}