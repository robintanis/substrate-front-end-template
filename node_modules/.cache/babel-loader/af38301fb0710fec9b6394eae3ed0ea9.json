{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _AbstractArray = _interopRequireDefault(require(\"./AbstractArray\"));\n\nvar _utils = require(\"./utils\");\n\nvar _Vec = _interopRequireDefault(require(\"./Vec\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name VecFixed\n * @description\n * This manages codec arrays of a fixed length\n */\n\n\nclass VecFixed extends _AbstractArray.default {\n  constructor(registry, Type, length, value = []) {\n    const Clazz = (0, _utils.typeToConstructor)(registry, Type);\n    super(registry, ...VecFixed.decodeVecFixed(registry, Clazz, length, value));\n    this._Type = void 0;\n    this._Type = Clazz;\n  }\n  /** @internal */\n\n\n  static decodeVecFixed(registry, Type, allocLength, value) {\n    const values = _Vec.default.decodeVec(registry, Type, (0, _util.isU8a)(value) ? (0, _util.u8aConcat)((0, _util.compactToU8a)(allocLength), value) : value);\n\n    while (values.length < allocLength) {\n      values.push(new Type(registry));\n    }\n\n    (0, _util.assert)(values.length === allocLength, `Expected a length of exactly ${allocLength} entries`);\n    return values;\n  }\n\n  static with(Type, length) {\n    return class extends VecFixed {\n      constructor(registry, value) {\n        super(registry, Type, length, value);\n      }\n\n    };\n  }\n  /**\n   * @description The type for the items\n   */\n\n\n  get Type() {\n    return new this._Type(this.registry).toRawType();\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n\n  toU8a() {\n    // we override, we don't add the length prefix for ourselves, and at the same time we\n    // ignore isBare on entries, since they should be properly encoded at all times\n    const encoded = this.map(entry => entry.toU8a());\n    return encoded.length ? (0, _util.u8aConcat)(...encoded) : new Uint8Array([]);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return `[${this.Type};${this.length}]`;\n  }\n\n}\n\nexports.default = VecFixed;","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/types/codec/VecFixed.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_util","_AbstractArray","_utils","_Vec","VecFixed","constructor","registry","Type","length","Clazz","typeToConstructor","decodeVecFixed","_Type","allocLength","values","decodeVec","isU8a","u8aConcat","compactToU8a","push","assert","with","toRawType","encodedLength","toU8a","encoded","map","entry","Uint8Array"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _AbstractArray = _interopRequireDefault(require(\"./AbstractArray\"));\n\nvar _utils = require(\"./utils\");\n\nvar _Vec = _interopRequireDefault(require(\"./Vec\"));\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name VecFixed\n * @description\n * This manages codec arrays of a fixed length\n */\nclass VecFixed extends _AbstractArray.default {\n  constructor(registry, Type, length, value = []) {\n    const Clazz = (0, _utils.typeToConstructor)(registry, Type);\n    super(registry, ...VecFixed.decodeVecFixed(registry, Clazz, length, value));\n    this._Type = void 0;\n    this._Type = Clazz;\n  }\n  /** @internal */\n\n\n  static decodeVecFixed(registry, Type, allocLength, value) {\n    const values = _Vec.default.decodeVec(registry, Type, (0, _util.isU8a)(value) ? (0, _util.u8aConcat)((0, _util.compactToU8a)(allocLength), value) : value);\n\n    while (values.length < allocLength) {\n      values.push(new Type(registry));\n    }\n\n    (0, _util.assert)(values.length === allocLength, `Expected a length of exactly ${allocLength} entries`);\n    return values;\n  }\n\n  static with(Type, length) {\n    return class extends VecFixed {\n      constructor(registry, value) {\n        super(registry, Type, length, value);\n      }\n\n    };\n  }\n  /**\n   * @description The type for the items\n   */\n\n\n  get Type() {\n    return new this._Type(this.registry).toRawType();\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n\n  toU8a() {\n    // we override, we don't add the length prefix for ourselves, and at the same time we\n    // ignore isBare on entries, since they should be properly encoded at all times\n    const encoded = this.map(entry => entry.toU8a());\n    return encoded.length ? (0, _util.u8aConcat)(...encoded) : new Uint8Array([]);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return `[${this.Type};${this.length}]`;\n  }\n\n}\n\nexports.default = VecFixed;"]},"metadata":{},"sourceType":"script"}