{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toEntropy;\n\nrequire(\"../polyfill\");\n\nvar _bip = require(\"bip39\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _wasmCrypto = require(\"@polkadot/wasm-crypto\"); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nfunction toEntropy(mnemonic) {\n  return (0, _wasmCrypto.isReady)() ? (0, _wasmCrypto.bip39ToEntropy)(mnemonic) : (0, _util.hexToU8a)((0, _util.hexAddPrefix)((0, _bip.mnemonicToEntropy)(mnemonic)));\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/util-crypto/mnemonic/toEntropy.js"],"names":["Object","defineProperty","exports","value","default","toEntropy","require","_bip","_util","_wasmCrypto","mnemonic","isReady","bip39ToEntropy","hexToU8a","hexAddPrefix","mnemonicToEntropy"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,SAAlB;;AAEAC,OAAO,CAAC,aAAD,CAAP;;AAEA,IAAIC,IAAI,GAAGD,OAAO,CAAC,OAAD,CAAlB;;AAEA,IAAIE,KAAK,GAAGF,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIG,WAAW,GAAGH,OAAO,CAAC,uBAAD,CAAzB,C,CAEA;AACA;;;AACA,SAASD,SAAT,CAAmBK,QAAnB,EAA6B;AAC3B,SAAO,CAAC,GAAGD,WAAW,CAACE,OAAhB,MAA6B,CAAC,GAAGF,WAAW,CAACG,cAAhB,EAAgCF,QAAhC,CAA7B,GAAyE,CAAC,GAAGF,KAAK,CAACK,QAAV,EAAoB,CAAC,GAAGL,KAAK,CAACM,YAAV,EAAwB,CAAC,GAAGP,IAAI,CAACQ,iBAAT,EAA4BL,QAA5B,CAAxB,CAApB,CAAhF;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toEntropy;\n\nrequire(\"../polyfill\");\n\nvar _bip = require(\"bip39\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _wasmCrypto = require(\"@polkadot/wasm-crypto\");\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction toEntropy(mnemonic) {\n  return (0, _wasmCrypto.isReady)() ? (0, _wasmCrypto.bip39ToEntropy)(mnemonic) : (0, _util.hexToU8a)((0, _util.hexAddPrefix)((0, _bip.mnemonicToEntropy)(mnemonic)));\n}"]},"metadata":{},"sourceType":"script"}