{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = scryptFromU8a;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _defaults = require(\"./defaults\"); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nfunction scryptFromU8a(data) {\n  const salt = data.subarray(0, 32);\n  const N = (0, _util.u8aToBn)(data.subarray(32 + 0, 32 + 4), {\n    isLe: true\n  }).toNumber();\n  const p = (0, _util.u8aToBn)(data.subarray(32 + 4, 32 + 8), {\n    isLe: true\n  }).toNumber();\n  const r = (0, _util.u8aToBn)(data.subarray(32 + 8, 32 + 12), {\n    isLe: true\n  }).toNumber(); // FIXME At this moment we assume these to be fixed params, this is not a great idea since we lose flexibility\n  // and updates for greater security. However we need some protection against carefully-crafted params that can\n  // eat up CPU since these are user inputs. So we need to get very clever here, but atm we only allow the defaults\n  // and if no match, bail out\n\n  (0, _util.assert)(N === _defaults.DEFAULT_PARAMS.N && p === _defaults.DEFAULT_PARAMS.p && r === _defaults.DEFAULT_PARAMS.r, 'Invalid injected scrypt params found');\n  return {\n    params: {\n      N,\n      p,\n      r\n    },\n    salt\n  };\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/util-crypto/scrypt/fromU8a.js"],"names":["Object","defineProperty","exports","value","default","scryptFromU8a","_util","require","_defaults","data","salt","subarray","N","u8aToBn","isLe","toNumber","p","r","assert","DEFAULT_PARAMS","params"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,aAAlB;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIC,SAAS,GAAGD,OAAO,CAAC,YAAD,CAAvB,C,CAEA;AACA;;;AACA,SAASF,aAAT,CAAuBI,IAAvB,EAA6B;AAC3B,QAAMC,IAAI,GAAGD,IAAI,CAACE,QAAL,CAAc,CAAd,EAAiB,EAAjB,CAAb;AACA,QAAMC,CAAC,GAAG,CAAC,GAAGN,KAAK,CAACO,OAAV,EAAmBJ,IAAI,CAACE,QAAL,CAAc,KAAK,CAAnB,EAAsB,KAAK,CAA3B,CAAnB,EAAkD;AAC1DG,IAAAA,IAAI,EAAE;AADoD,GAAlD,EAEPC,QAFO,EAAV;AAGA,QAAMC,CAAC,GAAG,CAAC,GAAGV,KAAK,CAACO,OAAV,EAAmBJ,IAAI,CAACE,QAAL,CAAc,KAAK,CAAnB,EAAsB,KAAK,CAA3B,CAAnB,EAAkD;AAC1DG,IAAAA,IAAI,EAAE;AADoD,GAAlD,EAEPC,QAFO,EAAV;AAGA,QAAME,CAAC,GAAG,CAAC,GAAGX,KAAK,CAACO,OAAV,EAAmBJ,IAAI,CAACE,QAAL,CAAc,KAAK,CAAnB,EAAsB,KAAK,EAA3B,CAAnB,EAAmD;AAC3DG,IAAAA,IAAI,EAAE;AADqD,GAAnD,EAEPC,QAFO,EAAV,CAR2B,CAUZ;AACf;AACA;AACA;;AAEA,GAAC,GAAGT,KAAK,CAACY,MAAV,EAAkBN,CAAC,KAAKJ,SAAS,CAACW,cAAV,CAAyBP,CAA/B,IAAoCI,CAAC,KAAKR,SAAS,CAACW,cAAV,CAAyBH,CAAnE,IAAwEC,CAAC,KAAKT,SAAS,CAACW,cAAV,CAAyBF,CAAzH,EAA4H,sCAA5H;AACA,SAAO;AACLG,IAAAA,MAAM,EAAE;AACNR,MAAAA,CADM;AAENI,MAAAA,CAFM;AAGNC,MAAAA;AAHM,KADH;AAMLP,IAAAA;AANK,GAAP;AAQD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = scryptFromU8a;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _defaults = require(\"./defaults\");\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction scryptFromU8a(data) {\n  const salt = data.subarray(0, 32);\n  const N = (0, _util.u8aToBn)(data.subarray(32 + 0, 32 + 4), {\n    isLe: true\n  }).toNumber();\n  const p = (0, _util.u8aToBn)(data.subarray(32 + 4, 32 + 8), {\n    isLe: true\n  }).toNumber();\n  const r = (0, _util.u8aToBn)(data.subarray(32 + 8, 32 + 12), {\n    isLe: true\n  }).toNumber(); // FIXME At this moment we assume these to be fixed params, this is not a great idea since we lose flexibility\n  // and updates for greater security. However we need some protection against carefully-crafted params that can\n  // eat up CPU since these are user inputs. So we need to get very clever here, but atm we only allow the defaults\n  // and if no match, bail out\n\n  (0, _util.assert)(N === _defaults.DEFAULT_PARAMS.N && p === _defaults.DEFAULT_PARAMS.p && r === _defaults.DEFAULT_PARAMS.r, 'Invalid injected scrypt params found');\n  return {\n    params: {\n      N,\n      p,\n      r\n    },\n    salt\n  };\n}"]},"metadata":{},"sourceType":"script"}