{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.CID_POW = exports.CID_GRPA = exports.CID_BABE = exports.CID_AURA = void 0;\n\nvar _bn = _interopRequireDefault(require(\"bn.js\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _U = _interopRequireDefault(require(\"../primitive/U32\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// there are all reversed since it is actually encoded as u32, LE,\n// this means that FRNK has the bytes as KNRF\n\n\nconst CID_AURA = 0x61727561; // 'aura'\n\nexports.CID_AURA = CID_AURA;\nconst CID_BABE = 0x45424142; // 'BABE'\n\nexports.CID_BABE = CID_BABE;\nconst CID_GRPA = 0x4b4e5246; // 'FRNK' (don't ask, used to be afg1)\n\nexports.CID_GRPA = CID_GRPA;\nconst CID_POW = 0x5f776f70; // 'pow_'\n\nexports.CID_POW = CID_POW;\n/**\n * @name ConsensusEngineId\n * @description\n * A 4-byte identifier (actually a [u8; 4]) identifying the engine, e.g. for Aura it would be [b'a', b'u', b'r', b'a']\n */\n\nclass ConsensusEngineId extends _U.default {\n  static idToString(input) {\n    return (0, _util.bnToBn)(input).toArray('le').map(code => String.fromCharCode(code)).join('');\n  }\n\n  static stringToId(input) {\n    return input.split('').reverse().reduce((result, char) => result * 256 + char.charCodeAt(0), 0);\n  }\n  /**\n   * @description `true` if the engine matches aura\n   */\n\n\n  get isAura() {\n    return this.eq(CID_AURA);\n  }\n  /**\n   * @description `true` is the engine matches babe\n   */\n\n\n  get isBabe() {\n    return this.eq(CID_BABE);\n  }\n  /**\n   * @description `true` is the engine matches grandpa\n   */\n\n\n  get isGrandpa() {\n    return this.eq(CID_GRPA);\n  }\n  /**\n   * @description `true` is the engine matches pow\n   */\n\n\n  get isPow() {\n    return this.eq(CID_POW);\n  }\n\n  _getAuraAuthor(bytes, sessionValidators) {\n    return sessionValidators[this.registry.createType('RawAuraPreDigest', bytes.toU8a(true)).slotNumber.mod(new _bn.default(sessionValidators.length)).toNumber()];\n  }\n\n  _getBabeAuthor(bytes, sessionValidators) {\n    const digest = this.registry.createType('RawBabePreDigestCompat', bytes.toU8a(true));\n    return sessionValidators[digest.value.toNumber()];\n  }\n\n  _getPowAuthor(bytes) {\n    return this.registry.createType('AccountId', bytes);\n  }\n  /**\n   * @description From the input bytes, decode into an author\n   */\n\n\n  extractAuthor(bytes, sessionValidators) {\n    if (sessionValidators === null || sessionValidators === void 0 ? void 0 : sessionValidators.length) {\n      if (this.isAura) {\n        return this._getAuraAuthor(bytes, sessionValidators);\n      } else if (this.isBabe) {\n        return this._getBabeAuthor(bytes, sessionValidators);\n      }\n    }\n\n    if (this.isPow) {\n      return this._getPowAuthor(bytes);\n    }\n\n    return undefined;\n  }\n  /**\n   * @description Override the default toString to return a 4-byte string\n   */\n\n\n  toString() {\n    return ConsensusEngineId.idToString(this);\n  }\n\n}\n\nexports.default = ConsensusEngineId;","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/types/generic/ConsensusEngineId.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","CID_POW","CID_GRPA","CID_BABE","CID_AURA","_bn","_util","_U","ConsensusEngineId","idToString","input","bnToBn","toArray","map","code","String","fromCharCode","join","stringToId","split","reverse","reduce","result","char","charCodeAt","isAura","eq","isBabe","isGrandpa","isPow","_getAuraAuthor","bytes","sessionValidators","registry","createType","toU8a","slotNumber","mod","length","toNumber","_getBabeAuthor","digest","_getPowAuthor","extractAuthor","undefined","toString"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBF,OAAO,CAACG,OAAR,GAAkBH,OAAO,CAACI,QAAR,GAAmBJ,OAAO,CAACK,QAAR,GAAmBL,OAAO,CAACM,QAAR,GAAmB,KAAK,CAAlG;;AAEA,IAAIC,GAAG,GAAGX,sBAAsB,CAACC,OAAO,CAAC,OAAD,CAAR,CAAhC;;AAEA,IAAIW,KAAK,GAAGX,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIY,EAAE,GAAGb,sBAAsB,CAACC,OAAO,CAAC,kBAAD,CAAR,CAA/B,C,CAEA;AACA;AACA;AACA;;;AACA,MAAMS,QAAQ,GAAG,UAAjB,C,CAA6B;;AAE7BN,OAAO,CAACM,QAAR,GAAmBA,QAAnB;AACA,MAAMD,QAAQ,GAAG,UAAjB,C,CAA6B;;AAE7BL,OAAO,CAACK,QAAR,GAAmBA,QAAnB;AACA,MAAMD,QAAQ,GAAG,UAAjB,C,CAA6B;;AAE7BJ,OAAO,CAACI,QAAR,GAAmBA,QAAnB;AACA,MAAMD,OAAO,GAAG,UAAhB,C,CAA4B;;AAE5BH,OAAO,CAACG,OAAR,GAAkBA,OAAlB;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMO,iBAAN,SAAgCD,EAAE,CAACP,OAAnC,CAA2C;AACzC,SAAOS,UAAP,CAAkBC,KAAlB,EAAyB;AACvB,WAAO,CAAC,GAAGJ,KAAK,CAACK,MAAV,EAAkBD,KAAlB,EAAyBE,OAAzB,CAAiC,IAAjC,EAAuCC,GAAvC,CAA2CC,IAAI,IAAIC,MAAM,CAACC,YAAP,CAAoBF,IAApB,CAAnD,EAA8EG,IAA9E,CAAmF,EAAnF,CAAP;AACD;;AAED,SAAOC,UAAP,CAAkBR,KAAlB,EAAyB;AACvB,WAAOA,KAAK,CAACS,KAAN,CAAY,EAAZ,EAAgBC,OAAhB,GAA0BC,MAA1B,CAAiC,CAACC,MAAD,EAASC,IAAT,KAAkBD,MAAM,GAAG,GAAT,GAAeC,IAAI,CAACC,UAAL,CAAgB,CAAhB,CAAlE,EAAsF,CAAtF,CAAP;AACD;AACD;AACF;AACA;;;AAGE,MAAIC,MAAJ,GAAa;AACX,WAAO,KAAKC,EAAL,CAAQtB,QAAR,CAAP;AACD;AACD;AACF;AACA;;;AAGE,MAAIuB,MAAJ,GAAa;AACX,WAAO,KAAKD,EAAL,CAAQvB,QAAR,CAAP;AACD;AACD;AACF;AACA;;;AAGE,MAAIyB,SAAJ,GAAgB;AACd,WAAO,KAAKF,EAAL,CAAQxB,QAAR,CAAP;AACD;AACD;AACF;AACA;;;AAGE,MAAI2B,KAAJ,GAAY;AACV,WAAO,KAAKH,EAAL,CAAQzB,OAAR,CAAP;AACD;;AAED6B,EAAAA,cAAc,CAACC,KAAD,EAAQC,iBAAR,EAA2B;AACvC,WAAOA,iBAAiB,CAAC,KAAKC,QAAL,CAAcC,UAAd,CAAyB,kBAAzB,EAA6CH,KAAK,CAACI,KAAN,CAAY,IAAZ,CAA7C,EAAgEC,UAAhE,CAA2EC,GAA3E,CAA+E,IAAIhC,GAAG,CAACL,OAAR,CAAgBgC,iBAAiB,CAACM,MAAlC,CAA/E,EAA0HC,QAA1H,EAAD,CAAxB;AACD;;AAEDC,EAAAA,cAAc,CAACT,KAAD,EAAQC,iBAAR,EAA2B;AACvC,UAAMS,MAAM,GAAG,KAAKR,QAAL,CAAcC,UAAd,CAAyB,wBAAzB,EAAmDH,KAAK,CAACI,KAAN,CAAY,IAAZ,CAAnD,CAAf;AACA,WAAOH,iBAAiB,CAACS,MAAM,CAAC1C,KAAP,CAAawC,QAAb,EAAD,CAAxB;AACD;;AAEDG,EAAAA,aAAa,CAACX,KAAD,EAAQ;AACnB,WAAO,KAAKE,QAAL,CAAcC,UAAd,CAAyB,WAAzB,EAAsCH,KAAtC,CAAP;AACD;AACD;AACF;AACA;;;AAGEY,EAAAA,aAAa,CAACZ,KAAD,EAAQC,iBAAR,EAA2B;AACtC,QAAIA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACM,MAA5F,EAAoG;AAClG,UAAI,KAAKb,MAAT,EAAiB;AACf,eAAO,KAAKK,cAAL,CAAoBC,KAApB,EAA2BC,iBAA3B,CAAP;AACD,OAFD,MAEO,IAAI,KAAKL,MAAT,EAAiB;AACtB,eAAO,KAAKa,cAAL,CAAoBT,KAApB,EAA2BC,iBAA3B,CAAP;AACD;AACF;;AAED,QAAI,KAAKH,KAAT,EAAgB;AACd,aAAO,KAAKa,aAAL,CAAmBX,KAAnB,CAAP;AACD;;AAED,WAAOa,SAAP;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,QAAQ,GAAG;AACT,WAAOrC,iBAAiB,CAACC,UAAlB,CAA6B,IAA7B,CAAP;AACD;;AAhFwC;;AAoF3CX,OAAO,CAACE,OAAR,GAAkBQ,iBAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.CID_POW = exports.CID_GRPA = exports.CID_BABE = exports.CID_AURA = void 0;\n\nvar _bn = _interopRequireDefault(require(\"bn.js\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _U = _interopRequireDefault(require(\"../primitive/U32\"));\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// there are all reversed since it is actually encoded as u32, LE,\n// this means that FRNK has the bytes as KNRF\nconst CID_AURA = 0x61727561; // 'aura'\n\nexports.CID_AURA = CID_AURA;\nconst CID_BABE = 0x45424142; // 'BABE'\n\nexports.CID_BABE = CID_BABE;\nconst CID_GRPA = 0x4b4e5246; // 'FRNK' (don't ask, used to be afg1)\n\nexports.CID_GRPA = CID_GRPA;\nconst CID_POW = 0x5f776f70; // 'pow_'\n\nexports.CID_POW = CID_POW;\n\n/**\n * @name ConsensusEngineId\n * @description\n * A 4-byte identifier (actually a [u8; 4]) identifying the engine, e.g. for Aura it would be [b'a', b'u', b'r', b'a']\n */\nclass ConsensusEngineId extends _U.default {\n  static idToString(input) {\n    return (0, _util.bnToBn)(input).toArray('le').map(code => String.fromCharCode(code)).join('');\n  }\n\n  static stringToId(input) {\n    return input.split('').reverse().reduce((result, char) => result * 256 + char.charCodeAt(0), 0);\n  }\n  /**\n   * @description `true` if the engine matches aura\n   */\n\n\n  get isAura() {\n    return this.eq(CID_AURA);\n  }\n  /**\n   * @description `true` is the engine matches babe\n   */\n\n\n  get isBabe() {\n    return this.eq(CID_BABE);\n  }\n  /**\n   * @description `true` is the engine matches grandpa\n   */\n\n\n  get isGrandpa() {\n    return this.eq(CID_GRPA);\n  }\n  /**\n   * @description `true` is the engine matches pow\n   */\n\n\n  get isPow() {\n    return this.eq(CID_POW);\n  }\n\n  _getAuraAuthor(bytes, sessionValidators) {\n    return sessionValidators[this.registry.createType('RawAuraPreDigest', bytes.toU8a(true)).slotNumber.mod(new _bn.default(sessionValidators.length)).toNumber()];\n  }\n\n  _getBabeAuthor(bytes, sessionValidators) {\n    const digest = this.registry.createType('RawBabePreDigestCompat', bytes.toU8a(true));\n    return sessionValidators[digest.value.toNumber()];\n  }\n\n  _getPowAuthor(bytes) {\n    return this.registry.createType('AccountId', bytes);\n  }\n  /**\n   * @description From the input bytes, decode into an author\n   */\n\n\n  extractAuthor(bytes, sessionValidators) {\n    if (sessionValidators === null || sessionValidators === void 0 ? void 0 : sessionValidators.length) {\n      if (this.isAura) {\n        return this._getAuraAuthor(bytes, sessionValidators);\n      } else if (this.isBabe) {\n        return this._getBabeAuthor(bytes, sessionValidators);\n      }\n    }\n\n    if (this.isPow) {\n      return this._getPowAuthor(bytes);\n    }\n\n    return undefined;\n  }\n  /**\n   * @description Override the default toString to return a 4-byte string\n   */\n\n\n  toString() {\n    return ConsensusEngineId.idToString(this);\n  }\n\n}\n\nexports.default = ConsensusEngineId;"]},"metadata":{},"sourceType":"script"}