{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = signatureVerify;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _decode = _interopRequireDefault(require(\"../address/decode\"));\n\nvar _verify = _interopRequireDefault(require(\"../nacl/verify\"));\n\nvar _verify2 = _interopRequireDefault(require(\"../schnorrkel/verify\"));\n\nvar _verify3 = _interopRequireDefault(require(\"../secp256k1/verify\")); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nconst VERIFIERS = [['ed25519', _verify.default], ['sr25519', _verify2.default], ['ecdsa', (message, signature, publicKey) => (0, _verify3.default)(message, signature, publicKey, 'blake2')], ['ethereum', (message, signature, publicKey) => (0, _verify3.default)(message, signature, publicKey, 'keccak')]];\nconst CRYPTO_TYPES = ['ed25519', 'sr25519', 'ecdsa', 'ethereum'];\n\nfunction verifyDetect(result, message, signature, publicKey) {\n  result.isValid = VERIFIERS.some(([crypto, verify]) => {\n    try {\n      if (verify(message, signature, publicKey)) {\n        result.crypto = crypto;\n        return true;\n      }\n    } catch (error) {// do nothing, result.isValid still set to false\n    }\n\n    return false;\n  });\n  return result;\n}\n\nfunction verifyMultisig(result, message, signature, publicKey) {\n  (0, _util.assert)([0, 1, 2].includes(signature[0]), `Unknown crypto type, expected signature prefix [0..2], found ${signature[0]}`);\n  result.crypto = CRYPTO_TYPES[signature[0]] || 'none';\n\n  try {\n    result.isValid = {\n      ecdsa: () => (0, _verify3.default)(message, signature.subarray(1), publicKey, 'blake2'),\n      ed25519: () => (0, _verify.default)(message, signature.subarray(1), publicKey),\n      ethereum: () => (0, _verify3.default)(message, signature.subarray(1), publicKey, 'keccak'),\n      none: () => {\n        throw Error('no verify for `none` crypto type');\n      },\n      sr25519: () => (0, _verify2.default)(message, signature.subarray(1), publicKey)\n    }[result.crypto]();\n  } catch (error) {// ignore, result.isValid still set to false\n  }\n\n  return result;\n}\n\nfunction signatureVerify(message, signature, addressOrPublicKey) {\n  const signatureU8a = (0, _util.u8aToU8a)(signature);\n  (0, _util.assert)([64, 65, 66].includes(signatureU8a.length), `Invalid signature length, expected [64..66] bytes, found ${signatureU8a.length}`);\n  const result = {\n    crypto: 'none',\n    isValid: false\n  };\n  const publicKey = (0, _decode.default)(addressOrPublicKey);\n  const isMultisig = [0, 1, 2].includes(signatureU8a[0]) && [65, 66].includes(signatureU8a.length);\n\n  if (isMultisig) {\n    return verifyMultisig(result, message, signatureU8a, publicKey);\n  } else {\n    return verifyDetect(result, message, signatureU8a, publicKey);\n  }\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/util-crypto/signature/verify.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","signatureVerify","_util","_decode","_verify","_verify2","_verify3","VERIFIERS","message","signature","publicKey","CRYPTO_TYPES","verifyDetect","result","isValid","some","crypto","verify","error","verifyMultisig","assert","includes","ecdsa","subarray","ed25519","ethereum","none","Error","sr25519","addressOrPublicKey","signatureU8a","u8aToU8a","length","isMultisig"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,eAAlB;;AAEA,IAAIC,KAAK,GAAGP,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIQ,OAAO,GAAGT,sBAAsB,CAACC,OAAO,CAAC,mBAAD,CAAR,CAApC;;AAEA,IAAIS,OAAO,GAAGV,sBAAsB,CAACC,OAAO,CAAC,gBAAD,CAAR,CAApC;;AAEA,IAAIU,QAAQ,GAAGX,sBAAsB,CAACC,OAAO,CAAC,sBAAD,CAAR,CAArC;;AAEA,IAAIW,QAAQ,GAAGZ,sBAAsB,CAACC,OAAO,CAAC,qBAAD,CAAR,CAArC,C,CAEA;AACA;;;AACA,MAAMY,SAAS,GAAG,CAAC,CAAC,SAAD,EAAYH,OAAO,CAACJ,OAApB,CAAD,EAA+B,CAAC,SAAD,EAAYK,QAAQ,CAACL,OAArB,CAA/B,EAA8D,CAAC,OAAD,EAAU,CAACQ,OAAD,EAAUC,SAAV,EAAqBC,SAArB,KAAmC,CAAC,GAAGJ,QAAQ,CAACN,OAAb,EAAsBQ,OAAtB,EAA+BC,SAA/B,EAA0CC,SAA1C,EAAqD,QAArD,CAA7C,CAA9D,EAA4K,CAAC,UAAD,EAAa,CAACF,OAAD,EAAUC,SAAV,EAAqBC,SAArB,KAAmC,CAAC,GAAGJ,QAAQ,CAACN,OAAb,EAAsBQ,OAAtB,EAA+BC,SAA/B,EAA0CC,SAA1C,EAAqD,QAArD,CAAhD,CAA5K,CAAlB;AACA,MAAMC,YAAY,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,OAAvB,EAAgC,UAAhC,CAArB;;AAEA,SAASC,YAAT,CAAsBC,MAAtB,EAA8BL,OAA9B,EAAuCC,SAAvC,EAAkDC,SAAlD,EAA6D;AAC3DG,EAAAA,MAAM,CAACC,OAAP,GAAiBP,SAAS,CAACQ,IAAV,CAAe,CAAC,CAACC,MAAD,EAASC,MAAT,CAAD,KAAsB;AACpD,QAAI;AACF,UAAIA,MAAM,CAACT,OAAD,EAAUC,SAAV,EAAqBC,SAArB,CAAV,EAA2C;AACzCG,QAAAA,MAAM,CAACG,MAAP,GAAgBA,MAAhB;AACA,eAAO,IAAP;AACD;AACF,KALD,CAKE,OAAOE,KAAP,EAAc,CAAC;AAChB;;AAED,WAAO,KAAP;AACD,GAVgB,CAAjB;AAWA,SAAOL,MAAP;AACD;;AAED,SAASM,cAAT,CAAwBN,MAAxB,EAAgCL,OAAhC,EAAyCC,SAAzC,EAAoDC,SAApD,EAA+D;AAC7D,GAAC,GAAGR,KAAK,CAACkB,MAAV,EAAkB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAUC,QAAV,CAAmBZ,SAAS,CAAC,CAAD,CAA5B,CAAlB,EAAqD,gEAA+DA,SAAS,CAAC,CAAD,CAAI,EAAjI;AACAI,EAAAA,MAAM,CAACG,MAAP,GAAgBL,YAAY,CAACF,SAAS,CAAC,CAAD,CAAV,CAAZ,IAA8B,MAA9C;;AAEA,MAAI;AACFI,IAAAA,MAAM,CAACC,OAAP,GAAiB;AACfQ,MAAAA,KAAK,EAAE,MAAM,CAAC,GAAGhB,QAAQ,CAACN,OAAb,EAAsBQ,OAAtB,EAA+BC,SAAS,CAACc,QAAV,CAAmB,CAAnB,CAA/B,EAAsDb,SAAtD,EAAiE,QAAjE,CADE;AAEfc,MAAAA,OAAO,EAAE,MAAM,CAAC,GAAGpB,OAAO,CAACJ,OAAZ,EAAqBQ,OAArB,EAA8BC,SAAS,CAACc,QAAV,CAAmB,CAAnB,CAA9B,EAAqDb,SAArD,CAFA;AAGfe,MAAAA,QAAQ,EAAE,MAAM,CAAC,GAAGnB,QAAQ,CAACN,OAAb,EAAsBQ,OAAtB,EAA+BC,SAAS,CAACc,QAAV,CAAmB,CAAnB,CAA/B,EAAsDb,SAAtD,EAAiE,QAAjE,CAHD;AAIfgB,MAAAA,IAAI,EAAE,MAAM;AACV,cAAMC,KAAK,CAAC,kCAAD,CAAX;AACD,OANc;AAOfC,MAAAA,OAAO,EAAE,MAAM,CAAC,GAAGvB,QAAQ,CAACL,OAAb,EAAsBQ,OAAtB,EAA+BC,SAAS,CAACc,QAAV,CAAmB,CAAnB,CAA/B,EAAsDb,SAAtD;AAPA,MAQfG,MAAM,CAACG,MARQ,GAAjB;AASD,GAVD,CAUE,OAAOE,KAAP,EAAc,CAAC;AAChB;;AAED,SAAOL,MAAP;AACD;;AAED,SAASZ,eAAT,CAAyBO,OAAzB,EAAkCC,SAAlC,EAA6CoB,kBAA7C,EAAiE;AAC/D,QAAMC,YAAY,GAAG,CAAC,GAAG5B,KAAK,CAAC6B,QAAV,EAAoBtB,SAApB,CAArB;AACA,GAAC,GAAGP,KAAK,CAACkB,MAAV,EAAkB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAaC,QAAb,CAAsBS,YAAY,CAACE,MAAnC,CAAlB,EAA+D,4DAA2DF,YAAY,CAACE,MAAO,EAA9I;AACA,QAAMnB,MAAM,GAAG;AACbG,IAAAA,MAAM,EAAE,MADK;AAEbF,IAAAA,OAAO,EAAE;AAFI,GAAf;AAIA,QAAMJ,SAAS,GAAG,CAAC,GAAGP,OAAO,CAACH,OAAZ,EAAqB6B,kBAArB,CAAlB;AACA,QAAMI,UAAU,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAUZ,QAAV,CAAmBS,YAAY,CAAC,CAAD,CAA/B,KAAuC,CAAC,EAAD,EAAK,EAAL,EAAST,QAAT,CAAkBS,YAAY,CAACE,MAA/B,CAA1D;;AAEA,MAAIC,UAAJ,EAAgB;AACd,WAAOd,cAAc,CAACN,MAAD,EAASL,OAAT,EAAkBsB,YAAlB,EAAgCpB,SAAhC,CAArB;AACD,GAFD,MAEO;AACL,WAAOE,YAAY,CAACC,MAAD,EAASL,OAAT,EAAkBsB,YAAlB,EAAgCpB,SAAhC,CAAnB;AACD;AACF","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = signatureVerify;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _decode = _interopRequireDefault(require(\"../address/decode\"));\n\nvar _verify = _interopRequireDefault(require(\"../nacl/verify\"));\n\nvar _verify2 = _interopRequireDefault(require(\"../schnorrkel/verify\"));\n\nvar _verify3 = _interopRequireDefault(require(\"../secp256k1/verify\"));\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst VERIFIERS = [['ed25519', _verify.default], ['sr25519', _verify2.default], ['ecdsa', (message, signature, publicKey) => (0, _verify3.default)(message, signature, publicKey, 'blake2')], ['ethereum', (message, signature, publicKey) => (0, _verify3.default)(message, signature, publicKey, 'keccak')]];\nconst CRYPTO_TYPES = ['ed25519', 'sr25519', 'ecdsa', 'ethereum'];\n\nfunction verifyDetect(result, message, signature, publicKey) {\n  result.isValid = VERIFIERS.some(([crypto, verify]) => {\n    try {\n      if (verify(message, signature, publicKey)) {\n        result.crypto = crypto;\n        return true;\n      }\n    } catch (error) {// do nothing, result.isValid still set to false\n    }\n\n    return false;\n  });\n  return result;\n}\n\nfunction verifyMultisig(result, message, signature, publicKey) {\n  (0, _util.assert)([0, 1, 2].includes(signature[0]), `Unknown crypto type, expected signature prefix [0..2], found ${signature[0]}`);\n  result.crypto = CRYPTO_TYPES[signature[0]] || 'none';\n\n  try {\n    result.isValid = {\n      ecdsa: () => (0, _verify3.default)(message, signature.subarray(1), publicKey, 'blake2'),\n      ed25519: () => (0, _verify.default)(message, signature.subarray(1), publicKey),\n      ethereum: () => (0, _verify3.default)(message, signature.subarray(1), publicKey, 'keccak'),\n      none: () => {\n        throw Error('no verify for `none` crypto type');\n      },\n      sr25519: () => (0, _verify2.default)(message, signature.subarray(1), publicKey)\n    }[result.crypto]();\n  } catch (error) {// ignore, result.isValid still set to false\n  }\n\n  return result;\n}\n\nfunction signatureVerify(message, signature, addressOrPublicKey) {\n  const signatureU8a = (0, _util.u8aToU8a)(signature);\n  (0, _util.assert)([64, 65, 66].includes(signatureU8a.length), `Invalid signature length, expected [64..66] bytes, found ${signatureU8a.length}`);\n  const result = {\n    crypto: 'none',\n    isValid: false\n  };\n  const publicKey = (0, _decode.default)(addressOrPublicKey);\n  const isMultisig = [0, 1, 2].includes(signatureU8a[0]) && [65, 66].includes(signatureU8a.length);\n\n  if (isMultisig) {\n    return verifyMultisig(result, message, signatureU8a, publicKey);\n  } else {\n    return verifyDetect(result, message, signatureU8a, publicKey);\n  }\n}"]},"metadata":{},"sourceType":"script"}