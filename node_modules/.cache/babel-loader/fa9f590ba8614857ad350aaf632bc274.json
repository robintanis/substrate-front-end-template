{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utilCrypto = require(\"@polkadot/util-crypto\");\n\nvar _U8aFixed = _interopRequireDefault(require(\"../codec/U8aFixed\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\n\n\nfunction decodeAccountId(value) {\n  if (!value) {\n    return new Uint8Array();\n  } else if ((0, _util.isU8a)(value) || Array.isArray(value)) {\n    return (0, _util.u8aToU8a)(value);\n  } else if ((0, _util.isHex)(value)) {\n    return (0, _util.hexToU8a)(value.toString());\n  } else if ((0, _util.isString)(value)) {\n    return (0, _utilCrypto.decodeAddress)(value.toString());\n  }\n\n  throw new Error('Unknown type passed to AccountId constructor');\n}\n/**\n * @name AccountId\n * @description\n * A wrapper around an AccountId/PublicKey representation. Since we are dealing with\n * underlying PublicKeys (32 bytes in length), we extend from U8aFixed which is\n * just a Uint8Array wrapper with a fixed length.\n */\n\n\nclass AccountId extends _U8aFixed.default {\n  constructor(registry, value) {\n    const decoded = decodeAccountId(value); // Part of stream containing >= 32 bytes or a all empty (defaults)\n\n    (0, _util.assert)(decoded.length >= 32 || !decoded.some(b => b), `Invalid AccountId provided, expected 32 bytes, found ${decoded.length}`);\n    super(registry, decoded, 256);\n  }\n\n  static encode(value, ss58Format) {\n    return (0, _utilCrypto.encodeAddress)(value, ss58Format);\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return super.eq(decodeAccountId(other));\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return AccountId.encode(this, this.registry.chainSS58);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'AccountId';\n  }\n\n}\n\nexports.default = AccountId;","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/types/generic/AccountId.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_util","_utilCrypto","_U8aFixed","decodeAccountId","Uint8Array","isU8a","Array","isArray","u8aToU8a","isHex","hexToU8a","toString","isString","decodeAddress","Error","AccountId","constructor","registry","decoded","assert","length","some","b","encode","ss58Format","encodeAddress","eq","other","toHuman","toJSON","chainSS58","toRawType"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,KAAK,GAAGN,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIO,WAAW,GAAGP,OAAO,CAAC,uBAAD,CAAzB;;AAEA,IAAIQ,SAAS,GAAGT,sBAAsB,CAACC,OAAO,CAAC,mBAAD,CAAR,CAAtC,C,CAEA;AACA;;AAEA;;;AACA,SAASS,eAAT,CAAyBL,KAAzB,EAAgC;AAC9B,MAAI,CAACA,KAAL,EAAY;AACV,WAAO,IAAIM,UAAJ,EAAP;AACD,GAFD,MAEO,IAAI,CAAC,GAAGJ,KAAK,CAACK,KAAV,EAAiBP,KAAjB,KAA2BQ,KAAK,CAACC,OAAN,CAAcT,KAAd,CAA/B,EAAqD;AAC1D,WAAO,CAAC,GAAGE,KAAK,CAACQ,QAAV,EAAoBV,KAApB,CAAP;AACD,GAFM,MAEA,IAAI,CAAC,GAAGE,KAAK,CAACS,KAAV,EAAiBX,KAAjB,CAAJ,EAA6B;AAClC,WAAO,CAAC,GAAGE,KAAK,CAACU,QAAV,EAAoBZ,KAAK,CAACa,QAAN,EAApB,CAAP;AACD,GAFM,MAEA,IAAI,CAAC,GAAGX,KAAK,CAACY,QAAV,EAAoBd,KAApB,CAAJ,EAAgC;AACrC,WAAO,CAAC,GAAGG,WAAW,CAACY,aAAhB,EAA+Bf,KAAK,CAACa,QAAN,EAA/B,CAAP;AACD;;AAED,QAAM,IAAIG,KAAJ,CAAU,8CAAV,CAAN;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,MAAMC,SAAN,SAAwBb,SAAS,CAACH,OAAlC,CAA0C;AACxCiB,EAAAA,WAAW,CAACC,QAAD,EAAWnB,KAAX,EAAkB;AAC3B,UAAMoB,OAAO,GAAGf,eAAe,CAACL,KAAD,CAA/B,CAD2B,CACa;;AAExC,KAAC,GAAGE,KAAK,CAACmB,MAAV,EAAkBD,OAAO,CAACE,MAAR,IAAkB,EAAlB,IAAwB,CAACF,OAAO,CAACG,IAAR,CAAaC,CAAC,IAAIA,CAAlB,CAA3C,EAAkE,wDAAuDJ,OAAO,CAACE,MAAO,EAAxI;AACA,UAAMH,QAAN,EAAgBC,OAAhB,EAAyB,GAAzB;AACD;;AAED,SAAOK,MAAP,CAAczB,KAAd,EAAqB0B,UAArB,EAAiC;AAC/B,WAAO,CAAC,GAAGvB,WAAW,CAACwB,aAAhB,EAA+B3B,KAA/B,EAAsC0B,UAAtC,CAAP;AACD;AACD;AACF;AACA;;;AAGEE,EAAAA,EAAE,CAACC,KAAD,EAAQ;AACR,WAAO,MAAMD,EAAN,CAASvB,eAAe,CAACwB,KAAD,CAAxB,CAAP;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKC,MAAL,EAAP;AACD;AACD;AACF;AACA;;;AAGEA,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKlB,QAAL,EAAP;AACD;AACD;AACF;AACA;;;AAGEA,EAAAA,QAAQ,GAAG;AACT,WAAOI,SAAS,CAACQ,MAAV,CAAiB,IAAjB,EAAuB,KAAKN,QAAL,CAAca,SAArC,CAAP;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,SAAS,GAAG;AACV,WAAO,WAAP;AACD;;AAlDuC;;AAsD1ClC,OAAO,CAACE,OAAR,GAAkBgB,SAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utilCrypto = require(\"@polkadot/util-crypto\");\n\nvar _U8aFixed = _interopRequireDefault(require(\"../codec/U8aFixed\"));\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\nfunction decodeAccountId(value) {\n  if (!value) {\n    return new Uint8Array();\n  } else if ((0, _util.isU8a)(value) || Array.isArray(value)) {\n    return (0, _util.u8aToU8a)(value);\n  } else if ((0, _util.isHex)(value)) {\n    return (0, _util.hexToU8a)(value.toString());\n  } else if ((0, _util.isString)(value)) {\n    return (0, _utilCrypto.decodeAddress)(value.toString());\n  }\n\n  throw new Error('Unknown type passed to AccountId constructor');\n}\n/**\n * @name AccountId\n * @description\n * A wrapper around an AccountId/PublicKey representation. Since we are dealing with\n * underlying PublicKeys (32 bytes in length), we extend from U8aFixed which is\n * just a Uint8Array wrapper with a fixed length.\n */\n\n\nclass AccountId extends _U8aFixed.default {\n  constructor(registry, value) {\n    const decoded = decodeAccountId(value); // Part of stream containing >= 32 bytes or a all empty (defaults)\n\n    (0, _util.assert)(decoded.length >= 32 || !decoded.some(b => b), `Invalid AccountId provided, expected 32 bytes, found ${decoded.length}`);\n    super(registry, decoded, 256);\n  }\n\n  static encode(value, ss58Format) {\n    return (0, _utilCrypto.encodeAddress)(value, ss58Format);\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return super.eq(decodeAccountId(other));\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return AccountId.encode(this, this.registry.chainSS58);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'AccountId';\n  }\n\n}\n\nexports.default = AccountId;"]},"metadata":{},"sourceType":"script"}