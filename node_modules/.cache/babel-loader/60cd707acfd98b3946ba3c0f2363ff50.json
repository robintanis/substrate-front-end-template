{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = bnToBn;\n\nvar _bn = _interopRequireDefault(require(\"bn.js\"));\n\nvar _bigInt = _interopRequireDefault(require(\"../is/bigInt\"));\n\nvar _toBn = _interopRequireDefault(require(\"../is/toBn\"));\n\nvar _hex = _interopRequireDefault(require(\"../is/hex\"));\n\nvar _toBn2 = _interopRequireDefault(require(\"../hex/toBn\")); // Copyright 2017-2020 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name bnToBn\n * @summary Creates a BN value from a BN, BigInt, string (base 10 or hex) or number input.\n * @description\n * `null` inputs returns a `0x0` result, BN values returns the value, numbers returns a BN representation.\n * @example\n * <BR>\n *\n * ```javascript\n * import BN from 'bn.js';\n * import { bnToBn } from '@polkadot/util';\n *\n * bnToBn(0x1234); // => BN(0x1234)\n * bnToBn(new BN(0x1234)); // => BN(0x1234)\n * ```\n */\n\n\nfunction bnToBn(value) {\n  if (!value) {\n    return new _bn.default(0);\n  } else if ((0, _hex.default)(value)) {\n    return (0, _toBn2.default)(value.toString());\n  } else if ((0, _bigInt.default)(value)) {\n    return new _bn.default(value.toString());\n  }\n\n  return _bn.default.isBN(value) ? value : (0, _toBn.default)(value) ? value.toBn() : new _bn.default(value);\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/util/bn/toBn.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","bnToBn","_bn","_bigInt","_toBn","_hex","_toBn2","toString","isBN","toBn"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,MAAlB;;AAEA,IAAIC,GAAG,GAAGR,sBAAsB,CAACC,OAAO,CAAC,OAAD,CAAR,CAAhC;;AAEA,IAAIQ,OAAO,GAAGT,sBAAsB,CAACC,OAAO,CAAC,cAAD,CAAR,CAApC;;AAEA,IAAIS,KAAK,GAAGV,sBAAsB,CAACC,OAAO,CAAC,YAAD,CAAR,CAAlC;;AAEA,IAAIU,IAAI,GAAGX,sBAAsB,CAACC,OAAO,CAAC,WAAD,CAAR,CAAjC;;AAEA,IAAIW,MAAM,GAAGZ,sBAAsB,CAACC,OAAO,CAAC,aAAD,CAAR,CAAnC,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,MAAT,CAAgBF,KAAhB,EAAuB;AACrB,MAAI,CAACA,KAAL,EAAY;AACV,WAAO,IAAIG,GAAG,CAACF,OAAR,CAAgB,CAAhB,CAAP;AACD,GAFD,MAEO,IAAI,CAAC,GAAGK,IAAI,CAACL,OAAT,EAAkBD,KAAlB,CAAJ,EAA8B;AACnC,WAAO,CAAC,GAAGO,MAAM,CAACN,OAAX,EAAoBD,KAAK,CAACQ,QAAN,EAApB,CAAP;AACD,GAFM,MAEA,IAAI,CAAC,GAAGJ,OAAO,CAACH,OAAZ,EAAqBD,KAArB,CAAJ,EAAiC;AACtC,WAAO,IAAIG,GAAG,CAACF,OAAR,CAAgBD,KAAK,CAACQ,QAAN,EAAhB,CAAP;AACD;;AAED,SAAOL,GAAG,CAACF,OAAJ,CAAYQ,IAAZ,CAAiBT,KAAjB,IAA0BA,KAA1B,GAAkC,CAAC,GAAGK,KAAK,CAACJ,OAAV,EAAmBD,KAAnB,IAA4BA,KAAK,CAACU,IAAN,EAA5B,GAA2C,IAAIP,GAAG,CAACF,OAAR,CAAgBD,KAAhB,CAApF;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = bnToBn;\n\nvar _bn = _interopRequireDefault(require(\"bn.js\"));\n\nvar _bigInt = _interopRequireDefault(require(\"../is/bigInt\"));\n\nvar _toBn = _interopRequireDefault(require(\"../is/toBn\"));\n\nvar _hex = _interopRequireDefault(require(\"../is/hex\"));\n\nvar _toBn2 = _interopRequireDefault(require(\"../hex/toBn\"));\n\n// Copyright 2017-2020 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name bnToBn\n * @summary Creates a BN value from a BN, BigInt, string (base 10 or hex) or number input.\n * @description\n * `null` inputs returns a `0x0` result, BN values returns the value, numbers returns a BN representation.\n * @example\n * <BR>\n *\n * ```javascript\n * import BN from 'bn.js';\n * import { bnToBn } from '@polkadot/util';\n *\n * bnToBn(0x1234); // => BN(0x1234)\n * bnToBn(new BN(0x1234)); // => BN(0x1234)\n * ```\n */\nfunction bnToBn(value) {\n  if (!value) {\n    return new _bn.default(0);\n  } else if ((0, _hex.default)(value)) {\n    return (0, _toBn2.default)(value.toString());\n  } else if ((0, _bigInt.default)(value)) {\n    return new _bn.default(value.toString());\n  }\n\n  return _bn.default.isBN(value) ? value : (0, _toBn.default)(value) ? value.toBn() : new _bn.default(value);\n}"]},"metadata":{},"sourceType":"script"}