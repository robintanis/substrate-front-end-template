{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = hexFixLength;\n\nvar _addPrefix = _interopRequireDefault(require(\"./addPrefix\"));\n\nvar _stripPrefix = _interopRequireDefault(require(\"./stripPrefix\")); // Copyright 2017-2020 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name hexFixLength\n * @summary Shifts a hex string to a specific bitLength\n * @description\n * Returns a `0x` prefixed string with the specified number of bits contained in the return value. (If bitLength is -1, length checking is not done). Values with more bits are trimmed to the specified length. Input values with less bits are returned as-is by default. When `withPadding` is set, shorter values are padded with `0`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { hexFixLength } from '@polkadot/util';\n *\n * console.log('fixed', hexFixLength('0x12', 16)); // => 0x12\n * console.log('fixed', hexFixLength('0x12', 16, true)); // => 0x0012\n * console.log('fixed', hexFixLength('0x0012', 8)); // => 0x12\n * ```\n */\n\n\nfunction hexFixLength(value, bitLength = -1, withPadding = false) {\n  const strLength = Math.ceil(bitLength / 4);\n  const hexLength = strLength + 2;\n  return (0, _addPrefix.default)(bitLength === -1 || value.length === hexLength || !withPadding && value.length < hexLength ? (0, _stripPrefix.default)(value) : value.length > hexLength ? (0, _stripPrefix.default)(value).slice(-1 * strLength) : `${'0'.repeat(strLength)}${(0, _stripPrefix.default)(value)}`.slice(-1 * strLength));\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/util/hex/fixLength.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","hexFixLength","_addPrefix","_stripPrefix","bitLength","withPadding","strLength","Math","ceil","hexLength","length","slice","repeat"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,YAAlB;;AAEA,IAAIC,UAAU,GAAGR,sBAAsB,CAACC,OAAO,CAAC,aAAD,CAAR,CAAvC;;AAEA,IAAIQ,YAAY,GAAGT,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAAzC,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,YAAT,CAAsBF,KAAtB,EAA6BK,SAAS,GAAG,CAAC,CAA1C,EAA6CC,WAAW,GAAG,KAA3D,EAAkE;AAChE,QAAMC,SAAS,GAAGC,IAAI,CAACC,IAAL,CAAUJ,SAAS,GAAG,CAAtB,CAAlB;AACA,QAAMK,SAAS,GAAGH,SAAS,GAAG,CAA9B;AACA,SAAO,CAAC,GAAGJ,UAAU,CAACF,OAAf,EAAwBI,SAAS,KAAK,CAAC,CAAf,IAAoBL,KAAK,CAACW,MAAN,KAAiBD,SAArC,IAAkD,CAACJ,WAAD,IAAgBN,KAAK,CAACW,MAAN,GAAeD,SAAjF,GAA6F,CAAC,GAAGN,YAAY,CAACH,OAAjB,EAA0BD,KAA1B,CAA7F,GAAgIA,KAAK,CAACW,MAAN,GAAeD,SAAf,GAA2B,CAAC,GAAGN,YAAY,CAACH,OAAjB,EAA0BD,KAA1B,EAAiCY,KAAjC,CAAuC,CAAC,CAAD,GAAKL,SAA5C,CAA3B,GAAqF,GAAE,IAAIM,MAAJ,CAAWN,SAAX,CAAsB,GAAE,CAAC,GAAGH,YAAY,CAACH,OAAjB,EAA0BD,KAA1B,CAAiC,EAA5D,CAA8DY,KAA9D,CAAoE,CAAC,CAAD,GAAKL,SAAzE,CAA5O,CAAP;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = hexFixLength;\n\nvar _addPrefix = _interopRequireDefault(require(\"./addPrefix\"));\n\nvar _stripPrefix = _interopRequireDefault(require(\"./stripPrefix\"));\n\n// Copyright 2017-2020 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name hexFixLength\n * @summary Shifts a hex string to a specific bitLength\n * @description\n * Returns a `0x` prefixed string with the specified number of bits contained in the return value. (If bitLength is -1, length checking is not done). Values with more bits are trimmed to the specified length. Input values with less bits are returned as-is by default. When `withPadding` is set, shorter values are padded with `0`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { hexFixLength } from '@polkadot/util';\n *\n * console.log('fixed', hexFixLength('0x12', 16)); // => 0x12\n * console.log('fixed', hexFixLength('0x12', 16, true)); // => 0x0012\n * console.log('fixed', hexFixLength('0x0012', 8)); // => 0x12\n * ```\n */\nfunction hexFixLength(value, bitLength = -1, withPadding = false) {\n  const strLength = Math.ceil(bitLength / 4);\n  const hexLength = strLength + 2;\n  return (0, _addPrefix.default)(bitLength === -1 || value.length === hexLength || !withPadding && value.length < hexLength ? (0, _stripPrefix.default)(value) : value.length > hexLength ? (0, _stripPrefix.default)(value).slice(-1 * strLength) : `${'0'.repeat(strLength)}${(0, _stripPrefix.default)(value)}`.slice(-1 * strLength));\n}"]},"metadata":{},"sourceType":"script"}