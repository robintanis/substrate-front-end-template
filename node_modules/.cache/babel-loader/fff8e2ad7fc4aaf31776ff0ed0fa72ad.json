{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.MortalEra = exports.ImmortalEra = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Enum = _interopRequireDefault(require(\"../codec/Enum\"));\n\nvar _Tuple = _interopRequireDefault(require(\"../codec/Tuple\"));\n\nvar _Raw = _interopRequireDefault(require(\"../codec/Raw\"));\n\nvar _U = _interopRequireDefault(require(\"../primitive/U64\"));\n\nvar _constants = require(\"./constants\"); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nfunction getTrailingZeros(period) {\n  const binary = period.toString(2);\n  let index = 0;\n\n  while (binary[binary.length - 1 - index] === '0') {\n    index++;\n  }\n\n  return index;\n}\n/**\n * @name ImmortalEra\n * @description\n * The ImmortalEra for an extrinsic\n */\n\n\nclass ImmortalEra extends _Raw.default {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  constructor(registry, value) {\n    // For immortals, we always provide the known value (i.e. treated as a\n    // constant no matter how it is constructed - it is a fixed structure)\n    super(registry, _constants.IMMORTAL_ERA);\n  }\n\n}\n/**\n * @name MortalEra\n * @description\n * The MortalEra for an extrinsic, indicating period and phase\n */\n\n\nexports.ImmortalEra = ImmortalEra;\n\nclass MortalEra extends _Tuple.default {\n  constructor(registry, value) {\n    super(registry, {\n      period: _U.default,\n      phase: _U.default\n    }, MortalEra._decodeMortalEra(registry, value));\n  }\n  /** @internal */\n\n\n  static _decodeMortalEra(registry, value) {\n    if ((0, _util.isHex)(value)) {\n      return MortalEra._decodeMortalU8a(registry, (0, _util.hexToU8a)(value));\n    } else if (Array.isArray(value)) {\n      return MortalEra._decodeMortalU8a(registry, new Uint8Array(value));\n    } else if ((0, _util.isU8a)(value)) {\n      return MortalEra._decodeMortalU8a(registry, value);\n    } else if ((0, _util.isObject)(value)) {\n      return MortalEra._decodeMortalObject(registry, value);\n    } else if (!value) {\n      return [new _U.default(registry), new _U.default(registry)];\n    }\n\n    throw new Error('Invalid data passed to Mortal era');\n  }\n  /** @internal */\n\n\n  static _decodeMortalObject(registry, value) {\n    const {\n      current,\n      period\n    } = value;\n    let calPeriod = Math.pow(2, Math.ceil(Math.log2(period)));\n    calPeriod = Math.min(Math.max(calPeriod, 4), 1 << 16);\n    const phase = current % calPeriod;\n    const quantizeFactor = Math.max(calPeriod >> 12, 1);\n    const quantizedPhase = phase / quantizeFactor * quantizeFactor;\n    return [new _U.default(registry, calPeriod), new _U.default(registry, quantizedPhase)];\n  }\n  /** @internal */\n\n\n  static _decodeMortalU8a(registry, value) {\n    if (value.length === 0) {\n      return [new _U.default(registry), new _U.default(registry)];\n    }\n\n    const first = (0, _util.u8aToBn)(value.subarray(0, 1)).toNumber();\n    const second = (0, _util.u8aToBn)(value.subarray(1, 2)).toNumber();\n    const encoded = first + (second << 8);\n    const period = 2 << encoded % (1 << 4);\n    const quantizeFactor = Math.max(period >> 12, 1);\n    const phase = (encoded >> 4) * quantizeFactor;\n    (0, _util.assert)(period >= 4 && phase < period, 'Invalid data passed to Mortal era');\n    return [new _U.default(registry, period), new _U.default(registry, phase)];\n  }\n  /**\n   * @description Encoded length for mortals occupy 2 bytes, different from the actual Tuple since it is encoded. This is a shortcut fro `toU8a().length`\n   */\n\n\n  get encodedLength() {\n    return 2;\n  }\n  /**\n   * @description The period of this Mortal wraps as a [[U64]]\n   */\n\n\n  get period() {\n    return this[0];\n  }\n  /**\n   * @description The phase of this Mortal wraps as a [[U64]]\n   */\n\n\n  get phase() {\n    return this[1];\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return {\n      period: (0, _util.formatNumber)(this.period),\n      phase: (0, _util.formatNumber)(this.phase)\n    };\n  }\n  /**\n   * @description Returns a JSON representation of the actual value\n   */\n\n\n  toJSON() {\n    return this.toHex();\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the parity-codec specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   * Period and phase are encoded:\n   *   - The period of validity from the block hash found in the signing material.\n   *   - The phase in the period that this transaction's lifetime begins (and, importantly,\n   *     implies which block hash is included in the signature material). If the `period` is\n   *     greater than 1 << 12, then it will be a factor of the times greater than 1<<12 that\n   *     `period` is.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toU8a(isBare) {\n    const period = this.period.toNumber();\n    const phase = this.phase.toNumber();\n    const quantizeFactor = Math.max(period >> 12, 1);\n    const trailingZeros = getTrailingZeros(period);\n    const encoded = Math.min(15, Math.max(1, trailingZeros - 1)) + (phase / quantizeFactor << 4);\n    const first = encoded >> 8;\n    const second = encoded & 0xff;\n    return new Uint8Array([second, first]);\n  }\n  /**\n   * @description Get the block number of the start of the era whose properties this object describes that `current` belongs to.\n   */\n\n\n  birth(current) {\n    // FIXME No toNumber() here\n    return Math.floor((Math.max((0, _util.bnToBn)(current).toNumber(), this.phase.toNumber()) - this.phase.toNumber()) / this.period.toNumber()) * this.period.toNumber() + this.phase.toNumber();\n  }\n  /**\n   * @description Get the block number of the first block at which the era has ended.\n   */\n\n\n  death(current) {\n    // FIXME No toNumber() here\n    return this.birth(current) + this.period.toNumber();\n  }\n\n}\n/**\n * @name GenericExtrinsicEra\n * @description\n * The era for an extrinsic, indicating either a mortal or immortal extrinsic\n */\n\n\nexports.MortalEra = MortalEra;\n\nclass ExtrinsicEra extends _Enum.default {\n  constructor(registry, value) {\n    super(registry, {\n      ImmortalEra,\n      MortalEra\n    }, ExtrinsicEra._decodeExtrinsicEra(value));\n  }\n  /** @internal */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n\n\n  static _decodeExtrinsicEra(value = new Uint8Array()) {\n    if (value instanceof ExtrinsicEra) {\n      return ExtrinsicEra._decodeExtrinsicEra(value.toU8a());\n    } else if ((0, _util.isHex)(value)) {\n      return ExtrinsicEra._decodeExtrinsicEra((0, _util.hexToU8a)(value));\n    } else if (!value || (0, _util.isU8a)(value)) {\n      return !(value === null || value === void 0 ? void 0 : value.length) || value[0] === 0 ? new Uint8Array([0]) : new Uint8Array([1, value[0], value[1]]);\n    } else if ((0, _util.isObject)(value)) {\n      // this is to de-serialize from JSON\n      return value.MortalEra ? {\n        MortalEra: value.MortalEra\n      } : value.ImmortalEra ? {\n        ImmortalEra: value.ImmortalEra\n      } : {\n        MortalEra: value\n      };\n    }\n\n    throw new Error('Invalid data passed to Era');\n  }\n  /**\n   * @description Override the encoded length method\n   */\n\n\n  get encodedLength() {\n    return this.isImmortalEra ? this.asImmortalEra.encodedLength : this.asMortalEra.encodedLength;\n  }\n  /**\n   * @description Returns the item as a [[ImmortalEra]]\n   */\n\n\n  get asImmortalEra() {\n    (0, _util.assert)(this.isImmortalEra, `Cannot convert '${this.type}' via asImmortalEra`);\n    return this.value;\n  }\n  /**\n   * @description Returns the item as a [[MortalEra]]\n   */\n\n\n  get asMortalEra() {\n    (0, _util.assert)(this.isMortalEra, `Cannot convert '${this.type}' via asMortalEra`);\n    return this.value;\n  }\n  /**\n   * @description `true` if Immortal\n   */\n\n\n  get isImmortalEra() {\n    return this.index === 0;\n  }\n  /**\n   * @description `true` if Mortal\n   */\n\n\n  get isMortalEra() {\n    return this.index > 0;\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the parity-codec specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    return this.isMortalEra ? this.asMortalEra.toU8a(isBare) : this.asImmortalEra.toU8a(isBare);\n  }\n\n}\n\nexports.default = ExtrinsicEra;","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/types/extrinsic/ExtrinsicEra.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","MortalEra","ImmortalEra","_util","_Enum","_Tuple","_Raw","_U","_constants","getTrailingZeros","period","binary","toString","index","length","constructor","registry","IMMORTAL_ERA","phase","_decodeMortalEra","isHex","_decodeMortalU8a","hexToU8a","Array","isArray","Uint8Array","isU8a","isObject","_decodeMortalObject","Error","current","calPeriod","Math","pow","ceil","log2","min","max","quantizeFactor","quantizedPhase","first","u8aToBn","subarray","toNumber","second","encoded","assert","encodedLength","toHuman","formatNumber","toJSON","toHex","toU8a","isBare","trailingZeros","birth","floor","bnToBn","death","ExtrinsicEra","_decodeExtrinsicEra","isImmortalEra","asImmortalEra","asMortalEra","type","isMortalEra"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.MortalEra = exports.ImmortalEra = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Enum = _interopRequireDefault(require(\"../codec/Enum\"));\n\nvar _Tuple = _interopRequireDefault(require(\"../codec/Tuple\"));\n\nvar _Raw = _interopRequireDefault(require(\"../codec/Raw\"));\n\nvar _U = _interopRequireDefault(require(\"../primitive/U64\"));\n\nvar _constants = require(\"./constants\");\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction getTrailingZeros(period) {\n  const binary = period.toString(2);\n  let index = 0;\n\n  while (binary[binary.length - 1 - index] === '0') {\n    index++;\n  }\n\n  return index;\n}\n/**\n * @name ImmortalEra\n * @description\n * The ImmortalEra for an extrinsic\n */\n\n\nclass ImmortalEra extends _Raw.default {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  constructor(registry, value) {\n    // For immortals, we always provide the known value (i.e. treated as a\n    // constant no matter how it is constructed - it is a fixed structure)\n    super(registry, _constants.IMMORTAL_ERA);\n  }\n\n}\n/**\n * @name MortalEra\n * @description\n * The MortalEra for an extrinsic, indicating period and phase\n */\n\n\nexports.ImmortalEra = ImmortalEra;\n\nclass MortalEra extends _Tuple.default {\n  constructor(registry, value) {\n    super(registry, {\n      period: _U.default,\n      phase: _U.default\n    }, MortalEra._decodeMortalEra(registry, value));\n  }\n  /** @internal */\n\n\n  static _decodeMortalEra(registry, value) {\n    if ((0, _util.isHex)(value)) {\n      return MortalEra._decodeMortalU8a(registry, (0, _util.hexToU8a)(value));\n    } else if (Array.isArray(value)) {\n      return MortalEra._decodeMortalU8a(registry, new Uint8Array(value));\n    } else if ((0, _util.isU8a)(value)) {\n      return MortalEra._decodeMortalU8a(registry, value);\n    } else if ((0, _util.isObject)(value)) {\n      return MortalEra._decodeMortalObject(registry, value);\n    } else if (!value) {\n      return [new _U.default(registry), new _U.default(registry)];\n    }\n\n    throw new Error('Invalid data passed to Mortal era');\n  }\n  /** @internal */\n\n\n  static _decodeMortalObject(registry, value) {\n    const {\n      current,\n      period\n    } = value;\n    let calPeriod = Math.pow(2, Math.ceil(Math.log2(period)));\n    calPeriod = Math.min(Math.max(calPeriod, 4), 1 << 16);\n    const phase = current % calPeriod;\n    const quantizeFactor = Math.max(calPeriod >> 12, 1);\n    const quantizedPhase = phase / quantizeFactor * quantizeFactor;\n    return [new _U.default(registry, calPeriod), new _U.default(registry, quantizedPhase)];\n  }\n  /** @internal */\n\n\n  static _decodeMortalU8a(registry, value) {\n    if (value.length === 0) {\n      return [new _U.default(registry), new _U.default(registry)];\n    }\n\n    const first = (0, _util.u8aToBn)(value.subarray(0, 1)).toNumber();\n    const second = (0, _util.u8aToBn)(value.subarray(1, 2)).toNumber();\n    const encoded = first + (second << 8);\n    const period = 2 << encoded % (1 << 4);\n    const quantizeFactor = Math.max(period >> 12, 1);\n    const phase = (encoded >> 4) * quantizeFactor;\n    (0, _util.assert)(period >= 4 && phase < period, 'Invalid data passed to Mortal era');\n    return [new _U.default(registry, period), new _U.default(registry, phase)];\n  }\n  /**\n   * @description Encoded length for mortals occupy 2 bytes, different from the actual Tuple since it is encoded. This is a shortcut fro `toU8a().length`\n   */\n\n\n  get encodedLength() {\n    return 2;\n  }\n  /**\n   * @description The period of this Mortal wraps as a [[U64]]\n   */\n\n\n  get period() {\n    return this[0];\n  }\n  /**\n   * @description The phase of this Mortal wraps as a [[U64]]\n   */\n\n\n  get phase() {\n    return this[1];\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return {\n      period: (0, _util.formatNumber)(this.period),\n      phase: (0, _util.formatNumber)(this.phase)\n    };\n  }\n  /**\n   * @description Returns a JSON representation of the actual value\n   */\n\n\n  toJSON() {\n    return this.toHex();\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the parity-codec specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   * Period and phase are encoded:\n   *   - The period of validity from the block hash found in the signing material.\n   *   - The phase in the period that this transaction's lifetime begins (and, importantly,\n   *     implies which block hash is included in the signature material). If the `period` is\n   *     greater than 1 << 12, then it will be a factor of the times greater than 1<<12 that\n   *     `period` is.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toU8a(isBare) {\n    const period = this.period.toNumber();\n    const phase = this.phase.toNumber();\n    const quantizeFactor = Math.max(period >> 12, 1);\n    const trailingZeros = getTrailingZeros(period);\n    const encoded = Math.min(15, Math.max(1, trailingZeros - 1)) + (phase / quantizeFactor << 4);\n    const first = encoded >> 8;\n    const second = encoded & 0xff;\n    return new Uint8Array([second, first]);\n  }\n  /**\n   * @description Get the block number of the start of the era whose properties this object describes that `current` belongs to.\n   */\n\n\n  birth(current) {\n    // FIXME No toNumber() here\n    return Math.floor((Math.max((0, _util.bnToBn)(current).toNumber(), this.phase.toNumber()) - this.phase.toNumber()) / this.period.toNumber()) * this.period.toNumber() + this.phase.toNumber();\n  }\n  /**\n   * @description Get the block number of the first block at which the era has ended.\n   */\n\n\n  death(current) {\n    // FIXME No toNumber() here\n    return this.birth(current) + this.period.toNumber();\n  }\n\n}\n/**\n * @name GenericExtrinsicEra\n * @description\n * The era for an extrinsic, indicating either a mortal or immortal extrinsic\n */\n\n\nexports.MortalEra = MortalEra;\n\nclass ExtrinsicEra extends _Enum.default {\n  constructor(registry, value) {\n    super(registry, {\n      ImmortalEra,\n      MortalEra\n    }, ExtrinsicEra._decodeExtrinsicEra(value));\n  }\n  /** @internal */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n\n\n  static _decodeExtrinsicEra(value = new Uint8Array()) {\n    if (value instanceof ExtrinsicEra) {\n      return ExtrinsicEra._decodeExtrinsicEra(value.toU8a());\n    } else if ((0, _util.isHex)(value)) {\n      return ExtrinsicEra._decodeExtrinsicEra((0, _util.hexToU8a)(value));\n    } else if (!value || (0, _util.isU8a)(value)) {\n      return !(value === null || value === void 0 ? void 0 : value.length) || value[0] === 0 ? new Uint8Array([0]) : new Uint8Array([1, value[0], value[1]]);\n    } else if ((0, _util.isObject)(value)) {\n      // this is to de-serialize from JSON\n      return value.MortalEra ? {\n        MortalEra: value.MortalEra\n      } : value.ImmortalEra ? {\n        ImmortalEra: value.ImmortalEra\n      } : {\n        MortalEra: value\n      };\n    }\n\n    throw new Error('Invalid data passed to Era');\n  }\n  /**\n   * @description Override the encoded length method\n   */\n\n\n  get encodedLength() {\n    return this.isImmortalEra ? this.asImmortalEra.encodedLength : this.asMortalEra.encodedLength;\n  }\n  /**\n   * @description Returns the item as a [[ImmortalEra]]\n   */\n\n\n  get asImmortalEra() {\n    (0, _util.assert)(this.isImmortalEra, `Cannot convert '${this.type}' via asImmortalEra`);\n    return this.value;\n  }\n  /**\n   * @description Returns the item as a [[MortalEra]]\n   */\n\n\n  get asMortalEra() {\n    (0, _util.assert)(this.isMortalEra, `Cannot convert '${this.type}' via asMortalEra`);\n    return this.value;\n  }\n  /**\n   * @description `true` if Immortal\n   */\n\n\n  get isImmortalEra() {\n    return this.index === 0;\n  }\n  /**\n   * @description `true` if Mortal\n   */\n\n\n  get isMortalEra() {\n    return this.index > 0;\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the parity-codec specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    return this.isMortalEra ? this.asMortalEra.toU8a(isBare) : this.asImmortalEra.toU8a(isBare);\n  }\n\n}\n\nexports.default = ExtrinsicEra;"]},"metadata":{},"sourceType":"script"}