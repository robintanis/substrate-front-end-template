{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.votesOf = votesOf;\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"../util\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nfunction votesOf(instanceId, api) {\n  return (0, _util.memo)(instanceId, accountId => api.derive.council.votes().pipe((0, _operators.map)(votes => (votes.find(([from]) => from.eq(accountId)) || [null, {\n    stake: api.registry.createType('Balance'),\n    votes: []\n  }])[1])));\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/api-derive/council/votesOf.js"],"names":["Object","defineProperty","exports","value","votesOf","_operators","require","_util","instanceId","api","memo","accountId","derive","council","votes","pipe","map","find","from","eq","stake","registry","createType"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBA,OAAlB;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,gBAAD,CAAxB;;AAEA,IAAIC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAAnB,C,CAEA;AACA;;;AACA,SAASF,OAAT,CAAiBI,UAAjB,EAA6BC,GAA7B,EAAkC;AAChC,SAAO,CAAC,GAAGF,KAAK,CAACG,IAAV,EAAgBF,UAAhB,EAA4BG,SAAS,IAAIF,GAAG,CAACG,MAAJ,CAAWC,OAAX,CAAmBC,KAAnB,GAA2BC,IAA3B,CAAgC,CAAC,GAAGV,UAAU,CAACW,GAAf,EAAoBF,KAAK,IAAI,CAACA,KAAK,CAACG,IAAN,CAAW,CAAC,CAACC,IAAD,CAAD,KAAYA,IAAI,CAACC,EAAL,CAAQR,SAAR,CAAvB,KAA8C,CAAC,IAAD,EAAO;AACjKS,IAAAA,KAAK,EAAEX,GAAG,CAACY,QAAJ,CAAaC,UAAb,CAAwB,SAAxB,CAD0J;AAEjKR,IAAAA,KAAK,EAAE;AAF0J,GAAP,CAA/C,EAGzG,CAHyG,CAA7B,CAAhC,CAAzC,CAAP;AAID","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.votesOf = votesOf;\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"../util\");\n\n// Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction votesOf(instanceId, api) {\n  return (0, _util.memo)(instanceId, accountId => api.derive.council.votes().pipe((0, _operators.map)(votes => (votes.find(([from]) => from.eq(accountId)) || [null, {\n    stake: api.registry.createType('Balance'),\n    votes: []\n  }])[1])));\n}"]},"metadata":{},"sourceType":"script"}