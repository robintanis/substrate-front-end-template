{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.idAndIndex = idAndIndex;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utilCrypto = require(\"@polkadot/util-crypto\");\n\nvar _util2 = require(\"../util\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nfunction retrieve(api, address) {\n  try {\n    // yes, this can fail, don't care too much, catch will catch it\n    const decoded = (0, _util.isU8a)(address) ? address : (0, _utilCrypto.decodeAddress)((address || '').toString());\n\n    if (decoded.length === 32) {\n      const accountId = api.registry.createType('AccountId', decoded);\n      return api.derive.accounts.idToIndex(accountId).pipe((0, _operators.map)(accountIndex => [accountId, accountIndex]));\n    }\n\n    const accountIndex = api.registry.createType('AccountIndex', decoded);\n    return api.derive.accounts.indexToId(accountIndex.toString()).pipe((0, _operators.map)(accountId => [accountId, accountIndex]));\n  } catch (error) {\n    return (0, _rxjs.of)([undefined, undefined]);\n  }\n}\n/**\n * @name idAndIndex\n * @param {(Address | AccountId | AccountIndex | string | null)} address - An accounts address in various formats.\n * @description  An array containing the [[AccountId]] and [[AccountIndex]] as optional values.\n * @example\n * <BR>\n *\n * ```javascript\n * api.derive.accounts.idAndIndex('F7Hs', ([id, ix]) => {\n *   console.log(`AccountId #${id} with corresponding AccountIndex ${ix}`);\n * });\n * ```\n */\n\n\nfunction idAndIndex(instanceId, api) {\n  return (0, _util2.memo)(instanceId, address => retrieve(api, address));\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/api-derive/accounts/idAndIndex.js"],"names":["Object","defineProperty","exports","value","idAndIndex","_rxjs","require","_operators","_util","_utilCrypto","_util2","retrieve","api","address","decoded","isU8a","decodeAddress","toString","length","accountId","registry","createType","derive","accounts","idToIndex","pipe","map","accountIndex","indexToId","error","of","undefined","instanceId","memo"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,UAAR,GAAqBA,UAArB;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AAEA,IAAIC,UAAU,GAAGD,OAAO,CAAC,gBAAD,CAAxB;;AAEA,IAAIE,KAAK,GAAGF,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIG,WAAW,GAAGH,OAAO,CAAC,uBAAD,CAAzB;;AAEA,IAAII,MAAM,GAAGJ,OAAO,CAAC,SAAD,CAApB,C,CAEA;AACA;;;AACA,SAASK,QAAT,CAAkBC,GAAlB,EAAuBC,OAAvB,EAAgC;AAC9B,MAAI;AACF;AACA,UAAMC,OAAO,GAAG,CAAC,GAAGN,KAAK,CAACO,KAAV,EAAiBF,OAAjB,IAA4BA,OAA5B,GAAsC,CAAC,GAAGJ,WAAW,CAACO,aAAhB,EAA+B,CAACH,OAAO,IAAI,EAAZ,EAAgBI,QAAhB,EAA/B,CAAtD;;AAEA,QAAIH,OAAO,CAACI,MAAR,KAAmB,EAAvB,EAA2B;AACzB,YAAMC,SAAS,GAAGP,GAAG,CAACQ,QAAJ,CAAaC,UAAb,CAAwB,WAAxB,EAAqCP,OAArC,CAAlB;AACA,aAAOF,GAAG,CAACU,MAAJ,CAAWC,QAAX,CAAoBC,SAApB,CAA8BL,SAA9B,EAAyCM,IAAzC,CAA8C,CAAC,GAAGlB,UAAU,CAACmB,GAAf,EAAoBC,YAAY,IAAI,CAACR,SAAD,EAAYQ,YAAZ,CAApC,CAA9C,CAAP;AACD;;AAED,UAAMA,YAAY,GAAGf,GAAG,CAACQ,QAAJ,CAAaC,UAAb,CAAwB,cAAxB,EAAwCP,OAAxC,CAArB;AACA,WAAOF,GAAG,CAACU,MAAJ,CAAWC,QAAX,CAAoBK,SAApB,CAA8BD,YAAY,CAACV,QAAb,EAA9B,EAAuDQ,IAAvD,CAA4D,CAAC,GAAGlB,UAAU,CAACmB,GAAf,EAAoBP,SAAS,IAAI,CAACA,SAAD,EAAYQ,YAAZ,CAAjC,CAA5D,CAAP;AACD,GAXD,CAWE,OAAOE,KAAP,EAAc;AACd,WAAO,CAAC,GAAGxB,KAAK,CAACyB,EAAV,EAAc,CAACC,SAAD,EAAYA,SAAZ,CAAd,CAAP;AACD;AACF;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAAS3B,UAAT,CAAoB4B,UAApB,EAAgCpB,GAAhC,EAAqC;AACnC,SAAO,CAAC,GAAGF,MAAM,CAACuB,IAAX,EAAiBD,UAAjB,EAA6BnB,OAAO,IAAIF,QAAQ,CAACC,GAAD,EAAMC,OAAN,CAAhD,CAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.idAndIndex = idAndIndex;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utilCrypto = require(\"@polkadot/util-crypto\");\n\nvar _util2 = require(\"../util\");\n\n// Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction retrieve(api, address) {\n  try {\n    // yes, this can fail, don't care too much, catch will catch it\n    const decoded = (0, _util.isU8a)(address) ? address : (0, _utilCrypto.decodeAddress)((address || '').toString());\n\n    if (decoded.length === 32) {\n      const accountId = api.registry.createType('AccountId', decoded);\n      return api.derive.accounts.idToIndex(accountId).pipe((0, _operators.map)(accountIndex => [accountId, accountIndex]));\n    }\n\n    const accountIndex = api.registry.createType('AccountIndex', decoded);\n    return api.derive.accounts.indexToId(accountIndex.toString()).pipe((0, _operators.map)(accountId => [accountId, accountIndex]));\n  } catch (error) {\n    return (0, _rxjs.of)([undefined, undefined]);\n  }\n}\n/**\n * @name idAndIndex\n * @param {(Address | AccountId | AccountIndex | string | null)} address - An accounts address in various formats.\n * @description  An array containing the [[AccountId]] and [[AccountIndex]] as optional values.\n * @example\n * <BR>\n *\n * ```javascript\n * api.derive.accounts.idAndIndex('F7Hs', ([id, ix]) => {\n *   console.log(`AccountId #${id} with corresponding AccountIndex ${ix}`);\n * });\n * ```\n */\n\n\nfunction idAndIndex(instanceId, api) {\n  return (0, _util2.memo)(instanceId, address => retrieve(api, address));\n}"]},"metadata":{},"sourceType":"script"}