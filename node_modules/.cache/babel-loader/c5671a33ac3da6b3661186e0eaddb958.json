{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.indexes = indexes;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _AccountIndex = require(\"@polkadot/types/generic/AccountIndex\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _util2 = require(\"../util\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nconst enumsetSize = _AccountIndex.ENUMSET_SIZE.toNumber();\n\nlet indicesCache = null;\n\nfunction queryEnumSet(api) {\n  return api.query.indices.nextEnumSet().pipe( // use the nextEnumSet (which is a counter of the number of sets) to construct\n  // a range of values to query [0, 1, 2, ...]. Retrieve the full enum set for the\n  // specific index - each query can return up to ENUMSET_SIZE (64) records, each\n  // containing an AccountId\n  (0, _operators.switchMap)(next => api.query.indices.enumSet.multi([...Array(next.toNumber() + 1).keys()])), (0, _operators.map)(all => all.reduce((indexes, list, outerIndex) => {\n    (list || []).forEach((accountId, innerIndex) => {\n      // re-create the index based on position 0 is [0][0] and likewise\n      // 64 (0..63 in first) is [1][0] (the first index value in set 2)\n      const index = outerIndex * enumsetSize + innerIndex;\n      indexes[accountId.toString()] = api.registry.createType('AccountIndex', index);\n    });\n    return indexes;\n  }, {})));\n}\n\nfunction queryAccounts(api) {\n  return api.query.indices.accounts.entries().pipe((0, _operators.map)(entries => entries.reduce((indexes, [key, idOpt]) => {\n    if (idOpt.isSome) {\n      indexes[idOpt.unwrap()[0].toString()] = key.args[0];\n    }\n\n    return indexes;\n  }, {})));\n}\n/**\n * @name indexes\n * @returns Returns all the indexes on the system.\n * @description This is an unwieldly query since it loops through\n * all of the enumsets and returns all of the values found. This could be up to 32k depending\n * on the number of active accounts in the system\n * @example\n * <BR>\n *\n * ```javascript\n * api.derive.accounts.indexes((indexes) => {\n *   console.log('All existing AccountIndexes', indexes);\n * });\n * ```\n */\n\n\nfunction indexes(instanceId, api) {\n  return (0, _util2.memo)(instanceId, () => indicesCache ? (0, _rxjs.of)(indicesCache) : (api.query.indices ? (0, _util.isFunction)(api.query.indices.accounts) ? queryAccounts(api).pipe((0, _operators.startWith)({})) : queryEnumSet(api).pipe((0, _operators.startWith)({})) : (0, _rxjs.of)({})).pipe((0, _operators.map)(indices => {\n    indicesCache = indices;\n    return indices;\n  })));\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/api-derive/accounts/indexes.js"],"names":["Object","defineProperty","exports","value","indexes","_rxjs","require","_operators","_AccountIndex","_util","_util2","enumsetSize","ENUMSET_SIZE","toNumber","indicesCache","queryEnumSet","api","query","indices","nextEnumSet","pipe","switchMap","next","enumSet","multi","Array","keys","map","all","reduce","list","outerIndex","forEach","accountId","innerIndex","index","toString","registry","createType","queryAccounts","accounts","entries","key","idOpt","isSome","unwrap","args","instanceId","memo","of","isFunction","startWith"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.indexes = indexes;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _AccountIndex = require(\"@polkadot/types/generic/AccountIndex\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _util2 = require(\"../util\");\n\n// Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst enumsetSize = _AccountIndex.ENUMSET_SIZE.toNumber();\n\nlet indicesCache = null;\n\nfunction queryEnumSet(api) {\n  return api.query.indices.nextEnumSet().pipe( // use the nextEnumSet (which is a counter of the number of sets) to construct\n  // a range of values to query [0, 1, 2, ...]. Retrieve the full enum set for the\n  // specific index - each query can return up to ENUMSET_SIZE (64) records, each\n  // containing an AccountId\n  (0, _operators.switchMap)(next => api.query.indices.enumSet.multi([...Array(next.toNumber() + 1).keys()])), (0, _operators.map)(all => all.reduce((indexes, list, outerIndex) => {\n    (list || []).forEach((accountId, innerIndex) => {\n      // re-create the index based on position 0 is [0][0] and likewise\n      // 64 (0..63 in first) is [1][0] (the first index value in set 2)\n      const index = outerIndex * enumsetSize + innerIndex;\n      indexes[accountId.toString()] = api.registry.createType('AccountIndex', index);\n    });\n    return indexes;\n  }, {})));\n}\n\nfunction queryAccounts(api) {\n  return api.query.indices.accounts.entries().pipe((0, _operators.map)(entries => entries.reduce((indexes, [key, idOpt]) => {\n    if (idOpt.isSome) {\n      indexes[idOpt.unwrap()[0].toString()] = key.args[0];\n    }\n\n    return indexes;\n  }, {})));\n}\n/**\n * @name indexes\n * @returns Returns all the indexes on the system.\n * @description This is an unwieldly query since it loops through\n * all of the enumsets and returns all of the values found. This could be up to 32k depending\n * on the number of active accounts in the system\n * @example\n * <BR>\n *\n * ```javascript\n * api.derive.accounts.indexes((indexes) => {\n *   console.log('All existing AccountIndexes', indexes);\n * });\n * ```\n */\n\n\nfunction indexes(instanceId, api) {\n  return (0, _util2.memo)(instanceId, () => indicesCache ? (0, _rxjs.of)(indicesCache) : (api.query.indices ? (0, _util.isFunction)(api.query.indices.accounts) ? queryAccounts(api).pipe((0, _operators.startWith)({})) : queryEnumSet(api).pipe((0, _operators.startWith)({})) : (0, _rxjs.of)({})).pipe((0, _operators.map)(indices => {\n    indicesCache = indices;\n    return indices;\n  })));\n}"]},"metadata":{},"sourceType":"script"}