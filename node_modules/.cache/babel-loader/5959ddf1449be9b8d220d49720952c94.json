{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _defaults = require(\"@polkadot/util/compact/defaults\");\n\nvar _typeToConstructor = _interopRequireDefault(require(\"./utils/typeToConstructor\"));\n\nvar _Raw = _interopRequireDefault(require(\"./Raw\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nvar _Type = (0, _classPrivateFieldLooseKey2.default)(\"Type\");\n\nvar _raw = (0, _classPrivateFieldLooseKey2.default)(\"raw\");\n/**\n * @name Compact\n * @description\n * A compact length-encoding codec wrapper. It performs the same function as Length, however\n * differs in that it uses a variable number of bytes to do the actual encoding. This is mostly\n * used by other types to add length-prefixed encoding, or in the case of wrapped types, taking\n * a number and making the compact representation thereof\n */\n\n\nclass Compact {\n  constructor(registry, Type, value = 0) {\n    this.registry = void 0;\n    Object.defineProperty(this, _Type, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _raw, {\n      writable: true,\n      value: void 0\n    });\n    this.registry = registry;\n    (0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type] = (0, _typeToConstructor.default)(registry, Type);\n    (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw] = Compact.decodeCompact(registry, (0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type], value);\n  }\n\n  static with(Type) {\n    return class extends Compact {\n      constructor(registry, value) {\n        super(registry, Type, value);\n      }\n\n    };\n  }\n  /**\n   * Prepend a Uint8Array with its compact length.\n   *\n   * @param u8a - The Uint8Array to be prefixed\n   */\n\n\n  static stripLengthPrefix(u8a, bitLength = _defaults.DEFAULT_BITLENGTH) {\n    const [, value] = (0, _util.compactStripLength)(u8a, bitLength);\n    return value;\n  }\n  /** @internal */\n\n\n  static decodeCompact(registry, Type, value) {\n    if (value instanceof Compact) {\n      return new Type(registry, (0, _classPrivateFieldLooseBase2.default)(value, _raw)[_raw]);\n    } else if ((0, _util.isString)(value) || (0, _util.isNumber)(value) || (0, _util.isBn)(value) || (0, _util.isBigInt)(value)) {\n      return new Type(registry, value);\n    }\n\n    const [, _value] = Compact.decodeU8a(value, new Type(registry, 0).bitLength());\n    return new Type(registry, _value);\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return new _Raw.default(this.registry, this.registry.hash(this.toU8a()));\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].isEmpty;\n  }\n  /**\n   * @description Returns the number of bits in the value\n   */\n\n\n  bitLength() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].bitLength();\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].eq(other instanceof Compact ? (0, _classPrivateFieldLooseBase2.default)(other, _raw)[_raw] : other);\n  }\n  /**\n   * @description Returns a BigInt representation of the number\n   */\n\n\n  toBigInt() {\n    return BigInt(this.toString());\n  }\n  /**\n   * @description Returns the BN representation of the number\n   */\n\n\n  toBn() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toBn();\n  }\n  /**\n   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n   */\n\n\n  toHex(isLe) {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toHex(isLe);\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExtended) {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toHuman(isExtended);\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toJSON();\n  }\n  /**\n   * @description Returns the number representation for the value\n   */\n\n\n  toNumber() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toNumber();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return `Compact<${this.registry.getClassName((0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type]) || (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toRawType()}>`;\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toString();\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toU8a(isBare) {\n    return Compact.encodeU8a((0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toBn());\n  }\n  /**\n   * @description Returns the embedded [[UInt]] or [[Moment]] value\n   */\n\n\n  unwrap() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw];\n  }\n\n}\n\nexports.default = Compact;\nCompact.addLengthPrefix = _util.compactAddLength;\nCompact.decodeU8a = _util.compactFromU8a;\nCompact.encodeU8a = _util.compactToU8a;","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/types/codec/Compact.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_classPrivateFieldLooseBase2","_classPrivateFieldLooseKey2","_util","_defaults","_typeToConstructor","_Raw","_Type","_raw","Compact","constructor","registry","Type","writable","decodeCompact","with","stripLengthPrefix","u8a","bitLength","DEFAULT_BITLENGTH","compactStripLength","isString","isNumber","isBn","isBigInt","_value","decodeU8a","encodedLength","toU8a","length","hash","isEmpty","eq","other","toBigInt","BigInt","toString","toBn","toHex","isLe","toHuman","isExtended","toJSON","toNumber","toRawType","getClassName","isBare","encodeU8a","unwrap","addLengthPrefix","compactAddLength","compactFromU8a","compactToU8a"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _defaults = require(\"@polkadot/util/compact/defaults\");\n\nvar _typeToConstructor = _interopRequireDefault(require(\"./utils/typeToConstructor\"));\n\nvar _Raw = _interopRequireDefault(require(\"./Raw\"));\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nvar _Type = (0, _classPrivateFieldLooseKey2.default)(\"Type\");\n\nvar _raw = (0, _classPrivateFieldLooseKey2.default)(\"raw\");\n\n/**\n * @name Compact\n * @description\n * A compact length-encoding codec wrapper. It performs the same function as Length, however\n * differs in that it uses a variable number of bytes to do the actual encoding. This is mostly\n * used by other types to add length-prefixed encoding, or in the case of wrapped types, taking\n * a number and making the compact representation thereof\n */\nclass Compact {\n  constructor(registry, Type, value = 0) {\n    this.registry = void 0;\n    Object.defineProperty(this, _Type, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _raw, {\n      writable: true,\n      value: void 0\n    });\n    this.registry = registry;\n    (0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type] = (0, _typeToConstructor.default)(registry, Type);\n    (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw] = Compact.decodeCompact(registry, (0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type], value);\n  }\n\n  static with(Type) {\n    return class extends Compact {\n      constructor(registry, value) {\n        super(registry, Type, value);\n      }\n\n    };\n  }\n  /**\n   * Prepend a Uint8Array with its compact length.\n   *\n   * @param u8a - The Uint8Array to be prefixed\n   */\n\n\n  static stripLengthPrefix(u8a, bitLength = _defaults.DEFAULT_BITLENGTH) {\n    const [, value] = (0, _util.compactStripLength)(u8a, bitLength);\n    return value;\n  }\n  /** @internal */\n\n\n  static decodeCompact(registry, Type, value) {\n    if (value instanceof Compact) {\n      return new Type(registry, (0, _classPrivateFieldLooseBase2.default)(value, _raw)[_raw]);\n    } else if ((0, _util.isString)(value) || (0, _util.isNumber)(value) || (0, _util.isBn)(value) || (0, _util.isBigInt)(value)) {\n      return new Type(registry, value);\n    }\n\n    const [, _value] = Compact.decodeU8a(value, new Type(registry, 0).bitLength());\n    return new Type(registry, _value);\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return new _Raw.default(this.registry, this.registry.hash(this.toU8a()));\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].isEmpty;\n  }\n  /**\n   * @description Returns the number of bits in the value\n   */\n\n\n  bitLength() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].bitLength();\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].eq(other instanceof Compact ? (0, _classPrivateFieldLooseBase2.default)(other, _raw)[_raw] : other);\n  }\n  /**\n   * @description Returns a BigInt representation of the number\n   */\n\n\n  toBigInt() {\n    return BigInt(this.toString());\n  }\n  /**\n   * @description Returns the BN representation of the number\n   */\n\n\n  toBn() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toBn();\n  }\n  /**\n   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n   */\n\n\n  toHex(isLe) {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toHex(isLe);\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExtended) {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toHuman(isExtended);\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toJSON();\n  }\n  /**\n   * @description Returns the number representation for the value\n   */\n\n\n  toNumber() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toNumber();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return `Compact<${this.registry.getClassName((0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type]) || (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toRawType()}>`;\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toString();\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toU8a(isBare) {\n    return Compact.encodeU8a((0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toBn());\n  }\n  /**\n   * @description Returns the embedded [[UInt]] or [[Moment]] value\n   */\n\n\n  unwrap() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw];\n  }\n\n}\n\nexports.default = Compact;\nCompact.addLengthPrefix = _util.compactAddLength;\nCompact.decodeU8a = _util.compactFromU8a;\nCompact.encodeU8a = _util.compactToU8a;"]},"metadata":{},"sourceType":"script"}