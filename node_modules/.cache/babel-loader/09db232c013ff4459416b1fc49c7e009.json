{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decorateMethod = decorateMethod;\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _base = _interopRequireDefault(require(\"../base\"));\n\nvar _Combinator = _interopRequireDefault(require(\"./Combinator\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // extract the arguments and callback params from a value array possibly containing a callback\n\n\nfunction extractArgs(args, needsCallback) {\n  let callback;\n  const actualArgs = args.slice(); // If the last arg is a function, we pop it, put it into callback.\n  // actualArgs will then hold the actual arguments to be passed to `method`\n\n  if (args.length && (0, _util.isFunction)(args[args.length - 1])) {\n    callback = actualArgs.pop();\n  } // When we need a subscription, ensure that a valid callback is actually passed\n\n\n  (0, _util.assert)(!needsCallback || (0, _util.isFunction)(callback), 'Expected a callback to be passed with subscriptions');\n  return [actualArgs, callback];\n} // a Promise completion tracker, wrapping an isComplete variable that ensures the promise only resolves once\n\n\nfunction promiseTracker(resolve, reject) {\n  let isCompleted = false;\n  return {\n    reject: error => {\n      if (!isCompleted) {\n        isCompleted = true;\n        reject(error);\n      }\n\n      return _rxjs.EMPTY;\n    },\n    resolve: value => {\n      if (!isCompleted) {\n        isCompleted = true;\n        resolve(value);\n      }\n    }\n  };\n} // Decorate a call for a single-shot result - retrieve and then immediate unsubscribe\n\n\nfunction decorateCall(method, actualArgs) {\n  return new Promise((resolve, reject) => {\n    // single result tracker - either reject with Error or resolve with Codec result\n    const tracker = promiseTracker(resolve, reject); // encoding errors reject immediately, any result unsubscribes and resolves\n\n    const subscription = method(...actualArgs).pipe((0, _operators.catchError)(error => tracker.reject(error))).subscribe(result => {\n      tracker.resolve(result);\n      setTimeout(() => subscription.unsubscribe(), 0);\n    });\n  });\n} // Decorate a subscription where we have a result callback specified\n\n\nfunction decorateSubscribe(method, actualArgs, resultCb) {\n  return new Promise((resolve, reject) => {\n    // either reject with error or resolve with unsubscribe callback\n    const tracker = promiseTracker(resolve, reject); // errors reject immediately, the first result resolves with an unsubscribe promise, all results via callback\n\n    const subscription = method(...actualArgs).pipe((0, _operators.catchError)(error => tracker.reject(error)), (0, _operators.tap)(() => tracker.resolve(() => subscription.unsubscribe()))).subscribe(result => {\n      // queue result (back of queue to clear current)\n      setTimeout(() => resultCb(result), 0);\n    });\n  });\n}\n/**\n * @description Decorate method for ApiPromise, where the results are converted to the Promise equivalent\n */\n\n\nfunction decorateMethod(method, options) {\n  const needsCallback = options && options.methodName && options.methodName.includes('subscribe');\n  return function (...args) {\n    const [actualArgs, resultCb] = extractArgs(args, !!needsCallback);\n    return resultCb ? decorateSubscribe(method, actualArgs, resultCb) : decorateCall((options === null || options === void 0 ? void 0 : options.overrideNoSub) || method, actualArgs);\n  };\n}\n/**\n * # @polkadot/api/promise\n *\n * ## Overview\n *\n * @name ApiPromise\n * @description\n * ApiPromise is a standard JavaScript wrapper around the RPC and interfaces on the Polkadot network. As a full Promise-based, all interface calls return Promises, including the static `.create(...)`. Subscription calls utilise `(value) => {}` callbacks to pass through the latest values.\n *\n * The API is well suited to real-time applications where either the single-shot state is needed or use is to be made of the subscription-based features of Polkadot (and Substrate) clients.\n *\n * @see [[ApiRx]]\n *\n * ## Usage\n *\n * Making rpc calls -\n * <BR>\n *\n * ```javascript\n * import ApiPromise from '@polkadot/api/promise';\n *\n * // initialise via static create\n * const api = await ApiPromise.create();\n *\n * // make a subscription to the network head\n * api.rpc.chain.subscribeNewHeads((header) => {\n *   console.log(`Chain is at #${header.number}`);\n * });\n * ```\n * <BR>\n *\n * Subscribing to chain state -\n * <BR>\n *\n * ```javascript\n * import { ApiPromise, WsProvider } from '@polkadot/api';\n *\n * // initialise a provider with a specific endpoint\n * const provider = new WsProvider('wss://example.com:9944')\n *\n * // initialise via isReady & new with specific provider\n * const api = await new ApiPromise({ provider }).isReady;\n *\n * // retrieve the block target time\n * const blockPeriod = await api.query.timestamp.blockPeriod().toNumber();\n * let last = 0;\n *\n * // subscribe to the current block timestamp, updates automatically (callback provided)\n * api.query.timestamp.now((timestamp) => {\n *   const elapsed = last\n *     ? `, ${timestamp.toNumber() - last}s since last`\n *     : '';\n *\n *   last = timestamp.toNumber();\n *   console.log(`timestamp ${timestamp}${elapsed} (${blockPeriod}s target)`);\n * });\n * ```\n * <BR>\n *\n * Submitting a transaction -\n * <BR>\n *\n * ```javascript\n * import ApiPromise from '@polkadot/api/promise';\n *\n * ApiPromise.create().then((api) => {\n *   const [nonce] = await api.query.system.account(keyring.alice.address);\n *\n *   api.tx.balances\n *     // create transfer\n *     transfer(keyring.bob.address, 12345)\n *     // sign the transcation\n *     .sign(keyring.alice, { nonce })\n *     // send the transaction (optional status callback)\n *     .send((status) => {\n *       console.log(`current status ${status.type}`);\n *     })\n *     // retrieve the submitted extrinsic hash\n *     .then((hash) => {\n *       console.log(`submitted with hash ${hash}`);\n *     });\n * });\n * ```\n */\n\n\nvar _isReadyPromise = (0, _classPrivateFieldLooseKey2.default)(\"isReadyPromise\");\n\nvar _isReadyOrErrorPromise = (0, _classPrivateFieldLooseKey2.default)(\"isReadyOrErrorPromise\");\n\nclass ApiPromise extends _base.default {\n  /**\n   * @description Creates an ApiPromise instance using the supplied provider. Returns an Promise containing the actual Api instance.\n   * @param options options that is passed to the class contructor. Can be either [[ApiOptions]] or a\n   * provider (see the constructor arguments)\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * import Api from '@polkadot/api/promise';\n   *\n   * Api.create().then(async (api) => {\n   *   const timestamp = await api.query.timestamp.now();\n   *\n   *   console.log(`lastest block timestamp ${timestamp}`);\n   * });\n   * ```\n   */\n  static create(options) {\n    return new ApiPromise(options).isReady;\n  }\n  /**\n   * @description Creates an instance of the ApiPromise class\n   * @param options Options to create an instance. This can be either [[ApiOptions]] or\n   * an [[WsProvider]].\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * import Api from '@polkadot/api/promise';\n   *\n   * new Api().isReady.then((api) => {\n   *   api.rpc.subscribeNewHeads((header) => {\n   *     console.log(`new block #${header.number.toNumber()}`);\n   *   });\n   * });\n   * ```\n   */\n\n\n  constructor(options) {\n    super(options, 'promise', decorateMethod);\n    Object.defineProperty(this, _isReadyPromise, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _isReadyOrErrorPromise, {\n      writable: true,\n      value: void 0\n    });\n    (0, _classPrivateFieldLooseBase2.default)(this, _isReadyPromise)[_isReadyPromise] = new Promise(resolve => {\n      super.once('ready', () => {\n        resolve(this);\n      });\n    });\n    (0, _classPrivateFieldLooseBase2.default)(this, _isReadyOrErrorPromise)[_isReadyOrErrorPromise] = new Promise((resolve, reject) => {\n      super.once('ready', () => {\n        resolve(this);\n      });\n      super.once('error', e => {\n        reject(e);\n      });\n    });\n  }\n  /**\n   * @description Promise that resolves the first time we are connected and loaded\n   */\n\n\n  get isReady() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _isReadyPromise)[_isReadyPromise];\n  }\n  /**\n   * @description Promise that resolves if we can connect, or reject if there is an error\n   */\n\n\n  get isReadyOrError() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _isReadyOrErrorPromise)[_isReadyOrErrorPromise];\n  }\n  /**\n   * @description Returns a clone of this ApiPromise instance (new underlying provider connection)\n   */\n\n\n  clone() {\n    return new ApiPromise(_objectSpread(_objectSpread({}, this._options), {}, {\n      source: this\n    }));\n  }\n  /**\n   * @description Creates a combinator that can be used to combine the latest results from multiple subscriptions\n   * @param fns An array of function to combine, each in the form of `(cb: (value: void)) => void`\n   * @param callback A callback that will return an Array of all the values this combinator has been applied to\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * const address = '5DTestUPts3kjeXSTMyerHihn1uwMfLj8vU8sqF7qYrFacT7';\n   *\n   * // combines values from balance & nonce as it updates\n   * api.combineLatest([\n   *   api.rpc.chain.subscribeNewHeads,\n   *   (cb) => api.query.system.account(address, cb)\n   * ], ([head, [balance, nonce]]) => {\n   *   console.log(`#${head.number}: You have ${balance.free} units, with ${nonce} transactions sent`);\n   * });\n   * ```\n   */\n  // eslint-disable-next-line @typescript-eslint/require-await\n\n\n  async combineLatest(fns, callback) {\n    const combinator = new _Combinator.default(fns, callback);\n    return () => {\n      combinator.unsubscribe();\n    };\n  }\n\n}\n\nexports.default = ApiPromise;","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/api/promise/Api.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","decorateMethod","default","_defineProperty2","_classPrivateFieldLooseBase2","_classPrivateFieldLooseKey2","_rxjs","_operators","_util","_base","_Combinator","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","extractArgs","args","needsCallback","callback","actualArgs","slice","isFunction","pop","assert","promiseTracker","resolve","reject","isCompleted","error","EMPTY","decorateCall","method","Promise","tracker","subscription","pipe","catchError","subscribe","result","setTimeout","unsubscribe","decorateSubscribe","resultCb","tap","options","methodName","includes","overrideNoSub","_isReadyPromise","_isReadyOrErrorPromise","ApiPromise","create","isReady","constructor","writable","once","e","isReadyOrError","clone","_options","combineLatest","fns","combinator"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,cAAR,GAAyBA,cAAzB;AACAF,OAAO,CAACG,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,gBAAgB,GAAGR,sBAAsB,CAACC,OAAO,CAAC,uCAAD,CAAR,CAA7C;;AAEA,IAAIQ,4BAA4B,GAAGT,sBAAsB,CAACC,OAAO,CAAC,mDAAD,CAAR,CAAzD;;AAEA,IAAIS,2BAA2B,GAAGV,sBAAsB,CAACC,OAAO,CAAC,kDAAD,CAAR,CAAxD;;AAEA,IAAIU,KAAK,GAAGV,OAAO,CAAC,MAAD,CAAnB;;AAEA,IAAIW,UAAU,GAAGX,OAAO,CAAC,gBAAD,CAAxB;;AAEA,IAAIY,KAAK,GAAGZ,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIa,KAAK,GAAGd,sBAAsB,CAACC,OAAO,CAAC,SAAD,CAAR,CAAlC;;AAEA,IAAIc,WAAW,GAAGf,sBAAsB,CAACC,OAAO,CAAC,cAAD,CAAR,CAAxC;;AAEA,SAASe,OAAT,CAAiBC,MAAjB,EAAyBC,cAAzB,EAAyC;AAAE,MAAIC,IAAI,GAAGjB,MAAM,CAACiB,IAAP,CAAYF,MAAZ,CAAX;;AAAgC,MAAIf,MAAM,CAACkB,qBAAX,EAAkC;AAAE,QAAIC,OAAO,GAAGnB,MAAM,CAACkB,qBAAP,CAA6BH,MAA7B,CAAd;AAAoD,QAAIC,cAAJ,EAAoBG,OAAO,GAAGA,OAAO,CAACC,MAAR,CAAe,UAAUC,GAAV,EAAe;AAAE,aAAOrB,MAAM,CAACsB,wBAAP,CAAgCP,MAAhC,EAAwCM,GAAxC,EAA6CE,UAApD;AAAiE,KAAjG,CAAV;AAA8GN,IAAAA,IAAI,CAACO,IAAL,CAAUC,KAAV,CAAgBR,IAAhB,EAAsBE,OAAtB;AAAiC;;AAAC,SAAOF,IAAP;AAAc;;AAErV,SAASS,aAAT,CAAuBC,MAAvB,EAA+B;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,QAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAT,IAAgB,IAAhB,GAAuBC,SAAS,CAACD,CAAD,CAAhC,GAAsC,EAAnD;;AAAuD,QAAIA,CAAC,GAAG,CAAR,EAAW;AAAEd,MAAAA,OAAO,CAACd,MAAM,CAAC+B,MAAD,CAAP,EAAiB,IAAjB,CAAP,CAA8BC,OAA9B,CAAsC,UAAUC,GAAV,EAAe;AAAE,SAAC,GAAG3B,gBAAgB,CAACD,OAArB,EAA8BsB,MAA9B,EAAsCM,GAAtC,EAA2CF,MAAM,CAACE,GAAD,CAAjD;AAA0D,OAAjH;AAAqH,KAAlI,MAAwI,IAAIjC,MAAM,CAACkC,yBAAX,EAAsC;AAAElC,MAAAA,MAAM,CAACmC,gBAAP,CAAwBR,MAAxB,EAAgC3B,MAAM,CAACkC,yBAAP,CAAiCH,MAAjC,CAAhC;AAA4E,KAApH,MAA0H;AAAEjB,MAAAA,OAAO,CAACd,MAAM,CAAC+B,MAAD,CAAP,CAAP,CAAwBC,OAAxB,CAAgC,UAAUC,GAAV,EAAe;AAAEjC,QAAAA,MAAM,CAACC,cAAP,CAAsB0B,MAAtB,EAA8BM,GAA9B,EAAmCjC,MAAM,CAACsB,wBAAP,CAAgCS,MAAhC,EAAwCE,GAAxC,CAAnC;AAAmF,OAApI;AAAwI;AAAE;;AAAC,SAAON,MAAP;AAAgB,C,CAEpiB;;;AACA,SAASS,WAAT,CAAqBC,IAArB,EAA2BC,aAA3B,EAA0C;AACxC,MAAIC,QAAJ;AACA,QAAMC,UAAU,GAAGH,IAAI,CAACI,KAAL,EAAnB,CAFwC,CAEP;AACjC;;AAEA,MAAIJ,IAAI,CAACP,MAAL,IAAe,CAAC,GAAGnB,KAAK,CAAC+B,UAAV,EAAsBL,IAAI,CAACA,IAAI,CAACP,MAAL,GAAc,CAAf,CAA1B,CAAnB,EAAiE;AAC/DS,IAAAA,QAAQ,GAAGC,UAAU,CAACG,GAAX,EAAX;AACD,GAPuC,CAOtC;;;AAGF,GAAC,GAAGhC,KAAK,CAACiC,MAAV,EAAkB,CAACN,aAAD,IAAkB,CAAC,GAAG3B,KAAK,CAAC+B,UAAV,EAAsBH,QAAtB,CAApC,EAAqE,qDAArE;AACA,SAAO,CAACC,UAAD,EAAaD,QAAb,CAAP;AACD,C,CAAC;;;AAGF,SAASM,cAAT,CAAwBC,OAAxB,EAAiCC,MAAjC,EAAyC;AACvC,MAAIC,WAAW,GAAG,KAAlB;AACA,SAAO;AACLD,IAAAA,MAAM,EAAEE,KAAK,IAAI;AACf,UAAI,CAACD,WAAL,EAAkB;AAChBA,QAAAA,WAAW,GAAG,IAAd;AACAD,QAAAA,MAAM,CAACE,KAAD,CAAN;AACD;;AAED,aAAOxC,KAAK,CAACyC,KAAb;AACD,KARI;AASLJ,IAAAA,OAAO,EAAE3C,KAAK,IAAI;AAChB,UAAI,CAAC6C,WAAL,EAAkB;AAChBA,QAAAA,WAAW,GAAG,IAAd;AACAF,QAAAA,OAAO,CAAC3C,KAAD,CAAP;AACD;AACF;AAdI,GAAP;AAgBD,C,CAAC;;;AAGF,SAASgD,YAAT,CAAsBC,MAAtB,EAA8BZ,UAA9B,EAA0C;AACxC,SAAO,IAAIa,OAAJ,CAAY,CAACP,OAAD,EAAUC,MAAV,KAAqB;AACtC;AACA,UAAMO,OAAO,GAAGT,cAAc,CAACC,OAAD,EAAUC,MAAV,CAA9B,CAFsC,CAEW;;AAEjD,UAAMQ,YAAY,GAAGH,MAAM,CAAC,GAAGZ,UAAJ,CAAN,CAAsBgB,IAAtB,CAA2B,CAAC,GAAG9C,UAAU,CAAC+C,UAAf,EAA2BR,KAAK,IAAIK,OAAO,CAACP,MAAR,CAAeE,KAAf,CAApC,CAA3B,EAAuFS,SAAvF,CAAiGC,MAAM,IAAI;AAC9HL,MAAAA,OAAO,CAACR,OAAR,CAAgBa,MAAhB;AACAC,MAAAA,UAAU,CAAC,MAAML,YAAY,CAACM,WAAb,EAAP,EAAmC,CAAnC,CAAV;AACD,KAHoB,CAArB;AAID,GARM,CAAP;AASD,C,CAAC;;;AAGF,SAASC,iBAAT,CAA2BV,MAA3B,EAAmCZ,UAAnC,EAA+CuB,QAA/C,EAAyD;AACvD,SAAO,IAAIV,OAAJ,CAAY,CAACP,OAAD,EAAUC,MAAV,KAAqB;AACtC;AACA,UAAMO,OAAO,GAAGT,cAAc,CAACC,OAAD,EAAUC,MAAV,CAA9B,CAFsC,CAEW;;AAEjD,UAAMQ,YAAY,GAAGH,MAAM,CAAC,GAAGZ,UAAJ,CAAN,CAAsBgB,IAAtB,CAA2B,CAAC,GAAG9C,UAAU,CAAC+C,UAAf,EAA2BR,KAAK,IAAIK,OAAO,CAACP,MAAR,CAAeE,KAAf,CAApC,CAA3B,EAAuF,CAAC,GAAGvC,UAAU,CAACsD,GAAf,EAAoB,MAAMV,OAAO,CAACR,OAAR,CAAgB,MAAMS,YAAY,CAACM,WAAb,EAAtB,CAA1B,CAAvF,EAAqKH,SAArK,CAA+KC,MAAM,IAAI;AAC5M;AACAC,MAAAA,UAAU,CAAC,MAAMG,QAAQ,CAACJ,MAAD,CAAf,EAAyB,CAAzB,CAAV;AACD,KAHoB,CAArB;AAID,GARM,CAAP;AASD;AACD;AACA;AACA;;;AAGA,SAASvD,cAAT,CAAwBgD,MAAxB,EAAgCa,OAAhC,EAAyC;AACvC,QAAM3B,aAAa,GAAG2B,OAAO,IAAIA,OAAO,CAACC,UAAnB,IAAiCD,OAAO,CAACC,UAAR,CAAmBC,QAAnB,CAA4B,WAA5B,CAAvD;AACA,SAAO,UAAU,GAAG9B,IAAb,EAAmB;AACxB,UAAM,CAACG,UAAD,EAAauB,QAAb,IAAyB3B,WAAW,CAACC,IAAD,EAAO,CAAC,CAACC,aAAT,CAA1C;AACA,WAAOyB,QAAQ,GAAGD,iBAAiB,CAACV,MAAD,EAASZ,UAAT,EAAqBuB,QAArB,CAApB,GAAqDZ,YAAY,CAAC,CAACc,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACG,aAA3D,KAA6EhB,MAA9E,EAAsFZ,UAAtF,CAAhF;AACD,GAHD;AAID;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAI6B,eAAe,GAAG,CAAC,GAAG7D,2BAA2B,CAACH,OAAhC,EAAyC,gBAAzC,CAAtB;;AAEA,IAAIiE,sBAAsB,GAAG,CAAC,GAAG9D,2BAA2B,CAACH,OAAhC,EAAyC,uBAAzC,CAA7B;;AAEA,MAAMkE,UAAN,SAAyB3D,KAAK,CAACP,OAA/B,CAAuC;AACrC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,SAAOmE,MAAP,CAAcP,OAAd,EAAuB;AACrB,WAAO,IAAIM,UAAJ,CAAeN,OAAf,EAAwBQ,OAA/B;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGEC,EAAAA,WAAW,CAACT,OAAD,EAAU;AACnB,UAAMA,OAAN,EAAe,SAAf,EAA0B7D,cAA1B;AACAJ,IAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BoE,eAA5B,EAA6C;AAC3CM,MAAAA,QAAQ,EAAE,IADiC;AAE3CxE,MAAAA,KAAK,EAAE,KAAK;AAF+B,KAA7C;AAIAH,IAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BqE,sBAA5B,EAAoD;AAClDK,MAAAA,QAAQ,EAAE,IADwC;AAElDxE,MAAAA,KAAK,EAAE,KAAK;AAFsC,KAApD;AAIA,KAAC,GAAGI,4BAA4B,CAACF,OAAjC,EAA0C,IAA1C,EAAgDgE,eAAhD,EAAiEA,eAAjE,IAAoF,IAAIhB,OAAJ,CAAYP,OAAO,IAAI;AACzG,YAAM8B,IAAN,CAAW,OAAX,EAAoB,MAAM;AACxB9B,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OAFD;AAGD,KAJmF,CAApF;AAKA,KAAC,GAAGvC,4BAA4B,CAACF,OAAjC,EAA0C,IAA1C,EAAgDiE,sBAAhD,EAAwEA,sBAAxE,IAAkG,IAAIjB,OAAJ,CAAY,CAACP,OAAD,EAAUC,MAAV,KAAqB;AACjI,YAAM6B,IAAN,CAAW,OAAX,EAAoB,MAAM;AACxB9B,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OAFD;AAGA,YAAM8B,IAAN,CAAW,OAAX,EAAoBC,CAAC,IAAI;AACvB9B,QAAAA,MAAM,CAAC8B,CAAD,CAAN;AACD,OAFD;AAGD,KAPiG,CAAlG;AAQD;AACD;AACF;AACA;;;AAGE,MAAIJ,OAAJ,GAAc;AACZ,WAAO,CAAC,GAAGlE,4BAA4B,CAACF,OAAjC,EAA0C,IAA1C,EAAgDgE,eAAhD,EAAiEA,eAAjE,CAAP;AACD;AACD;AACF;AACA;;;AAGE,MAAIS,cAAJ,GAAqB;AACnB,WAAO,CAAC,GAAGvE,4BAA4B,CAACF,OAAjC,EAA0C,IAA1C,EAAgDiE,sBAAhD,EAAwEA,sBAAxE,CAAP;AACD;AACD;AACF;AACA;;;AAGES,EAAAA,KAAK,GAAG;AACN,WAAO,IAAIR,UAAJ,CAAe7C,aAAa,CAACA,aAAa,CAAC,EAAD,EAAK,KAAKsD,QAAV,CAAd,EAAmC,EAAnC,EAAuC;AACxEjD,MAAAA,MAAM,EAAE;AADgE,KAAvC,CAA5B,CAAP;AAGD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;;;AAGA,QAAMkD,aAAN,CAAoBC,GAApB,EAAyB3C,QAAzB,EAAmC;AACjC,UAAM4C,UAAU,GAAG,IAAItE,WAAW,CAACR,OAAhB,CAAwB6E,GAAxB,EAA6B3C,QAA7B,CAAnB;AACA,WAAO,MAAM;AACX4C,MAAAA,UAAU,CAACtB,WAAX;AACD,KAFD;AAGD;;AArHoC;;AAyHvC3D,OAAO,CAACG,OAAR,GAAkBkE,UAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decorateMethod = decorateMethod;\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _base = _interopRequireDefault(require(\"../base\"));\n\nvar _Combinator = _interopRequireDefault(require(\"./Combinator\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// extract the arguments and callback params from a value array possibly containing a callback\nfunction extractArgs(args, needsCallback) {\n  let callback;\n  const actualArgs = args.slice(); // If the last arg is a function, we pop it, put it into callback.\n  // actualArgs will then hold the actual arguments to be passed to `method`\n\n  if (args.length && (0, _util.isFunction)(args[args.length - 1])) {\n    callback = actualArgs.pop();\n  } // When we need a subscription, ensure that a valid callback is actually passed\n\n\n  (0, _util.assert)(!needsCallback || (0, _util.isFunction)(callback), 'Expected a callback to be passed with subscriptions');\n  return [actualArgs, callback];\n} // a Promise completion tracker, wrapping an isComplete variable that ensures the promise only resolves once\n\n\nfunction promiseTracker(resolve, reject) {\n  let isCompleted = false;\n  return {\n    reject: error => {\n      if (!isCompleted) {\n        isCompleted = true;\n        reject(error);\n      }\n\n      return _rxjs.EMPTY;\n    },\n    resolve: value => {\n      if (!isCompleted) {\n        isCompleted = true;\n        resolve(value);\n      }\n    }\n  };\n} // Decorate a call for a single-shot result - retrieve and then immediate unsubscribe\n\n\nfunction decorateCall(method, actualArgs) {\n  return new Promise((resolve, reject) => {\n    // single result tracker - either reject with Error or resolve with Codec result\n    const tracker = promiseTracker(resolve, reject); // encoding errors reject immediately, any result unsubscribes and resolves\n\n    const subscription = method(...actualArgs).pipe((0, _operators.catchError)(error => tracker.reject(error))).subscribe(result => {\n      tracker.resolve(result);\n      setTimeout(() => subscription.unsubscribe(), 0);\n    });\n  });\n} // Decorate a subscription where we have a result callback specified\n\n\nfunction decorateSubscribe(method, actualArgs, resultCb) {\n  return new Promise((resolve, reject) => {\n    // either reject with error or resolve with unsubscribe callback\n    const tracker = promiseTracker(resolve, reject); // errors reject immediately, the first result resolves with an unsubscribe promise, all results via callback\n\n    const subscription = method(...actualArgs).pipe((0, _operators.catchError)(error => tracker.reject(error)), (0, _operators.tap)(() => tracker.resolve(() => subscription.unsubscribe()))).subscribe(result => {\n      // queue result (back of queue to clear current)\n      setTimeout(() => resultCb(result), 0);\n    });\n  });\n}\n/**\n * @description Decorate method for ApiPromise, where the results are converted to the Promise equivalent\n */\n\n\nfunction decorateMethod(method, options) {\n  const needsCallback = options && options.methodName && options.methodName.includes('subscribe');\n  return function (...args) {\n    const [actualArgs, resultCb] = extractArgs(args, !!needsCallback);\n    return resultCb ? decorateSubscribe(method, actualArgs, resultCb) : decorateCall((options === null || options === void 0 ? void 0 : options.overrideNoSub) || method, actualArgs);\n  };\n}\n/**\n * # @polkadot/api/promise\n *\n * ## Overview\n *\n * @name ApiPromise\n * @description\n * ApiPromise is a standard JavaScript wrapper around the RPC and interfaces on the Polkadot network. As a full Promise-based, all interface calls return Promises, including the static `.create(...)`. Subscription calls utilise `(value) => {}` callbacks to pass through the latest values.\n *\n * The API is well suited to real-time applications where either the single-shot state is needed or use is to be made of the subscription-based features of Polkadot (and Substrate) clients.\n *\n * @see [[ApiRx]]\n *\n * ## Usage\n *\n * Making rpc calls -\n * <BR>\n *\n * ```javascript\n * import ApiPromise from '@polkadot/api/promise';\n *\n * // initialise via static create\n * const api = await ApiPromise.create();\n *\n * // make a subscription to the network head\n * api.rpc.chain.subscribeNewHeads((header) => {\n *   console.log(`Chain is at #${header.number}`);\n * });\n * ```\n * <BR>\n *\n * Subscribing to chain state -\n * <BR>\n *\n * ```javascript\n * import { ApiPromise, WsProvider } from '@polkadot/api';\n *\n * // initialise a provider with a specific endpoint\n * const provider = new WsProvider('wss://example.com:9944')\n *\n * // initialise via isReady & new with specific provider\n * const api = await new ApiPromise({ provider }).isReady;\n *\n * // retrieve the block target time\n * const blockPeriod = await api.query.timestamp.blockPeriod().toNumber();\n * let last = 0;\n *\n * // subscribe to the current block timestamp, updates automatically (callback provided)\n * api.query.timestamp.now((timestamp) => {\n *   const elapsed = last\n *     ? `, ${timestamp.toNumber() - last}s since last`\n *     : '';\n *\n *   last = timestamp.toNumber();\n *   console.log(`timestamp ${timestamp}${elapsed} (${blockPeriod}s target)`);\n * });\n * ```\n * <BR>\n *\n * Submitting a transaction -\n * <BR>\n *\n * ```javascript\n * import ApiPromise from '@polkadot/api/promise';\n *\n * ApiPromise.create().then((api) => {\n *   const [nonce] = await api.query.system.account(keyring.alice.address);\n *\n *   api.tx.balances\n *     // create transfer\n *     transfer(keyring.bob.address, 12345)\n *     // sign the transcation\n *     .sign(keyring.alice, { nonce })\n *     // send the transaction (optional status callback)\n *     .send((status) => {\n *       console.log(`current status ${status.type}`);\n *     })\n *     // retrieve the submitted extrinsic hash\n *     .then((hash) => {\n *       console.log(`submitted with hash ${hash}`);\n *     });\n * });\n * ```\n */\n\n\nvar _isReadyPromise = (0, _classPrivateFieldLooseKey2.default)(\"isReadyPromise\");\n\nvar _isReadyOrErrorPromise = (0, _classPrivateFieldLooseKey2.default)(\"isReadyOrErrorPromise\");\n\nclass ApiPromise extends _base.default {\n  /**\n   * @description Creates an ApiPromise instance using the supplied provider. Returns an Promise containing the actual Api instance.\n   * @param options options that is passed to the class contructor. Can be either [[ApiOptions]] or a\n   * provider (see the constructor arguments)\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * import Api from '@polkadot/api/promise';\n   *\n   * Api.create().then(async (api) => {\n   *   const timestamp = await api.query.timestamp.now();\n   *\n   *   console.log(`lastest block timestamp ${timestamp}`);\n   * });\n   * ```\n   */\n  static create(options) {\n    return new ApiPromise(options).isReady;\n  }\n  /**\n   * @description Creates an instance of the ApiPromise class\n   * @param options Options to create an instance. This can be either [[ApiOptions]] or\n   * an [[WsProvider]].\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * import Api from '@polkadot/api/promise';\n   *\n   * new Api().isReady.then((api) => {\n   *   api.rpc.subscribeNewHeads((header) => {\n   *     console.log(`new block #${header.number.toNumber()}`);\n   *   });\n   * });\n   * ```\n   */\n\n\n  constructor(options) {\n    super(options, 'promise', decorateMethod);\n    Object.defineProperty(this, _isReadyPromise, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _isReadyOrErrorPromise, {\n      writable: true,\n      value: void 0\n    });\n    (0, _classPrivateFieldLooseBase2.default)(this, _isReadyPromise)[_isReadyPromise] = new Promise(resolve => {\n      super.once('ready', () => {\n        resolve(this);\n      });\n    });\n    (0, _classPrivateFieldLooseBase2.default)(this, _isReadyOrErrorPromise)[_isReadyOrErrorPromise] = new Promise((resolve, reject) => {\n      super.once('ready', () => {\n        resolve(this);\n      });\n      super.once('error', e => {\n        reject(e);\n      });\n    });\n  }\n  /**\n   * @description Promise that resolves the first time we are connected and loaded\n   */\n\n\n  get isReady() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _isReadyPromise)[_isReadyPromise];\n  }\n  /**\n   * @description Promise that resolves if we can connect, or reject if there is an error\n   */\n\n\n  get isReadyOrError() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _isReadyOrErrorPromise)[_isReadyOrErrorPromise];\n  }\n  /**\n   * @description Returns a clone of this ApiPromise instance (new underlying provider connection)\n   */\n\n\n  clone() {\n    return new ApiPromise(_objectSpread(_objectSpread({}, this._options), {}, {\n      source: this\n    }));\n  }\n  /**\n   * @description Creates a combinator that can be used to combine the latest results from multiple subscriptions\n   * @param fns An array of function to combine, each in the form of `(cb: (value: void)) => void`\n   * @param callback A callback that will return an Array of all the values this combinator has been applied to\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * const address = '5DTestUPts3kjeXSTMyerHihn1uwMfLj8vU8sqF7qYrFacT7';\n   *\n   * // combines values from balance & nonce as it updates\n   * api.combineLatest([\n   *   api.rpc.chain.subscribeNewHeads,\n   *   (cb) => api.query.system.account(address, cb)\n   * ], ([head, [balance, nonce]]) => {\n   *   console.log(`#${head.number}: You have ${balance.free} units, with ${nonce} transactions sent`);\n   * });\n   * ```\n   */\n  // eslint-disable-next-line @typescript-eslint/require-await\n\n\n  async combineLatest(fns, callback) {\n    const combinator = new _Combinator.default(fns, callback);\n    return () => {\n      combinator.unsubscribe();\n    };\n  }\n\n}\n\nexports.default = ApiPromise;"]},"metadata":{},"sourceType":"script"}