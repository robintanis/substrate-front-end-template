{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = base32Encode;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _bs = require(\"./bs32\"); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// adapted from https://github.com/multiformats/js-multibase/blob/424709195b46ffb1d6f2f69a7707598ebe751e5e/src/rfc4648.js\n\n\nconst MASK = (1 << _bs.BITS_PER_CHAR) - 1;\n/**\n * @name base32Encode\n * @summary Creates a base32 value.\n * @description\n * From the provided input, create the base32 and return the result as a string.\n */\n\nfunction base32Encode(value, ipfsCompat = false) {\n  const u8a = (0, _util.u8aToU8a)(value);\n  let out = '';\n  let bits = 0;\n  let buffer = 0;\n\n  for (let i = 0; i < u8a.length; ++i) {\n    buffer = buffer << 8 | u8a[i];\n    bits += 8;\n\n    while (bits > _bs.BITS_PER_CHAR) {\n      bits -= _bs.BITS_PER_CHAR;\n      out += _bs.BASE32_ALPHABET[MASK & buffer >> bits];\n    }\n  }\n\n  if (bits) {\n    out += _bs.BASE32_ALPHABET[MASK & buffer << _bs.BITS_PER_CHAR - bits];\n  }\n\n  return ipfsCompat ? `b${out}` : out;\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/util-crypto/base32/encode.js"],"names":["Object","defineProperty","exports","value","default","base32Encode","_util","require","_bs","MASK","BITS_PER_CHAR","ipfsCompat","u8a","u8aToU8a","out","bits","buffer","i","length","BASE32_ALPHABET"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,YAAlB;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIC,GAAG,GAAGD,OAAO,CAAC,QAAD,CAAjB,C,CAEA;AACA;AACA;;;AACA,MAAME,IAAI,GAAG,CAAC,KAAKD,GAAG,CAACE,aAAV,IAA2B,CAAxC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASL,YAAT,CAAsBF,KAAtB,EAA6BQ,UAAU,GAAG,KAA1C,EAAiD;AAC/C,QAAMC,GAAG,GAAG,CAAC,GAAGN,KAAK,CAACO,QAAV,EAAoBV,KAApB,CAAZ;AACA,MAAIW,GAAG,GAAG,EAAV;AACA,MAAIC,IAAI,GAAG,CAAX;AACA,MAAIC,MAAM,GAAG,CAAb;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,GAAG,CAACM,MAAxB,EAAgC,EAAED,CAAlC,EAAqC;AACnCD,IAAAA,MAAM,GAAGA,MAAM,IAAI,CAAV,GAAcJ,GAAG,CAACK,CAAD,CAA1B;AACAF,IAAAA,IAAI,IAAI,CAAR;;AAEA,WAAOA,IAAI,GAAGP,GAAG,CAACE,aAAlB,EAAiC;AAC/BK,MAAAA,IAAI,IAAIP,GAAG,CAACE,aAAZ;AACAI,MAAAA,GAAG,IAAIN,GAAG,CAACW,eAAJ,CAAoBV,IAAI,GAAGO,MAAM,IAAID,IAArC,CAAP;AACD;AACF;;AAED,MAAIA,IAAJ,EAAU;AACRD,IAAAA,GAAG,IAAIN,GAAG,CAACW,eAAJ,CAAoBV,IAAI,GAAGO,MAAM,IAAIR,GAAG,CAACE,aAAJ,GAAoBK,IAAzD,CAAP;AACD;;AAED,SAAOJ,UAAU,GAAI,IAAGG,GAAI,EAAX,GAAeA,GAAhC;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = base32Encode;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _bs = require(\"./bs32\");\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// adapted from https://github.com/multiformats/js-multibase/blob/424709195b46ffb1d6f2f69a7707598ebe751e5e/src/rfc4648.js\nconst MASK = (1 << _bs.BITS_PER_CHAR) - 1;\n/**\n * @name base32Encode\n * @summary Creates a base32 value.\n * @description\n * From the provided input, create the base32 and return the result as a string.\n */\n\nfunction base32Encode(value, ipfsCompat = false) {\n  const u8a = (0, _util.u8aToU8a)(value);\n  let out = '';\n  let bits = 0;\n  let buffer = 0;\n\n  for (let i = 0; i < u8a.length; ++i) {\n    buffer = buffer << 8 | u8a[i];\n    bits += 8;\n\n    while (bits > _bs.BITS_PER_CHAR) {\n      bits -= _bs.BITS_PER_CHAR;\n      out += _bs.BASE32_ALPHABET[MASK & buffer >> bits];\n    }\n  }\n\n  if (bits) {\n    out += _bs.BASE32_ALPHABET[MASK & buffer << _bs.BITS_PER_CHAR - bits];\n  }\n\n  return ipfsCompat ? `b${out}` : out;\n}"]},"metadata":{},"sourceType":"script"}