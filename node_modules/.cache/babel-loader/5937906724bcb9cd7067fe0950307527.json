{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"LATEST_EXTRINSIC_VERSION\", {\n  enumerable: true,\n  get: function () {\n    return _Extrinsic.EXTRINSIC_VERSION;\n  }\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Base = _interopRequireDefault(require(\"../codec/Base\"));\n\nvar _Compact = _interopRequireDefault(require(\"../codec/Compact\"));\n\nvar _constants = require(\"./constants\");\n\nvar _Extrinsic = require(\"./v4/Extrinsic\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nconst VERSIONS = ['ExtrinsicUnknown', // v0 is unknown\n'ExtrinsicUnknown', 'ExtrinsicUnknown', 'ExtrinsicUnknown', 'ExtrinsicV4'];\n\nclass ExtrinsicBase extends _Base.default {\n  /**\n   * @description The arguments passed to for the call, exposes args so it is compatible with [[Call]]\n   */\n  get args() {\n    return this.method.args;\n  }\n  /**\n   * @description The argument definitions, compatible with [[Call]]\n   */\n\n\n  get argsDef() {\n    return this.method.argsDef;\n  }\n  /**\n   * @description The actual `[sectionIndex, methodIndex]` as used in the Call\n   */\n\n\n  get callIndex() {\n    return this.method.callIndex;\n  }\n  /**\n   * @description The actual data for the Call\n   */\n\n\n  get data() {\n    return this.method.data;\n  }\n  /**\n   * @description The era for this extrinsic\n   */\n\n\n  get era() {\n    return this._raw.signature.era;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description `true` is method has `Origin` argument (compatibility with [Call])\n   */\n\n\n  get hasOrigin() {\n    return this.method.hasOrigin;\n  }\n  /**\n   * @description `true` id the extrinsic is signed\n   */\n\n\n  get isSigned() {\n    return this._raw.signature.isSigned;\n  }\n  /**\n   * @description The length of the actual data, excluding prefix\n   */\n\n\n  get length() {\n    return this.toU8a(true).length;\n  }\n  /**\n   * @description The [[FunctionMetadataLatest]] that describes the extrinsic\n   */\n\n\n  get meta() {\n    return this.method.meta;\n  }\n  /**\n   * @description The [[Call]] this extrinsic wraps\n   */\n\n\n  get method() {\n    return this._raw.method;\n  }\n  /**\n   * @description The nonce for this extrinsic\n   */\n\n\n  get nonce() {\n    return this._raw.signature.nonce;\n  }\n  /**\n   * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]\n   */\n\n\n  get signature() {\n    return this._raw.signature.signature;\n  }\n  /**\n   * @description The [[Address]] that signed\n   */\n\n\n  get signer() {\n    return this._raw.signature.signer;\n  }\n  /**\n   * @description Forwards compat\n   */\n\n\n  get tip() {\n    return this._raw.signature.tip;\n  }\n  /**\n   * @description Returns the raw transaction version (not flagged with signing information)\n  */\n\n\n  get type() {\n    return this._raw.version;\n  }\n  /**\n   * @description Returns the encoded version flag\n  */\n\n\n  get version() {\n    return this.type | (this.isSigned ? _constants.BIT_SIGNED : _constants.BIT_UNSIGNED);\n  }\n\n}\n/**\n * @name GenericExtrinsic\n * @description\n * Representation of an Extrinsic in the system. It contains the actual call,\n * (optional) signature and encodes with an actual length prefix\n *\n * {@link https://github.com/paritytech/wiki/blob/master/Extrinsic.md#the-extrinsic-format-for-node}.\n *\n * Can be:\n * - signed, to create a transaction\n * - left as is, to create an inherent\n */\n\n\nclass Extrinsic extends ExtrinsicBase {\n  constructor(registry, value, {\n    version\n  } = {}) {\n    super(registry, Extrinsic._decodeExtrinsic(registry, value, version));\n  }\n  /** @internal */\n\n\n  static _newFromValue(registry, value, version) {\n    if (value instanceof Extrinsic) {\n      return value._raw;\n    }\n\n    const isSigned = (version & _constants.BIT_SIGNED) === _constants.BIT_SIGNED;\n    const type = VERSIONS[version & _constants.UNMASK_VERSION] || VERSIONS[0]; // we cast here since the VERSION definition is incredibly broad - we don't have a\n    // slice for \"only add extrinsic types\", and more string definitions become unwieldy\n\n    return registry.createType(type, value, {\n      isSigned,\n      version\n    });\n  }\n  /** @internal */\n\n\n  static _decodeExtrinsic(registry, value, version = _constants.DEFAULT_VERSION) {\n    if ((0, _util.isU8a)(value) || Array.isArray(value) || (0, _util.isHex)(value)) {\n      return Extrinsic._decodeU8a(registry, (0, _util.u8aToU8a)(value), version);\n    } else if (value instanceof registry.createClass('Call')) {\n      return Extrinsic._newFromValue(registry, {\n        method: value\n      }, version);\n    }\n\n    return Extrinsic._newFromValue(registry, value, version);\n  }\n  /** @internal */\n\n\n  static _decodeU8a(registry, value, version) {\n    if (!value.length) {\n      return Extrinsic._newFromValue(registry, new Uint8Array(), version);\n    }\n\n    const [offset, length] = _Compact.default.decodeU8a(value);\n\n    const total = offset + length.toNumber();\n    (0, _util.assert)(total <= value.length, `Extrinsic: length less than remainder, expected at least ${total}, found ${value.length}`);\n    const data = value.subarray(offset, total);\n    return Extrinsic._newFromValue(registry, data.subarray(1), data[0]);\n  }\n  /**\n   * @description Injects an already-generated signature into the extrinsic\n   */\n\n\n  addSignature(signer, signature, payload) {\n    this._raw.addSignature(signer, signature, payload);\n\n    return this;\n  }\n  /**\n   * @description Sign the extrinsic with a specific keypair\n   */\n\n\n  sign(account, options) {\n    this._raw.sign(account, options);\n\n    return this;\n  }\n  /**\n   * @describe Adds a fake signature to the extrinsic\n   */\n\n\n  signFake(signer, options) {\n    this._raw.signFake(signer, options);\n\n    return this;\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex(isBare) {\n    return (0, _util.u8aToHex)(this.toU8a(isBare));\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExpanded) {\n    return _objectSpread({\n      isSigned: this.isSigned,\n      method: this.method.toHuman(isExpanded)\n    }, this.isSigned ? {\n      era: this.era.toHuman(isExpanded),\n      nonce: this.nonce.toHuman(isExpanded),\n      signature: this.signature.toHex(),\n      signer: this.signer.toHuman(isExpanded),\n      tip: this.tip.toHuman(isExpanded)\n    } : {});\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toHex();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'Extrinsic';\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value is not length-prefixed\n   */\n\n\n  toU8a(isBare) {\n    // we do not apply bare to the internal values, rather this only determines out length addition,\n    // where we strip all lengths this creates an extrinsic that cannot be decoded\n    const encoded = (0, _util.u8aConcat)(new Uint8Array([this.version]), this._raw.toU8a());\n    return isBare ? encoded : _Compact.default.addLengthPrefix(encoded);\n  }\n\n}\n\nexports.default = Extrinsic;","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/types/extrinsic/Extrinsic.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","enumerable","get","_Extrinsic","EXTRINSIC_VERSION","default","_defineProperty2","_util","_Base","_Compact","_constants","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","VERSIONS","ExtrinsicBase","args","method","argsDef","callIndex","data","era","_raw","signature","encodedLength","toU8a","hasOrigin","isSigned","meta","nonce","signer","tip","type","version","BIT_SIGNED","BIT_UNSIGNED","Extrinsic","constructor","registry","_decodeExtrinsic","_newFromValue","UNMASK_VERSION","createType","DEFAULT_VERSION","isU8a","Array","isArray","isHex","_decodeU8a","u8aToU8a","createClass","Uint8Array","offset","decodeU8a","total","toNumber","assert","subarray","addSignature","payload","sign","account","options","signFake","toHex","isBare","u8aToHex","toHuman","isExpanded","toJSON","toRawType","encoded","u8aConcat","addLengthPrefix"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"LATEST_EXTRINSIC_VERSION\", {\n  enumerable: true,\n  get: function () {\n    return _Extrinsic.EXTRINSIC_VERSION;\n  }\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Base = _interopRequireDefault(require(\"../codec/Base\"));\n\nvar _Compact = _interopRequireDefault(require(\"../codec/Compact\"));\n\nvar _constants = require(\"./constants\");\n\nvar _Extrinsic = require(\"./v4/Extrinsic\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst VERSIONS = ['ExtrinsicUnknown', // v0 is unknown\n'ExtrinsicUnknown', 'ExtrinsicUnknown', 'ExtrinsicUnknown', 'ExtrinsicV4'];\n\nclass ExtrinsicBase extends _Base.default {\n  /**\n   * @description The arguments passed to for the call, exposes args so it is compatible with [[Call]]\n   */\n  get args() {\n    return this.method.args;\n  }\n  /**\n   * @description The argument definitions, compatible with [[Call]]\n   */\n\n\n  get argsDef() {\n    return this.method.argsDef;\n  }\n  /**\n   * @description The actual `[sectionIndex, methodIndex]` as used in the Call\n   */\n\n\n  get callIndex() {\n    return this.method.callIndex;\n  }\n  /**\n   * @description The actual data for the Call\n   */\n\n\n  get data() {\n    return this.method.data;\n  }\n  /**\n   * @description The era for this extrinsic\n   */\n\n\n  get era() {\n    return this._raw.signature.era;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description `true` is method has `Origin` argument (compatibility with [Call])\n   */\n\n\n  get hasOrigin() {\n    return this.method.hasOrigin;\n  }\n  /**\n   * @description `true` id the extrinsic is signed\n   */\n\n\n  get isSigned() {\n    return this._raw.signature.isSigned;\n  }\n  /**\n   * @description The length of the actual data, excluding prefix\n   */\n\n\n  get length() {\n    return this.toU8a(true).length;\n  }\n  /**\n   * @description The [[FunctionMetadataLatest]] that describes the extrinsic\n   */\n\n\n  get meta() {\n    return this.method.meta;\n  }\n  /**\n   * @description The [[Call]] this extrinsic wraps\n   */\n\n\n  get method() {\n    return this._raw.method;\n  }\n  /**\n   * @description The nonce for this extrinsic\n   */\n\n\n  get nonce() {\n    return this._raw.signature.nonce;\n  }\n  /**\n   * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]\n   */\n\n\n  get signature() {\n    return this._raw.signature.signature;\n  }\n  /**\n   * @description The [[Address]] that signed\n   */\n\n\n  get signer() {\n    return this._raw.signature.signer;\n  }\n  /**\n   * @description Forwards compat\n   */\n\n\n  get tip() {\n    return this._raw.signature.tip;\n  }\n  /**\n   * @description Returns the raw transaction version (not flagged with signing information)\n  */\n\n\n  get type() {\n    return this._raw.version;\n  }\n  /**\n   * @description Returns the encoded version flag\n  */\n\n\n  get version() {\n    return this.type | (this.isSigned ? _constants.BIT_SIGNED : _constants.BIT_UNSIGNED);\n  }\n\n}\n/**\n * @name GenericExtrinsic\n * @description\n * Representation of an Extrinsic in the system. It contains the actual call,\n * (optional) signature and encodes with an actual length prefix\n *\n * {@link https://github.com/paritytech/wiki/blob/master/Extrinsic.md#the-extrinsic-format-for-node}.\n *\n * Can be:\n * - signed, to create a transaction\n * - left as is, to create an inherent\n */\n\n\nclass Extrinsic extends ExtrinsicBase {\n  constructor(registry, value, {\n    version\n  } = {}) {\n    super(registry, Extrinsic._decodeExtrinsic(registry, value, version));\n  }\n  /** @internal */\n\n\n  static _newFromValue(registry, value, version) {\n    if (value instanceof Extrinsic) {\n      return value._raw;\n    }\n\n    const isSigned = (version & _constants.BIT_SIGNED) === _constants.BIT_SIGNED;\n    const type = VERSIONS[version & _constants.UNMASK_VERSION] || VERSIONS[0]; // we cast here since the VERSION definition is incredibly broad - we don't have a\n    // slice for \"only add extrinsic types\", and more string definitions become unwieldy\n\n    return registry.createType(type, value, {\n      isSigned,\n      version\n    });\n  }\n  /** @internal */\n\n\n  static _decodeExtrinsic(registry, value, version = _constants.DEFAULT_VERSION) {\n    if ((0, _util.isU8a)(value) || Array.isArray(value) || (0, _util.isHex)(value)) {\n      return Extrinsic._decodeU8a(registry, (0, _util.u8aToU8a)(value), version);\n    } else if (value instanceof registry.createClass('Call')) {\n      return Extrinsic._newFromValue(registry, {\n        method: value\n      }, version);\n    }\n\n    return Extrinsic._newFromValue(registry, value, version);\n  }\n  /** @internal */\n\n\n  static _decodeU8a(registry, value, version) {\n    if (!value.length) {\n      return Extrinsic._newFromValue(registry, new Uint8Array(), version);\n    }\n\n    const [offset, length] = _Compact.default.decodeU8a(value);\n\n    const total = offset + length.toNumber();\n    (0, _util.assert)(total <= value.length, `Extrinsic: length less than remainder, expected at least ${total}, found ${value.length}`);\n    const data = value.subarray(offset, total);\n    return Extrinsic._newFromValue(registry, data.subarray(1), data[0]);\n  }\n  /**\n   * @description Injects an already-generated signature into the extrinsic\n   */\n\n\n  addSignature(signer, signature, payload) {\n    this._raw.addSignature(signer, signature, payload);\n\n    return this;\n  }\n  /**\n   * @description Sign the extrinsic with a specific keypair\n   */\n\n\n  sign(account, options) {\n    this._raw.sign(account, options);\n\n    return this;\n  }\n  /**\n   * @describe Adds a fake signature to the extrinsic\n   */\n\n\n  signFake(signer, options) {\n    this._raw.signFake(signer, options);\n\n    return this;\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex(isBare) {\n    return (0, _util.u8aToHex)(this.toU8a(isBare));\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExpanded) {\n    return _objectSpread({\n      isSigned: this.isSigned,\n      method: this.method.toHuman(isExpanded)\n    }, this.isSigned ? {\n      era: this.era.toHuman(isExpanded),\n      nonce: this.nonce.toHuman(isExpanded),\n      signature: this.signature.toHex(),\n      signer: this.signer.toHuman(isExpanded),\n      tip: this.tip.toHuman(isExpanded)\n    } : {});\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toHex();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'Extrinsic';\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value is not length-prefixed\n   */\n\n\n  toU8a(isBare) {\n    // we do not apply bare to the internal values, rather this only determines out length addition,\n    // where we strip all lengths this creates an extrinsic that cannot be decoded\n    const encoded = (0, _util.u8aConcat)(new Uint8Array([this.version]), this._raw.toU8a());\n    return isBare ? encoded : _Compact.default.addLengthPrefix(encoded);\n  }\n\n}\n\nexports.default = Extrinsic;"]},"metadata":{},"sourceType":"script"}