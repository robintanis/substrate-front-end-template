{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.currentPoints = currentPoints;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"../util\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nfunction retrievePointsPrev(api, currentElected) {\n  return api.query.staking.currentEraPointsEarned().pipe((0, _operators.map)(({\n    individual,\n    total\n  }) => api.registry.createType('EraRewardPoints', {\n    individual: new Map(individual.map(points => api.registry.createType('RewardPoint', points)).map((points, index) => [currentElected[index], points])),\n    total\n  })));\n}\n/**\n * @description Retrieve the staking overview, including elected and points earned\n */\n\n\nfunction currentPoints(instanceId, api) {\n  return (0, _util.memo)(instanceId, () => api.derive.staking.overview().pipe((0, _operators.switchMap)(({\n    activeEra,\n    nextElected\n  }) => api.query.staking.erasRewardPoints ? api.query.staking.erasRewardPoints(activeEra) : api.query.staking.currentEraPointsEarned ? retrievePointsPrev(api, nextElected) : (0, _rxjs.of)(api.registry.createType('EraRewardPoints')))));\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/api-derive/staking/currentPoints.js"],"names":["Object","defineProperty","exports","value","currentPoints","_rxjs","require","_operators","_util","retrievePointsPrev","api","currentElected","query","staking","currentEraPointsEarned","pipe","map","individual","total","registry","createType","Map","points","index","instanceId","memo","derive","overview","switchMap","activeEra","nextElected","erasRewardPoints","of"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,aAAR,GAAwBA,aAAxB;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AAEA,IAAIC,UAAU,GAAGD,OAAO,CAAC,gBAAD,CAAxB;;AAEA,IAAIE,KAAK,GAAGF,OAAO,CAAC,SAAD,CAAnB,C,CAEA;AACA;;;AACA,SAASG,kBAAT,CAA4BC,GAA5B,EAAiCC,cAAjC,EAAiD;AAC/C,SAAOD,GAAG,CAACE,KAAJ,CAAUC,OAAV,CAAkBC,sBAAlB,GAA2CC,IAA3C,CAAgD,CAAC,GAAGR,UAAU,CAACS,GAAf,EAAoB,CAAC;AAC1EC,IAAAA,UAD0E;AAE1EC,IAAAA;AAF0E,GAAD,KAGrER,GAAG,CAACS,QAAJ,CAAaC,UAAb,CAAwB,iBAAxB,EAA2C;AAC/CH,IAAAA,UAAU,EAAE,IAAII,GAAJ,CAAQJ,UAAU,CAACD,GAAX,CAAeM,MAAM,IAAIZ,GAAG,CAACS,QAAJ,CAAaC,UAAb,CAAwB,aAAxB,EAAuCE,MAAvC,CAAzB,EAAyEN,GAAzE,CAA6E,CAACM,MAAD,EAASC,KAAT,KAAmB,CAACZ,cAAc,CAACY,KAAD,CAAf,EAAwBD,MAAxB,CAAhG,CAAR,CADmC;AAE/CJ,IAAAA;AAF+C,GAA3C,CAHiD,CAAhD,CAAP;AAOD;AACD;AACA;AACA;;;AAGA,SAASd,aAAT,CAAuBoB,UAAvB,EAAmCd,GAAnC,EAAwC;AACtC,SAAO,CAAC,GAAGF,KAAK,CAACiB,IAAV,EAAgBD,UAAhB,EAA4B,MAAMd,GAAG,CAACgB,MAAJ,CAAWb,OAAX,CAAmBc,QAAnB,GAA8BZ,IAA9B,CAAmC,CAAC,GAAGR,UAAU,CAACqB,SAAf,EAA0B,CAAC;AACrGC,IAAAA,SADqG;AAErGC,IAAAA;AAFqG,GAAD,KAGhGpB,GAAG,CAACE,KAAJ,CAAUC,OAAV,CAAkBkB,gBAAlB,GAAqCrB,GAAG,CAACE,KAAJ,CAAUC,OAAV,CAAkBkB,gBAAlB,CAAmCF,SAAnC,CAArC,GAAqFnB,GAAG,CAACE,KAAJ,CAAUC,OAAV,CAAkBC,sBAAlB,GAA2CL,kBAAkB,CAACC,GAAD,EAAMoB,WAAN,CAA7D,GAAkF,CAAC,GAAGzB,KAAK,CAAC2B,EAAV,EAActB,GAAG,CAACS,QAAJ,CAAaC,UAAb,CAAwB,iBAAxB,CAAd,CAHjG,CAAnC,CAAlC,CAAP;AAID","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.currentPoints = currentPoints;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"../util\");\n\n// Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction retrievePointsPrev(api, currentElected) {\n  return api.query.staking.currentEraPointsEarned().pipe((0, _operators.map)(({\n    individual,\n    total\n  }) => api.registry.createType('EraRewardPoints', {\n    individual: new Map(individual.map(points => api.registry.createType('RewardPoint', points)).map((points, index) => [currentElected[index], points])),\n    total\n  })));\n}\n/**\n * @description Retrieve the staking overview, including elected and points earned\n */\n\n\nfunction currentPoints(instanceId, api) {\n  return (0, _util.memo)(instanceId, () => api.derive.staking.overview().pipe((0, _operators.switchMap)(({\n    activeEra,\n    nextElected\n  }) => api.query.staking.erasRewardPoints ? api.query.staking.erasRewardPoints(activeEra) : api.query.staking.currentEraPointsEarned ? retrievePointsPrev(api, nextElected) : (0, _rxjs.of)(api.registry.createType('EraRewardPoints')))));\n}"]},"metadata":{},"sourceType":"script"}