{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = secp256k1Sign;\n\nvar _elliptic = _interopRequireDefault(require(\"elliptic\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _hasher = _interopRequireDefault(require(\"./hasher\")); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nconst EC = _elliptic.default.ec;\nconst ec = new EC('secp256k1');\n/**\n * @name secp256k1Sign\n * @description Returns message signature of `message`, using the supplied pair\n */\n\nfunction secp256k1Sign(message, {\n  secretKey\n}, hashType = 'blake2') {\n  (0, _util.assert)((secretKey === null || secretKey === void 0 ? void 0 : secretKey.length) === 32, 'Expected valid secp256k1 secretKey, 32-bytes');\n  const key = ec.keyFromPrivate(secretKey);\n  const ecsig = key.sign((0, _hasher.default)(hashType, message));\n  return (0, _util.u8aConcat)((0, _util.bnToU8a)(ecsig.r, {\n    bitLength: 256,\n    isLe: false\n  }), (0, _util.bnToU8a)(ecsig.s, {\n    bitLength: 256,\n    isLe: false\n  }), new Uint8Array([ecsig.recoveryParam || 0]));\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/util-crypto/secp256k1/sign.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","secp256k1Sign","_elliptic","_util","_hasher","EC","ec","message","secretKey","hashType","assert","length","key","keyFromPrivate","ecsig","sign","u8aConcat","bnToU8a","r","bitLength","isLe","s","Uint8Array","recoveryParam"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,aAAlB;;AAEA,IAAIC,SAAS,GAAGR,sBAAsB,CAACC,OAAO,CAAC,UAAD,CAAR,CAAtC;;AAEA,IAAIQ,KAAK,GAAGR,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIS,OAAO,GAAGV,sBAAsB,CAACC,OAAO,CAAC,UAAD,CAAR,CAApC,C,CAEA;AACA;;;AACA,MAAMU,EAAE,GAAGH,SAAS,CAACF,OAAV,CAAkBM,EAA7B;AACA,MAAMA,EAAE,GAAG,IAAID,EAAJ,CAAO,WAAP,CAAX;AACA;AACA;AACA;AACA;;AAEA,SAASJ,aAAT,CAAuBM,OAAvB,EAAgC;AAC9BC,EAAAA;AAD8B,CAAhC,EAEGC,QAAQ,GAAG,QAFd,EAEwB;AACtB,GAAC,GAAGN,KAAK,CAACO,MAAV,EAAkB,CAACF,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACG,MAAjE,MAA6E,EAA/F,EAAmG,8CAAnG;AACA,QAAMC,GAAG,GAAGN,EAAE,CAACO,cAAH,CAAkBL,SAAlB,CAAZ;AACA,QAAMM,KAAK,GAAGF,GAAG,CAACG,IAAJ,CAAS,CAAC,GAAGX,OAAO,CAACJ,OAAZ,EAAqBS,QAArB,EAA+BF,OAA/B,CAAT,CAAd;AACA,SAAO,CAAC,GAAGJ,KAAK,CAACa,SAAV,EAAqB,CAAC,GAAGb,KAAK,CAACc,OAAV,EAAmBH,KAAK,CAACI,CAAzB,EAA4B;AACtDC,IAAAA,SAAS,EAAE,GAD2C;AAEtDC,IAAAA,IAAI,EAAE;AAFgD,GAA5B,CAArB,EAGH,CAAC,GAAGjB,KAAK,CAACc,OAAV,EAAmBH,KAAK,CAACO,CAAzB,EAA4B;AAC9BF,IAAAA,SAAS,EAAE,GADmB;AAE9BC,IAAAA,IAAI,EAAE;AAFwB,GAA5B,CAHG,EAMH,IAAIE,UAAJ,CAAe,CAACR,KAAK,CAACS,aAAN,IAAuB,CAAxB,CAAf,CANG,CAAP;AAOD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = secp256k1Sign;\n\nvar _elliptic = _interopRequireDefault(require(\"elliptic\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _hasher = _interopRequireDefault(require(\"./hasher\"));\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst EC = _elliptic.default.ec;\nconst ec = new EC('secp256k1');\n/**\n * @name secp256k1Sign\n * @description Returns message signature of `message`, using the supplied pair\n */\n\nfunction secp256k1Sign(message, {\n  secretKey\n}, hashType = 'blake2') {\n  (0, _util.assert)((secretKey === null || secretKey === void 0 ? void 0 : secretKey.length) === 32, 'Expected valid secp256k1 secretKey, 32-bytes');\n  const key = ec.keyFromPrivate(secretKey);\n  const ecsig = key.sign((0, _hasher.default)(hashType, message));\n  return (0, _util.u8aConcat)((0, _util.bnToU8a)(ecsig.r, {\n    bitLength: 256,\n    isLe: false\n  }), (0, _util.bnToU8a)(ecsig.s, {\n    bitLength: 256,\n    isLe: false\n  }), new Uint8Array([ecsig.recoveryParam || 0]));\n}"]},"metadata":{},"sourceType":"script"}