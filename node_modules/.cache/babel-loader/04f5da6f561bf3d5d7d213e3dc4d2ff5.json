{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = naclSign;\n\nvar _tweetnacl = _interopRequireDefault(require(\"tweetnacl\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _wasmCrypto = require(\"@polkadot/wasm-crypto\"); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name naclSign\n * @summary Signs a message using the supplied secretKey\n * @description\n * Returns message signature of `message`, using the `secretKey`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { naclSign } from '@polkadot/util-crypto';\n *\n * naclSign([...], [...]); // => [...]\n * ```\n */\n\n\nfunction naclSign(message, {\n  publicKey,\n  secretKey\n}) {\n  (0, _util.assert)(secretKey, 'Expected a valid secretKey');\n  const messageU8a = (0, _util.u8aToU8a)(message);\n  return (0, _wasmCrypto.isReady)() ? (0, _wasmCrypto.ed25519Sign)(publicKey, secretKey.subarray(0, 32), messageU8a) : _tweetnacl.default.sign.detached(messageU8a, secretKey);\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/util-crypto/nacl/sign.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","naclSign","_tweetnacl","_util","_wasmCrypto","message","publicKey","secretKey","assert","messageU8a","u8aToU8a","isReady","ed25519Sign","subarray","sign","detached"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,QAAlB;;AAEA,IAAIC,UAAU,GAAGR,sBAAsB,CAACC,OAAO,CAAC,WAAD,CAAR,CAAvC;;AAEA,IAAIQ,KAAK,GAAGR,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIS,WAAW,GAAGT,OAAO,CAAC,uBAAD,CAAzB,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,QAAT,CAAkBI,OAAlB,EAA2B;AACzBC,EAAAA,SADyB;AAEzBC,EAAAA;AAFyB,CAA3B,EAGG;AACD,GAAC,GAAGJ,KAAK,CAACK,MAAV,EAAkBD,SAAlB,EAA6B,4BAA7B;AACA,QAAME,UAAU,GAAG,CAAC,GAAGN,KAAK,CAACO,QAAV,EAAoBL,OAApB,CAAnB;AACA,SAAO,CAAC,GAAGD,WAAW,CAACO,OAAhB,MAA6B,CAAC,GAAGP,WAAW,CAACQ,WAAhB,EAA6BN,SAA7B,EAAwCC,SAAS,CAACM,QAAV,CAAmB,CAAnB,EAAsB,EAAtB,CAAxC,EAAmEJ,UAAnE,CAA7B,GAA8GP,UAAU,CAACF,OAAX,CAAmBc,IAAnB,CAAwBC,QAAxB,CAAiCN,UAAjC,EAA6CF,SAA7C,CAArH;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = naclSign;\n\nvar _tweetnacl = _interopRequireDefault(require(\"tweetnacl\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _wasmCrypto = require(\"@polkadot/wasm-crypto\");\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name naclSign\n * @summary Signs a message using the supplied secretKey\n * @description\n * Returns message signature of `message`, using the `secretKey`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { naclSign } from '@polkadot/util-crypto';\n *\n * naclSign([...], [...]); // => [...]\n * ```\n */\nfunction naclSign(message, {\n  publicKey,\n  secretKey\n}) {\n  (0, _util.assert)(secretKey, 'Expected a valid secretKey');\n  const messageU8a = (0, _util.u8aToU8a)(message);\n  return (0, _wasmCrypto.isReady)() ? (0, _wasmCrypto.ed25519Sign)(publicKey, secretKey.subarray(0, 32), messageU8a) : _tweetnacl.default.sign.detached(messageU8a, secretKey);\n}"]},"metadata":{},"sourceType":"script"}