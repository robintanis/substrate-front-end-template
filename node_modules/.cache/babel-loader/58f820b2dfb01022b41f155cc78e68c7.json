{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _bn = _interopRequireDefault(require(\"bn.js\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Raw = _interopRequireDefault(require(\"./Raw\"));\n\nvar _utils = require(\"./utils\"); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nfunction encodeSet(setValues, value) {\n  return value.reduce((result, value) => {\n    return result.or((0, _util.bnToBn)(setValues[value] || 0));\n  }, new _bn.default(0));\n}\n/** @internal */\n\n\nfunction decodeSetArray(setValues, value) {\n  return value.reduce((result, key) => {\n    (0, _util.assert)(!(0, _util.isUndefined)(setValues[key]), `Set: Invalid key '${key}' passed to Set, allowed ${Object.keys(setValues).join(', ')}`);\n    result.push(key);\n    return result;\n  }, []);\n}\n/** @internal */\n\n\nfunction decodeSetNumber(setValues, _value) {\n  const bn = (0, _util.bnToBn)(_value);\n  const result = Object.keys(setValues).reduce((result, key) => {\n    if (bn.and((0, _util.bnToBn)(setValues[key])).eq((0, _util.bnToBn)(setValues[key]))) {\n      result.push(key);\n    }\n\n    return result;\n  }, []);\n  const computed = encodeSet(setValues, result);\n  (0, _util.assert)(bn.eq(computed), `Set: Mismatch decoding '${bn.toString()}', computed as '${computed.toString()}' with ${result.join(', ')}`);\n  return result;\n}\n/** @internal */\n\n\nfunction decodeSet(setValues, value = 0, bitLength) {\n  (0, _util.assert)(bitLength % 8 === 0, `Expected valid bitLength, power of 8, found ${bitLength}`);\n  const byteLength = bitLength / 8;\n\n  if ((0, _util.isString)(value)) {\n    return decodeSet(setValues, (0, _util.u8aToU8a)(value), byteLength);\n  } else if ((0, _util.isU8a)(value)) {\n    return value.length === 0 ? [] : decodeSetNumber(setValues, (0, _util.u8aToBn)(value.subarray(0, byteLength), {\n      isLe: true\n    }));\n  } else if (value instanceof Set || Array.isArray(value)) {\n    const input = Array.isArray(value) ? value : [...value.values()];\n    return decodeSetArray(setValues, input);\n  }\n\n  return decodeSetNumber(setValues, value);\n}\n/**\n * @name Set\n * @description\n * An Set is an array of string values, represented an an encoded type by\n * a bitwise representation of the values.\n */\n// FIXME This is a prime candidate to extend the JavaScript built-in Set\n\n\nvar _allowed = (0, _classPrivateFieldLooseKey2.default)(\"allowed\");\n\nvar _byteLength = (0, _classPrivateFieldLooseKey2.default)(\"byteLength\");\n\nclass CodecSet extends Set {\n  constructor(registry, setValues, value, bitLength = 8) {\n    super(decodeSet(setValues, value, bitLength));\n    this.registry = void 0;\n    Object.defineProperty(this, _allowed, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _byteLength, {\n      writable: true,\n      value: void 0\n    });\n\n    this.add = key => {\n      // ^^^ add = () property done to assign this instance's this, otherwise Set.add creates \"some\" chaos\n      // we have the isUndefined(this._setValues) in here as well, add is used internally\n      // in the Set constructor (so it is undefined at this point, and should allow)\n      (0, _util.assert)((0, _util.isUndefined)((0, _classPrivateFieldLooseBase2.default)(this, _allowed)[_allowed]) || !(0, _util.isUndefined)((0, _classPrivateFieldLooseBase2.default)(this, _allowed)[_allowed][key]), `Set: Invalid key '${key}' on add`);\n      super.add(key);\n      return this;\n    };\n\n    this.registry = registry;\n    (0, _classPrivateFieldLooseBase2.default)(this, _allowed)[_allowed] = setValues;\n    (0, _classPrivateFieldLooseBase2.default)(this, _byteLength)[_byteLength] = bitLength / 8;\n  }\n\n  static with(values, bitLength) {\n    return class extends CodecSet {\n      constructor(registry, value) {\n        super(registry, values, value, bitLength);\n        Object.keys(values).forEach(_key => {\n          const name = (0, _util.stringUpperFirst)((0, _util.stringCamelCase)(_key));\n          const iskey = `is${name}`; // do not clobber existing properties on the object\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n          if ((0, _util.isUndefined)(this[iskey])) {\n            Object.defineProperty(this, iskey, {\n              enumerable: true,\n              get: () => this.strings.includes(_key)\n            });\n          }\n        });\n      }\n\n    };\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _byteLength)[_byteLength];\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return new _Raw.default(this.registry, this.registry.hash(this.toU8a()));\n  }\n  /**\n   * @description true is the Set contains no values\n   */\n\n\n  get isEmpty() {\n    return this.size === 0;\n  }\n  /**\n   * @description The actual set values as a string[]\n   */\n\n\n  get strings() {\n    return [...super.values()];\n  }\n  /**\n   * @description The encoded value for the set members\n   */\n\n\n  get valueEncoded() {\n    return encodeSet((0, _classPrivateFieldLooseBase2.default)(this, _allowed)[_allowed], this.strings);\n  }\n  /**\n   * @description adds a value to the Set (extended to allow for validity checking)\n   */\n\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    if (Array.isArray(other)) {\n      // we don't actually care about the order, sort the values\n      return (0, _utils.compareArray)(this.strings.sort(), other.sort());\n    } else if (other instanceof Set) {\n      return this.eq([...other.values()]);\n    } else if ((0, _util.isNumber)(other) || (0, _util.isBn)(other)) {\n      return this.valueEncoded.eq((0, _util.bnToBn)(other));\n    }\n\n    return false;\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    return (0, _util.u8aToHex)(this.toU8a());\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.strings;\n  }\n  /**\n   * @description The encoded value for the set members\n   */\n\n\n  toNumber() {\n    return this.valueEncoded.toNumber();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return JSON.stringify({\n      _set: (0, _classPrivateFieldLooseBase2.default)(this, _allowed)[_allowed]\n    });\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return `[${this.strings.join(', ')}]`;\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toU8a(isBare) {\n    return (0, _util.bnToU8a)(this.valueEncoded, {\n      bitLength: (0, _classPrivateFieldLooseBase2.default)(this, _byteLength)[_byteLength] * 8,\n      isLe: true\n    });\n  }\n\n}\n\nexports.default = CodecSet;","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/types/codec/Set.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_classPrivateFieldLooseBase2","_classPrivateFieldLooseKey2","_bn","_util","_Raw","_utils","encodeSet","setValues","reduce","result","or","bnToBn","decodeSetArray","key","assert","isUndefined","keys","join","push","decodeSetNumber","_value","bn","and","eq","computed","toString","decodeSet","bitLength","byteLength","isString","u8aToU8a","isU8a","length","u8aToBn","subarray","isLe","Set","Array","isArray","input","values","_allowed","_byteLength","CodecSet","constructor","registry","writable","add","with","forEach","_key","name","stringUpperFirst","stringCamelCase","iskey","enumerable","get","strings","includes","encodedLength","hash","toU8a","isEmpty","size","valueEncoded","other","compareArray","sort","isNumber","isBn","toHex","u8aToHex","toHuman","toJSON","toNumber","toRawType","JSON","stringify","_set","isBare","bnToU8a"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _bn = _interopRequireDefault(require(\"bn.js\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Raw = _interopRequireDefault(require(\"./Raw\"));\n\nvar _utils = require(\"./utils\");\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction encodeSet(setValues, value) {\n  return value.reduce((result, value) => {\n    return result.or((0, _util.bnToBn)(setValues[value] || 0));\n  }, new _bn.default(0));\n}\n/** @internal */\n\n\nfunction decodeSetArray(setValues, value) {\n  return value.reduce((result, key) => {\n    (0, _util.assert)(!(0, _util.isUndefined)(setValues[key]), `Set: Invalid key '${key}' passed to Set, allowed ${Object.keys(setValues).join(', ')}`);\n    result.push(key);\n    return result;\n  }, []);\n}\n/** @internal */\n\n\nfunction decodeSetNumber(setValues, _value) {\n  const bn = (0, _util.bnToBn)(_value);\n  const result = Object.keys(setValues).reduce((result, key) => {\n    if (bn.and((0, _util.bnToBn)(setValues[key])).eq((0, _util.bnToBn)(setValues[key]))) {\n      result.push(key);\n    }\n\n    return result;\n  }, []);\n  const computed = encodeSet(setValues, result);\n  (0, _util.assert)(bn.eq(computed), `Set: Mismatch decoding '${bn.toString()}', computed as '${computed.toString()}' with ${result.join(', ')}`);\n  return result;\n}\n/** @internal */\n\n\nfunction decodeSet(setValues, value = 0, bitLength) {\n  (0, _util.assert)(bitLength % 8 === 0, `Expected valid bitLength, power of 8, found ${bitLength}`);\n  const byteLength = bitLength / 8;\n\n  if ((0, _util.isString)(value)) {\n    return decodeSet(setValues, (0, _util.u8aToU8a)(value), byteLength);\n  } else if ((0, _util.isU8a)(value)) {\n    return value.length === 0 ? [] : decodeSetNumber(setValues, (0, _util.u8aToBn)(value.subarray(0, byteLength), {\n      isLe: true\n    }));\n  } else if (value instanceof Set || Array.isArray(value)) {\n    const input = Array.isArray(value) ? value : [...value.values()];\n    return decodeSetArray(setValues, input);\n  }\n\n  return decodeSetNumber(setValues, value);\n}\n/**\n * @name Set\n * @description\n * An Set is an array of string values, represented an an encoded type by\n * a bitwise representation of the values.\n */\n// FIXME This is a prime candidate to extend the JavaScript built-in Set\n\n\nvar _allowed = (0, _classPrivateFieldLooseKey2.default)(\"allowed\");\n\nvar _byteLength = (0, _classPrivateFieldLooseKey2.default)(\"byteLength\");\n\nclass CodecSet extends Set {\n  constructor(registry, setValues, value, bitLength = 8) {\n    super(decodeSet(setValues, value, bitLength));\n    this.registry = void 0;\n    Object.defineProperty(this, _allowed, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _byteLength, {\n      writable: true,\n      value: void 0\n    });\n\n    this.add = key => {\n      // ^^^ add = () property done to assign this instance's this, otherwise Set.add creates \"some\" chaos\n      // we have the isUndefined(this._setValues) in here as well, add is used internally\n      // in the Set constructor (so it is undefined at this point, and should allow)\n      (0, _util.assert)((0, _util.isUndefined)((0, _classPrivateFieldLooseBase2.default)(this, _allowed)[_allowed]) || !(0, _util.isUndefined)((0, _classPrivateFieldLooseBase2.default)(this, _allowed)[_allowed][key]), `Set: Invalid key '${key}' on add`);\n      super.add(key);\n      return this;\n    };\n\n    this.registry = registry;\n    (0, _classPrivateFieldLooseBase2.default)(this, _allowed)[_allowed] = setValues;\n    (0, _classPrivateFieldLooseBase2.default)(this, _byteLength)[_byteLength] = bitLength / 8;\n  }\n\n  static with(values, bitLength) {\n    return class extends CodecSet {\n      constructor(registry, value) {\n        super(registry, values, value, bitLength);\n        Object.keys(values).forEach(_key => {\n          const name = (0, _util.stringUpperFirst)((0, _util.stringCamelCase)(_key));\n          const iskey = `is${name}`; // do not clobber existing properties on the object\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n          if ((0, _util.isUndefined)(this[iskey])) {\n            Object.defineProperty(this, iskey, {\n              enumerable: true,\n              get: () => this.strings.includes(_key)\n            });\n          }\n        });\n      }\n\n    };\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _byteLength)[_byteLength];\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return new _Raw.default(this.registry, this.registry.hash(this.toU8a()));\n  }\n  /**\n   * @description true is the Set contains no values\n   */\n\n\n  get isEmpty() {\n    return this.size === 0;\n  }\n  /**\n   * @description The actual set values as a string[]\n   */\n\n\n  get strings() {\n    return [...super.values()];\n  }\n  /**\n   * @description The encoded value for the set members\n   */\n\n\n  get valueEncoded() {\n    return encodeSet((0, _classPrivateFieldLooseBase2.default)(this, _allowed)[_allowed], this.strings);\n  }\n  /**\n   * @description adds a value to the Set (extended to allow for validity checking)\n   */\n\n\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n  eq(other) {\n    if (Array.isArray(other)) {\n      // we don't actually care about the order, sort the values\n      return (0, _utils.compareArray)(this.strings.sort(), other.sort());\n    } else if (other instanceof Set) {\n      return this.eq([...other.values()]);\n    } else if ((0, _util.isNumber)(other) || (0, _util.isBn)(other)) {\n      return this.valueEncoded.eq((0, _util.bnToBn)(other));\n    }\n\n    return false;\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    return (0, _util.u8aToHex)(this.toU8a());\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.strings;\n  }\n  /**\n   * @description The encoded value for the set members\n   */\n\n\n  toNumber() {\n    return this.valueEncoded.toNumber();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return JSON.stringify({\n      _set: (0, _classPrivateFieldLooseBase2.default)(this, _allowed)[_allowed]\n    });\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return `[${this.strings.join(', ')}]`;\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toU8a(isBare) {\n    return (0, _util.bnToU8a)(this.valueEncoded, {\n      bitLength: (0, _classPrivateFieldLooseBase2.default)(this, _byteLength)[_byteLength] * 8,\n      isLe: true\n    });\n  }\n\n}\n\nexports.default = CodecSet;"]},"metadata":{},"sourceType":"script"}