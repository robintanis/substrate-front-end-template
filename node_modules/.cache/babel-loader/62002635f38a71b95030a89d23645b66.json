{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utilCrypto = require(\"@polkadot/util-crypto\");\n\nvar _U8aFixed = _interopRequireDefault(require(\"../codec/U8aFixed\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\n\n\nfunction decodeAccountId(value) {\n  if ((0, _util.isU8a)(value) || Array.isArray(value)) {\n    return (0, _util.u8aToU8a)(value);\n  } else if ((0, _util.isHex)(value) || (0, _utilCrypto.isEthereumAddress)(value)) {\n    return (0, _util.hexToU8a)(value.toString());\n  } else if ((0, _util.isString)(value)) {\n    return (0, _util.u8aToU8a)(value.toString());\n  }\n\n  return value;\n}\n/**\n * @name EthereumAccountId\n * @description\n * A wrapper around an Ethereum-compatible AccountId. Since we are dealing with\n * underlying addresses (20 bytes in length), we extend from U8aFixed which is\n * just a Uint8Array wrapper with a fixed length.\n */\n\n\nclass AccountId extends _U8aFixed.default {\n  constructor(registry, value = new Uint8Array()) {\n    super(registry, decodeAccountId(value), 160);\n  }\n\n  static encode(value) {\n    return (0, _utilCrypto.ethereumEncode)(value);\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return super.eq(decodeAccountId(other));\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return AccountId.encode(this);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'AccountId';\n  }\n\n}\n\nexports.default = AccountId;","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/types/ethereum/AccountId.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_util","_utilCrypto","_U8aFixed","decodeAccountId","isU8a","Array","isArray","u8aToU8a","isHex","isEthereumAddress","hexToU8a","toString","isString","AccountId","constructor","registry","Uint8Array","encode","ethereumEncode","eq","other","toHuman","toJSON","toRawType"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,KAAK,GAAGN,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIO,WAAW,GAAGP,OAAO,CAAC,uBAAD,CAAzB;;AAEA,IAAIQ,SAAS,GAAGT,sBAAsB,CAACC,OAAO,CAAC,mBAAD,CAAR,CAAtC,C,CAEA;AACA;;AAEA;;;AACA,SAASS,eAAT,CAAyBL,KAAzB,EAAgC;AAC9B,MAAI,CAAC,GAAGE,KAAK,CAACI,KAAV,EAAiBN,KAAjB,KAA2BO,KAAK,CAACC,OAAN,CAAcR,KAAd,CAA/B,EAAqD;AACnD,WAAO,CAAC,GAAGE,KAAK,CAACO,QAAV,EAAoBT,KAApB,CAAP;AACD,GAFD,MAEO,IAAI,CAAC,GAAGE,KAAK,CAACQ,KAAV,EAAiBV,KAAjB,KAA2B,CAAC,GAAGG,WAAW,CAACQ,iBAAhB,EAAmCX,KAAnC,CAA/B,EAA0E;AAC/E,WAAO,CAAC,GAAGE,KAAK,CAACU,QAAV,EAAoBZ,KAAK,CAACa,QAAN,EAApB,CAAP;AACD,GAFM,MAEA,IAAI,CAAC,GAAGX,KAAK,CAACY,QAAV,EAAoBd,KAApB,CAAJ,EAAgC;AACrC,WAAO,CAAC,GAAGE,KAAK,CAACO,QAAV,EAAoBT,KAAK,CAACa,QAAN,EAApB,CAAP;AACD;;AAED,SAAOb,KAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,MAAMe,SAAN,SAAwBX,SAAS,CAACH,OAAlC,CAA0C;AACxCe,EAAAA,WAAW,CAACC,QAAD,EAAWjB,KAAK,GAAG,IAAIkB,UAAJ,EAAnB,EAAqC;AAC9C,UAAMD,QAAN,EAAgBZ,eAAe,CAACL,KAAD,CAA/B,EAAwC,GAAxC;AACD;;AAED,SAAOmB,MAAP,CAAcnB,KAAd,EAAqB;AACnB,WAAO,CAAC,GAAGG,WAAW,CAACiB,cAAhB,EAAgCpB,KAAhC,CAAP;AACD;AACD;AACF;AACA;;;AAGEqB,EAAAA,EAAE,CAACC,KAAD,EAAQ;AACR,WAAO,MAAMD,EAAN,CAAShB,eAAe,CAACiB,KAAD,CAAxB,CAAP;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKC,MAAL,EAAP;AACD;AACD;AACF;AACA;;;AAGEA,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKX,QAAL,EAAP;AACD;AACD;AACF;AACA;;;AAGEA,EAAAA,QAAQ,GAAG;AACT,WAAOE,SAAS,CAACI,MAAV,CAAiB,IAAjB,CAAP;AACD;AACD;AACF;AACA;;;AAGEM,EAAAA,SAAS,GAAG;AACV,WAAO,WAAP;AACD;;AA/CuC;;AAmD1C1B,OAAO,CAACE,OAAR,GAAkBc,SAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utilCrypto = require(\"@polkadot/util-crypto\");\n\nvar _U8aFixed = _interopRequireDefault(require(\"../codec/U8aFixed\"));\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\nfunction decodeAccountId(value) {\n  if ((0, _util.isU8a)(value) || Array.isArray(value)) {\n    return (0, _util.u8aToU8a)(value);\n  } else if ((0, _util.isHex)(value) || (0, _utilCrypto.isEthereumAddress)(value)) {\n    return (0, _util.hexToU8a)(value.toString());\n  } else if ((0, _util.isString)(value)) {\n    return (0, _util.u8aToU8a)(value.toString());\n  }\n\n  return value;\n}\n/**\n * @name EthereumAccountId\n * @description\n * A wrapper around an Ethereum-compatible AccountId. Since we are dealing with\n * underlying addresses (20 bytes in length), we extend from U8aFixed which is\n * just a Uint8Array wrapper with a fixed length.\n */\n\n\nclass AccountId extends _U8aFixed.default {\n  constructor(registry, value = new Uint8Array()) {\n    super(registry, decodeAccountId(value), 160);\n  }\n\n  static encode(value) {\n    return (0, _utilCrypto.ethereumEncode)(value);\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return super.eq(decodeAccountId(other));\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return AccountId.encode(this);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'AccountId';\n  }\n\n}\n\nexports.default = AccountId;"]},"metadata":{},"sourceType":"script"}