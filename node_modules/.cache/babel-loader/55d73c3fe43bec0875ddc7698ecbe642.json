{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.electedInfo = electedInfo;\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"../util\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nfunction electedInfo(instanceId, api) {\n  return (0, _util.memo)(instanceId, () => api.derive.staking.validators().pipe((0, _operators.switchMap)(({\n    nextElected\n  }) => api.derive.staking.queryMulti(nextElected).pipe((0, _operators.map)(info => ({\n    info,\n    nextElected\n  }))))));\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/api-derive/staking/electedInfo.js"],"names":["Object","defineProperty","exports","value","electedInfo","_operators","require","_util","instanceId","api","memo","derive","staking","validators","pipe","switchMap","nextElected","queryMulti","map","info"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,WAAR,GAAsBA,WAAtB;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,gBAAD,CAAxB;;AAEA,IAAIC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAAnB,C,CAEA;AACA;;;AACA,SAASF,WAAT,CAAqBI,UAArB,EAAiCC,GAAjC,EAAsC;AACpC,SAAO,CAAC,GAAGF,KAAK,CAACG,IAAV,EAAgBF,UAAhB,EAA4B,MAAMC,GAAG,CAACE,MAAJ,CAAWC,OAAX,CAAmBC,UAAnB,GAAgCC,IAAhC,CAAqC,CAAC,GAAGT,UAAU,CAACU,SAAf,EAA0B,CAAC;AACvGC,IAAAA;AADuG,GAAD,KAElGP,GAAG,CAACE,MAAJ,CAAWC,OAAX,CAAmBK,UAAnB,CAA8BD,WAA9B,EAA2CF,IAA3C,CAAgD,CAAC,GAAGT,UAAU,CAACa,GAAf,EAAoBC,IAAI,KAAK;AACjFA,IAAAA,IADiF;AAEjFH,IAAAA;AAFiF,GAAL,CAAxB,CAAhD,CAFwE,CAArC,CAAlC,CAAP;AAMD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.electedInfo = electedInfo;\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"../util\");\n\n// Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction electedInfo(instanceId, api) {\n  return (0, _util.memo)(instanceId, () => api.derive.staking.validators().pipe((0, _operators.switchMap)(({\n    nextElected\n  }) => api.derive.staking.queryMulti(nextElected).pipe((0, _operators.map)(info => ({\n    info,\n    nextElected\n  }))))));\n}"]},"metadata":{},"sourceType":"script"}