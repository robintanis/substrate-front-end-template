{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Compact = _interopRequireDefault(require(\"../codec/Compact\"));\n\nvar _Raw = _interopRequireDefault(require(\"../codec/Raw\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nconst MAX_LENGTH = 128 * 1024;\n/** @internal */\n\nfunction decodeText(value) {\n  if ((0, _util.isHex)(value)) {\n    return (0, _util.u8aToString)((0, _util.hexToU8a)(value.toString()));\n  } else if (value instanceof Uint8Array) {\n    if (!value.length) {\n      return '';\n    } // for Raw, the internal buffer does not have an internal length\n    // (the same applies in e.g. Bytes, where length is added at encoding-time)\n\n\n    if (value instanceof _Raw.default) {\n      return (0, _util.u8aToString)(value);\n    }\n\n    const [offset, length] = _Compact.default.decodeU8a(value);\n\n    const total = offset + length.toNumber();\n    (0, _util.assert)(length.lten(MAX_LENGTH), `Text length ${length.toString()} exceeds ${MAX_LENGTH}`);\n    (0, _util.assert)(total <= value.length, `Text: required length less than remainder, expected at least ${total}, found ${value.length}`);\n    return (0, _util.u8aToString)(value.subarray(offset, total));\n  }\n\n  return value ? value.toString() : '';\n}\n/**\n * @name Text\n * @description\n * This is a string wrapper, along with the length. It is used both for strings as well\n * as items such as documentation. It simply extends the standard JS `String` built-in\n * object, inheriting all methods exposed from `String`.\n * @noInheritDoc\n */\n// TODO\n//   - Strings should probably be trimmed (docs do come through with extra padding)\n\n\nvar _override = (0, _classPrivateFieldLooseKey2.default)(\"override\");\n\nclass Text extends String {\n  constructor(registry, value) {\n    super(decodeText(value));\n    this.registry = void 0;\n    Object.defineProperty(this, _override, {\n      writable: true,\n      value: null\n    });\n    this.registry = registry;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.createType('H256', this.registry.hash(this.toU8a()));\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return this.length === 0;\n  }\n  /**\n   * @description The length of the value\n   */\n\n\n  get length() {\n    // only included here since we ignore inherited docs\n    return super.length;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return (0, _util.isString)(other) ? this.toString() === other.toString() : false;\n  }\n  /**\n   * @description Set an override value for this\n   */\n\n\n  setOverride(override) {\n    (0, _classPrivateFieldLooseBase2.default)(this, _override)[_override] = override;\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    // like  with Vec<u8>, when we are encoding to hex, we don't actually add\n    // the length prefix (it is already implied by the actual string length)\n    return (0, _util.u8aToHex)(this.toU8a(true));\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'Text';\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _override)[_override] || super.toString();\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    // NOTE Here we use the super toString (we are not taking overrides into account,\n    // rather encoding the original value the string was constructed with)\n    const encoded = (0, _util.stringToU8a)(super.toString());\n    return isBare ? encoded : _Compact.default.addLengthPrefix(encoded);\n  }\n\n}\n\nexports.default = Text;","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/types/primitive/Text.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_classPrivateFieldLooseBase2","_classPrivateFieldLooseKey2","_util","_Compact","_Raw","MAX_LENGTH","decodeText","isHex","u8aToString","hexToU8a","toString","Uint8Array","length","offset","decodeU8a","total","toNumber","assert","lten","subarray","_override","Text","String","constructor","registry","writable","encodedLength","toU8a","hash","createType","isEmpty","eq","other","isString","setOverride","override","toHex","u8aToHex","toHuman","toJSON","toRawType","isBare","encoded","stringToU8a","addLengthPrefix"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Compact = _interopRequireDefault(require(\"../codec/Compact\"));\n\nvar _Raw = _interopRequireDefault(require(\"../codec/Raw\"));\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst MAX_LENGTH = 128 * 1024;\n/** @internal */\n\nfunction decodeText(value) {\n  if ((0, _util.isHex)(value)) {\n    return (0, _util.u8aToString)((0, _util.hexToU8a)(value.toString()));\n  } else if (value instanceof Uint8Array) {\n    if (!value.length) {\n      return '';\n    } // for Raw, the internal buffer does not have an internal length\n    // (the same applies in e.g. Bytes, where length is added at encoding-time)\n\n\n    if (value instanceof _Raw.default) {\n      return (0, _util.u8aToString)(value);\n    }\n\n    const [offset, length] = _Compact.default.decodeU8a(value);\n\n    const total = offset + length.toNumber();\n    (0, _util.assert)(length.lten(MAX_LENGTH), `Text length ${length.toString()} exceeds ${MAX_LENGTH}`);\n    (0, _util.assert)(total <= value.length, `Text: required length less than remainder, expected at least ${total}, found ${value.length}`);\n    return (0, _util.u8aToString)(value.subarray(offset, total));\n  }\n\n  return value ? value.toString() : '';\n}\n/**\n * @name Text\n * @description\n * This is a string wrapper, along with the length. It is used both for strings as well\n * as items such as documentation. It simply extends the standard JS `String` built-in\n * object, inheriting all methods exposed from `String`.\n * @noInheritDoc\n */\n// TODO\n//   - Strings should probably be trimmed (docs do come through with extra padding)\n\n\nvar _override = (0, _classPrivateFieldLooseKey2.default)(\"override\");\n\nclass Text extends String {\n  constructor(registry, value) {\n    super(decodeText(value));\n    this.registry = void 0;\n    Object.defineProperty(this, _override, {\n      writable: true,\n      value: null\n    });\n    this.registry = registry;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.createType('H256', this.registry.hash(this.toU8a()));\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return this.length === 0;\n  }\n  /**\n   * @description The length of the value\n   */\n\n\n  get length() {\n    // only included here since we ignore inherited docs\n    return super.length;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return (0, _util.isString)(other) ? this.toString() === other.toString() : false;\n  }\n  /**\n   * @description Set an override value for this\n   */\n\n\n  setOverride(override) {\n    (0, _classPrivateFieldLooseBase2.default)(this, _override)[_override] = override;\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    // like  with Vec<u8>, when we are encoding to hex, we don't actually add\n    // the length prefix (it is already implied by the actual string length)\n    return (0, _util.u8aToHex)(this.toU8a(true));\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'Text';\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _override)[_override] || super.toString();\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    // NOTE Here we use the super toString (we are not taking overrides into account,\n    // rather encoding the original value the string was constructed with)\n    const encoded = (0, _util.stringToU8a)(super.toString());\n    return isBare ? encoded : _Compact.default.addLengthPrefix(encoded);\n  }\n\n}\n\nexports.default = Text;"]},"metadata":{},"sourceType":"script"}