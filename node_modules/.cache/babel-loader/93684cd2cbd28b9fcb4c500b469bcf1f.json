{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = secp256k1Verify;\n\nvar _elliptic = _interopRequireDefault(require(\"elliptic\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _expand = _interopRequireDefault(require(\"./expand\"));\n\nvar _hasher = _interopRequireDefault(require(\"./hasher\")); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nconst EC = _elliptic.default.ec;\nconst ec = new EC('secp256k1');\n/**\n * @name secp256k1Verify\n * @description Verifies the signature of `message`, using the supplied pair\n */\n\nfunction secp256k1Verify(message, signature, address, hashType = 'blake2', isExpanded = false) {\n  const u8a = (0, _util.u8aToU8a)(signature);\n  (0, _util.assert)(u8a.length === 65, `Expected signature with 65 bytes, ${u8a.length} found instead`);\n  const publicKey = new Uint8Array( // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n  ec.recoverPubKey((0, _hasher.default)(hashType, message), {\n    r: u8a.slice(0, 32),\n    s: u8a.slice(32, 64)\n  }, u8a[64]).encodeCompressed());\n  return (0, _util.u8aEq)((0, _hasher.default)(hashType, isExpanded ? (0, _expand.default)(publicKey) : publicKey), (0, _util.u8aToU8a)(address));\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/util-crypto/secp256k1/verify.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","secp256k1Verify","_elliptic","_util","_expand","_hasher","EC","ec","message","signature","address","hashType","isExpanded","u8a","u8aToU8a","assert","length","publicKey","Uint8Array","recoverPubKey","r","slice","s","encodeCompressed","u8aEq"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,eAAlB;;AAEA,IAAIC,SAAS,GAAGR,sBAAsB,CAACC,OAAO,CAAC,UAAD,CAAR,CAAtC;;AAEA,IAAIQ,KAAK,GAAGR,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIS,OAAO,GAAGV,sBAAsB,CAACC,OAAO,CAAC,UAAD,CAAR,CAApC;;AAEA,IAAIU,OAAO,GAAGX,sBAAsB,CAACC,OAAO,CAAC,UAAD,CAAR,CAApC,C,CAEA;AACA;;;AACA,MAAMW,EAAE,GAAGJ,SAAS,CAACF,OAAV,CAAkBO,EAA7B;AACA,MAAMA,EAAE,GAAG,IAAID,EAAJ,CAAO,WAAP,CAAX;AACA;AACA;AACA;AACA;;AAEA,SAASL,eAAT,CAAyBO,OAAzB,EAAkCC,SAAlC,EAA6CC,OAA7C,EAAsDC,QAAQ,GAAG,QAAjE,EAA2EC,UAAU,GAAG,KAAxF,EAA+F;AAC7F,QAAMC,GAAG,GAAG,CAAC,GAAGV,KAAK,CAACW,QAAV,EAAoBL,SAApB,CAAZ;AACA,GAAC,GAAGN,KAAK,CAACY,MAAV,EAAkBF,GAAG,CAACG,MAAJ,KAAe,EAAjC,EAAsC,qCAAoCH,GAAG,CAACG,MAAO,gBAArF;AACA,QAAMC,SAAS,GAAG,IAAIC,UAAJ,EAAgB;AAClCX,EAAAA,EAAE,CAACY,aAAH,CAAiB,CAAC,GAAGd,OAAO,CAACL,OAAZ,EAAqBW,QAArB,EAA+BH,OAA/B,CAAjB,EAA0D;AACxDY,IAAAA,CAAC,EAAEP,GAAG,CAACQ,KAAJ,CAAU,CAAV,EAAa,EAAb,CADqD;AAExDC,IAAAA,CAAC,EAAET,GAAG,CAACQ,KAAJ,CAAU,EAAV,EAAc,EAAd;AAFqD,GAA1D,EAGGR,GAAG,CAAC,EAAD,CAHN,EAGYU,gBAHZ,EADkB,CAAlB;AAKA,SAAO,CAAC,GAAGpB,KAAK,CAACqB,KAAV,EAAiB,CAAC,GAAGnB,OAAO,CAACL,OAAZ,EAAqBW,QAArB,EAA+BC,UAAU,GAAG,CAAC,GAAGR,OAAO,CAACJ,OAAZ,EAAqBiB,SAArB,CAAH,GAAqCA,SAA9E,CAAjB,EAA2G,CAAC,GAAGd,KAAK,CAACW,QAAV,EAAoBJ,OAApB,CAA3G,CAAP;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = secp256k1Verify;\n\nvar _elliptic = _interopRequireDefault(require(\"elliptic\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _expand = _interopRequireDefault(require(\"./expand\"));\n\nvar _hasher = _interopRequireDefault(require(\"./hasher\"));\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst EC = _elliptic.default.ec;\nconst ec = new EC('secp256k1');\n/**\n * @name secp256k1Verify\n * @description Verifies the signature of `message`, using the supplied pair\n */\n\nfunction secp256k1Verify(message, signature, address, hashType = 'blake2', isExpanded = false) {\n  const u8a = (0, _util.u8aToU8a)(signature);\n  (0, _util.assert)(u8a.length === 65, `Expected signature with 65 bytes, ${u8a.length} found instead`);\n  const publicKey = new Uint8Array( // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n  ec.recoverPubKey((0, _hasher.default)(hashType, message), {\n    r: u8a.slice(0, 32),\n    s: u8a.slice(32, 64)\n  }, u8a[64]).encodeCompressed());\n  return (0, _util.u8aEq)((0, _hasher.default)(hashType, isExpanded ? (0, _expand.default)(publicKey) : publicKey), (0, _util.u8aToU8a)(address));\n}"]},"metadata":{},"sourceType":"script"}