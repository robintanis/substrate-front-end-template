{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _AbstractInt = _interopRequireWildcard(require(\"./AbstractInt\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name Int\n * @description\n * A generic signed integer codec. For Substrate all numbers are Little Endian encoded,\n * this handles the encoding and decoding of those numbers. Upon construction\n * the bitLength is provided and any additional use keeps the number to this\n * length. This extends `BN`, so all methods available on a normal `BN` object\n * is available here.\n * @noInheritDoc\n */\n\n\nclass Int extends _AbstractInt.default {\n  constructor(registry, value = 0, bitLength = _AbstractInt.DEFAULT_UINT_BITS, isHexJson = true) {\n    super(registry, true, value, bitLength, isHexJson);\n  }\n\n  static with(bitLength, typeName) {\n    return class extends Int {\n      constructor(registry, value) {\n        super(registry, value, bitLength);\n      }\n\n      toRawType() {\n        return typeName || super.toRawType();\n      }\n\n    };\n  }\n\n}\n\nexports.default = Int;","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/types/codec/Int.js"],"names":["_interopRequireWildcard","require","Object","defineProperty","exports","value","default","_AbstractInt","Int","constructor","registry","bitLength","DEFAULT_UINT_BITS","isHexJson","with","typeName","toRawType"],"mappings":"AAAA;;AAEA,IAAIA,uBAAuB,GAAGC,OAAO,CAAC,+CAAD,CAArC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,YAAY,GAAGP,uBAAuB,CAACC,OAAO,CAAC,eAAD,CAAR,CAA1C,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMO,GAAN,SAAkBD,YAAY,CAACD,OAA/B,CAAuC;AACrCG,EAAAA,WAAW,CAACC,QAAD,EAAWL,KAAK,GAAG,CAAnB,EAAsBM,SAAS,GAAGJ,YAAY,CAACK,iBAA/C,EAAkEC,SAAS,GAAG,IAA9E,EAAoF;AAC7F,UAAMH,QAAN,EAAgB,IAAhB,EAAsBL,KAAtB,EAA6BM,SAA7B,EAAwCE,SAAxC;AACD;;AAED,SAAOC,IAAP,CAAYH,SAAZ,EAAuBI,QAAvB,EAAiC;AAC/B,WAAO,cAAcP,GAAd,CAAkB;AACvBC,MAAAA,WAAW,CAACC,QAAD,EAAWL,KAAX,EAAkB;AAC3B,cAAMK,QAAN,EAAgBL,KAAhB,EAAuBM,SAAvB;AACD;;AAEDK,MAAAA,SAAS,GAAG;AACV,eAAOD,QAAQ,IAAI,MAAMC,SAAN,EAAnB;AACD;;AAPsB,KAAzB;AAUD;;AAhBoC;;AAoBvCZ,OAAO,CAACE,OAAR,GAAkBE,GAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _AbstractInt = _interopRequireWildcard(require(\"./AbstractInt\"));\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name Int\n * @description\n * A generic signed integer codec. For Substrate all numbers are Little Endian encoded,\n * this handles the encoding and decoding of those numbers. Upon construction\n * the bitLength is provided and any additional use keeps the number to this\n * length. This extends `BN`, so all methods available on a normal `BN` object\n * is available here.\n * @noInheritDoc\n */\nclass Int extends _AbstractInt.default {\n  constructor(registry, value = 0, bitLength = _AbstractInt.DEFAULT_UINT_BITS, isHexJson = true) {\n    super(registry, true, value, bitLength, isHexJson);\n  }\n\n  static with(bitLength, typeName) {\n    return class extends Int {\n      constructor(registry, value) {\n        super(registry, value, bitLength);\n      }\n\n      toRawType() {\n        return typeName || super.toRawType();\n      }\n\n    };\n  }\n\n}\n\nexports.default = Int;"]},"metadata":{},"sourceType":"script"}