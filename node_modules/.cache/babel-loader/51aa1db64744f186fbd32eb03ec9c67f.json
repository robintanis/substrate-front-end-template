{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.proposals = proposals;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"../util\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nfunction parseResult(_api, {\n  allIds,\n  allProposals,\n  approvalIds,\n  councilProposals,\n  proposalCount\n}) {\n  const approvals = [];\n  const proposals = [];\n  const councilTreasury = councilProposals.filter(({\n    proposal: {\n      methodName,\n      sectionName\n    }\n  }) => sectionName === 'treasury' && ['approveProposal', 'rejectProposal'].includes(methodName));\n  allIds.forEach((id, index) => {\n    if (allProposals[index].isSome) {\n      const council = councilTreasury.filter(({\n        proposal\n      }) => id.eq(proposal.args[0])).sort((a, b) => a.proposal.methodName.localeCompare(b.proposal.methodName));\n      const isApproval = approvalIds.some(approvalId => approvalId.eq(id));\n      const derived = {\n        council,\n        id,\n        proposal: allProposals[index].unwrap()\n      };\n\n      if (isApproval) {\n        approvals.push(derived);\n      } else {\n        proposals.push(derived);\n      }\n    }\n  });\n  return {\n    approvals,\n    proposalCount,\n    proposals\n  };\n}\n\nfunction retrieveProposals(api, proposalCount, approvalIds) {\n  const proposalIds = [];\n  const count = proposalCount.toNumber();\n\n  for (let index = 0; index < count; index++) {\n    const isApproval = approvalIds.some(id => id.eqn(index));\n\n    if (!isApproval) {\n      proposalIds.push(api.registry.createType('ProposalIndex', index));\n    }\n  }\n\n  const allIds = [...proposalIds, ...approvalIds];\n  return (0, _rxjs.combineLatest)([api.query.treasury.proposals.multi(allIds), api.derive.council.proposals()]).pipe((0, _operators.map)(([allProposals, councilProposals]) => parseResult(api, {\n    allIds,\n    allProposals,\n    approvalIds,\n    councilProposals,\n    proposalCount\n  })));\n}\n/**\n * @description Retrieve all active and approved treasury proposals, along with their info\n */\n\n\nfunction proposals(instanceId, api) {\n  return (0, _util.memo)(instanceId, () => api.query.treasury ? (0, _rxjs.combineLatest)([api.query.treasury.proposalCount(), api.query.treasury.approvals()]).pipe((0, _operators.switchMap)(([proposalCount, approvalIds]) => retrieveProposals(api, proposalCount, approvalIds))) : (0, _rxjs.of)({\n    approvals: [],\n    proposalCount: api.registry.createType('ProposalIndex'),\n    proposals: []\n  }));\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/api-derive/treasury/proposals.js"],"names":["Object","defineProperty","exports","value","proposals","_rxjs","require","_operators","_util","parseResult","_api","allIds","allProposals","approvalIds","councilProposals","proposalCount","approvals","councilTreasury","filter","proposal","methodName","sectionName","includes","forEach","id","index","isSome","council","eq","args","sort","a","b","localeCompare","isApproval","some","approvalId","derived","unwrap","push","retrieveProposals","api","proposalIds","count","toNumber","eqn","registry","createType","combineLatest","query","treasury","multi","derive","pipe","map","instanceId","memo","switchMap","of"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.proposals = proposals;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"../util\");\n\n// Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction parseResult(_api, {\n  allIds,\n  allProposals,\n  approvalIds,\n  councilProposals,\n  proposalCount\n}) {\n  const approvals = [];\n  const proposals = [];\n  const councilTreasury = councilProposals.filter(({\n    proposal: {\n      methodName,\n      sectionName\n    }\n  }) => sectionName === 'treasury' && ['approveProposal', 'rejectProposal'].includes(methodName));\n  allIds.forEach((id, index) => {\n    if (allProposals[index].isSome) {\n      const council = councilTreasury.filter(({\n        proposal\n      }) => id.eq(proposal.args[0])).sort((a, b) => a.proposal.methodName.localeCompare(b.proposal.methodName));\n      const isApproval = approvalIds.some(approvalId => approvalId.eq(id));\n      const derived = {\n        council,\n        id,\n        proposal: allProposals[index].unwrap()\n      };\n\n      if (isApproval) {\n        approvals.push(derived);\n      } else {\n        proposals.push(derived);\n      }\n    }\n  });\n  return {\n    approvals,\n    proposalCount,\n    proposals\n  };\n}\n\nfunction retrieveProposals(api, proposalCount, approvalIds) {\n  const proposalIds = [];\n  const count = proposalCount.toNumber();\n\n  for (let index = 0; index < count; index++) {\n    const isApproval = approvalIds.some(id => id.eqn(index));\n\n    if (!isApproval) {\n      proposalIds.push(api.registry.createType('ProposalIndex', index));\n    }\n  }\n\n  const allIds = [...proposalIds, ...approvalIds];\n  return (0, _rxjs.combineLatest)([api.query.treasury.proposals.multi(allIds), api.derive.council.proposals()]).pipe((0, _operators.map)(([allProposals, councilProposals]) => parseResult(api, {\n    allIds,\n    allProposals,\n    approvalIds,\n    councilProposals,\n    proposalCount\n  })));\n}\n/**\n * @description Retrieve all active and approved treasury proposals, along with their info\n */\n\n\nfunction proposals(instanceId, api) {\n  return (0, _util.memo)(instanceId, () => api.query.treasury ? (0, _rxjs.combineLatest)([api.query.treasury.proposalCount(), api.query.treasury.approvals()]).pipe((0, _operators.switchMap)(([proposalCount, approvalIds]) => retrieveProposals(api, proposalCount, approvalIds))) : (0, _rxjs.of)({\n    approvals: [],\n    proposalCount: api.registry.createType('ProposalIndex'),\n    proposals: []\n  }));\n}"]},"metadata":{},"sourceType":"script"}