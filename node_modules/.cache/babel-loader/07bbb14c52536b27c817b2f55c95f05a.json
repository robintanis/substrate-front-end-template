{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = formatDecimal; // Copyright 2017-2020 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nconst NUMBER_REGEX = new RegExp('(\\\\d+?)(?=(\\\\d{3})+(?!\\\\d)|$)', 'g');\n\nfunction formatDecimal(value) {\n  // We can do this by adjusting the regx, however for the sake of clarity\n  // we rather strip and re-add the negative sign in the output\n  const isNegative = value[0].startsWith('-');\n  const matched = isNegative ? value.substr(1).match(NUMBER_REGEX) : value.match(NUMBER_REGEX);\n  return matched ? `${isNegative ? '-' : ''}${matched.join(',')}` : value;\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/util/format/formatDecimal.js"],"names":["Object","defineProperty","exports","value","default","formatDecimal","NUMBER_REGEX","RegExp","isNegative","startsWith","matched","substr","match","join"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,aAAlB,C,CACA;AACA;;AACA,MAAMC,YAAY,GAAG,IAAIC,MAAJ,CAAW,+BAAX,EAA4C,GAA5C,CAArB;;AAEA,SAASF,aAAT,CAAuBF,KAAvB,EAA8B;AAC5B;AACA;AACA,QAAMK,UAAU,GAAGL,KAAK,CAAC,CAAD,CAAL,CAASM,UAAT,CAAoB,GAApB,CAAnB;AACA,QAAMC,OAAO,GAAGF,UAAU,GAAGL,KAAK,CAACQ,MAAN,CAAa,CAAb,EAAgBC,KAAhB,CAAsBN,YAAtB,CAAH,GAAyCH,KAAK,CAACS,KAAN,CAAYN,YAAZ,CAAnE;AACA,SAAOI,OAAO,GAAI,GAAEF,UAAU,GAAG,GAAH,GAAS,EAAG,GAAEE,OAAO,CAACG,IAAR,CAAa,GAAb,CAAkB,EAAhD,GAAoDV,KAAlE;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = formatDecimal;\n// Copyright 2017-2020 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst NUMBER_REGEX = new RegExp('(\\\\d+?)(?=(\\\\d{3})+(?!\\\\d)|$)', 'g');\n\nfunction formatDecimal(value) {\n  // We can do this by adjusting the regx, however for the sake of clarity\n  // we rather strip and re-add the negative sign in the output\n  const isNegative = value[0].startsWith('-');\n  const matched = isNegative ? value.substr(1).match(NUMBER_REGEX) : value.match(NUMBER_REGEX);\n  return matched ? `${isNegative ? '-' : ''}${matched.join(',')}` : value;\n}"]},"metadata":{},"sourceType":"script"}