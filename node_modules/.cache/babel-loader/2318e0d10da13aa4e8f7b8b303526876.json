{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = xxhashAsU8a;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _wasmCrypto = require(\"@polkadot/wasm-crypto\");\n\nvar _asBn = _interopRequireDefault(require(\"./xxhash64/asBn\")); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name xxhashAsU8a\n * @summary Creates a xxhash64 u8a from the input.\n * @description\n * From either a `string`, `Uint8Array` or a `Buffer` input, create the xxhash64 and return the result as a `Uint8Array` with the specified `bitLength`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { xxhashAsU8a } from '@polkadot/util-crypto';\n *\n * xxhashAsU8a('abc'); // => 0x44bc2cf5ad770999\n * ```\n */\n\n\nfunction xxhashAsU8a(data, bitLength = 64) {\n  const iterations = Math.ceil(bitLength / 64);\n\n  if ((0, _wasmCrypto.isReady)()) {\n    return (0, _wasmCrypto.twox)((0, _util.u8aToU8a)(data), iterations);\n  }\n\n  const u8a = new Uint8Array(Math.ceil(bitLength / 8));\n\n  for (let seed = 0; seed < iterations; seed++) {\n    u8a.set((0, _asBn.default)(data, seed).toArray('le', 8), seed * 8);\n  }\n\n  return u8a;\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/util-crypto/xxhash/asU8a.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","xxhashAsU8a","_util","_wasmCrypto","_asBn","data","bitLength","iterations","Math","ceil","isReady","twox","u8aToU8a","u8a","Uint8Array","seed","set","toArray"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,WAAlB;;AAEA,IAAIC,KAAK,GAAGP,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIQ,WAAW,GAAGR,OAAO,CAAC,uBAAD,CAAzB;;AAEA,IAAIS,KAAK,GAAGV,sBAAsB,CAACC,OAAO,CAAC,iBAAD,CAAR,CAAlC,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,WAAT,CAAqBI,IAArB,EAA2BC,SAAS,GAAG,EAAvC,EAA2C;AACzC,QAAMC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUH,SAAS,GAAG,EAAtB,CAAnB;;AAEA,MAAI,CAAC,GAAGH,WAAW,CAACO,OAAhB,GAAJ,EAAgC;AAC9B,WAAO,CAAC,GAAGP,WAAW,CAACQ,IAAhB,EAAsB,CAAC,GAAGT,KAAK,CAACU,QAAV,EAAoBP,IAApB,CAAtB,EAAiDE,UAAjD,CAAP;AACD;;AAED,QAAMM,GAAG,GAAG,IAAIC,UAAJ,CAAeN,IAAI,CAACC,IAAL,CAAUH,SAAS,GAAG,CAAtB,CAAf,CAAZ;;AAEA,OAAK,IAAIS,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGR,UAA1B,EAAsCQ,IAAI,EAA1C,EAA8C;AAC5CF,IAAAA,GAAG,CAACG,GAAJ,CAAQ,CAAC,GAAGZ,KAAK,CAACJ,OAAV,EAAmBK,IAAnB,EAAyBU,IAAzB,EAA+BE,OAA/B,CAAuC,IAAvC,EAA6C,CAA7C,CAAR,EAAyDF,IAAI,GAAG,CAAhE;AACD;;AAED,SAAOF,GAAP;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = xxhashAsU8a;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _wasmCrypto = require(\"@polkadot/wasm-crypto\");\n\nvar _asBn = _interopRequireDefault(require(\"./xxhash64/asBn\"));\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name xxhashAsU8a\n * @summary Creates a xxhash64 u8a from the input.\n * @description\n * From either a `string`, `Uint8Array` or a `Buffer` input, create the xxhash64 and return the result as a `Uint8Array` with the specified `bitLength`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { xxhashAsU8a } from '@polkadot/util-crypto';\n *\n * xxhashAsU8a('abc'); // => 0x44bc2cf5ad770999\n * ```\n */\nfunction xxhashAsU8a(data, bitLength = 64) {\n  const iterations = Math.ceil(bitLength / 64);\n\n  if ((0, _wasmCrypto.isReady)()) {\n    return (0, _wasmCrypto.twox)((0, _util.u8aToU8a)(data), iterations);\n  }\n\n  const u8a = new Uint8Array(Math.ceil(bitLength / 8));\n\n  for (let seed = 0; seed < iterations; seed++) {\n    u8a.set((0, _asBn.default)(data, seed).toArray('le', 8), seed * 8);\n  }\n\n  return u8a;\n}"]},"metadata":{},"sourceType":"script"}