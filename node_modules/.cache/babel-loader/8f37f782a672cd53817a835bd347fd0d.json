{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _eventemitter2 = _interopRequireDefault(require(\"eventemitter3\")); // Copyright 2017-2020 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nvar _eventemitter = (0, _classPrivateFieldLooseKey2.default)(\"eventemitter\");\n\nclass Events {\n  constructor() {\n    Object.defineProperty(this, _eventemitter, {\n      writable: true,\n      value: new _eventemitter2.default()\n    });\n  }\n\n  emit(type, ...args) {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _eventemitter)[_eventemitter].emit(type, ...args);\n  }\n  /**\n   * @description Attach an eventemitter handler to listen to a specific event\n   *\n   * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`\n   * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.\n   *\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * api.on('connected', (): void => {\n   *   console.log('API has been connected to the endpoint');\n   * });\n   *\n   * api.on('disconnected', (): void => {\n   *   console.log('API has been disconnected from the endpoint');\n   * });\n   * ```\n   */\n\n\n  on(type, handler) {\n    (0, _classPrivateFieldLooseBase2.default)(this, _eventemitter)[_eventemitter].on(type, handler);\n\n    return this;\n  }\n  /**\n   * @description Remove the given eventemitter handler\n   *\n   * @param type The type of event the callback was attached to. Available events are `connected`, `disconnected`, `ready` and `error`\n   * @param handler The callback to unregister.\n   *\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * const handler = (): void => {\n   *  console.log('Connected !);\n   * };\n   *\n   * // Start listening\n   * api.on('connected', handler);\n   *\n   * // Stop listening\n   * api.off('connected', handler);\n   * ```\n   */\n\n\n  off(type, handler) {\n    (0, _classPrivateFieldLooseBase2.default)(this, _eventemitter)[_eventemitter].removeListener(type, handler);\n\n    return this;\n  }\n  /**\n   * @description Attach an one-time eventemitter handler to listen to a specific event\n   *\n   * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`\n   * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.\n   *\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * api.once('connected', (): void => {\n   *   console.log('API has been connected to the endpoint');\n   * });\n   *\n   * api.once('disconnected', (): void => {\n   *   console.log('API has been disconnected from the endpoint');\n   * });\n   * ```\n   */\n\n\n  once(type, handler) {\n    (0, _classPrivateFieldLooseBase2.default)(this, _eventemitter)[_eventemitter].once(type, handler);\n\n    return this;\n  }\n\n}\n\nexports.default = Events;","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/api/base/Events.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_classPrivateFieldLooseBase2","_classPrivateFieldLooseKey2","_eventemitter2","_eventemitter","Events","constructor","writable","emit","type","args","on","handler","off","removeListener","once"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,4BAA4B,GAAGP,sBAAsB,CAACC,OAAO,CAAC,mDAAD,CAAR,CAAzD;;AAEA,IAAIO,2BAA2B,GAAGR,sBAAsB,CAACC,OAAO,CAAC,kDAAD,CAAR,CAAxD;;AAEA,IAAIQ,cAAc,GAAGT,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAA3C,C,CAEA;AACA;;;AACA,IAAIS,aAAa,GAAG,CAAC,GAAGF,2BAA2B,CAACF,OAAhC,EAAyC,cAAzC,CAApB;;AAEA,MAAMK,MAAN,CAAa;AACXC,EAAAA,WAAW,GAAG;AACZV,IAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BO,aAA5B,EAA2C;AACzCG,MAAAA,QAAQ,EAAE,IAD+B;AAEzCR,MAAAA,KAAK,EAAE,IAAII,cAAc,CAACH,OAAnB;AAFkC,KAA3C;AAID;;AAEDQ,EAAAA,IAAI,CAACC,IAAD,EAAO,GAAGC,IAAV,EAAgB;AAClB,WAAO,CAAC,GAAGT,4BAA4B,CAACD,OAAjC,EAA0C,IAA1C,EAAgDI,aAAhD,EAA+DA,aAA/D,EAA8EI,IAA9E,CAAmFC,IAAnF,EAAyF,GAAGC,IAA5F,CAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGEC,EAAAA,EAAE,CAACF,IAAD,EAAOG,OAAP,EAAgB;AAChB,KAAC,GAAGX,4BAA4B,CAACD,OAAjC,EAA0C,IAA1C,EAAgDI,aAAhD,EAA+DA,aAA/D,EAA8EO,EAA9E,CAAiFF,IAAjF,EAAuFG,OAAvF;;AAEA,WAAO,IAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGEC,EAAAA,GAAG,CAACJ,IAAD,EAAOG,OAAP,EAAgB;AACjB,KAAC,GAAGX,4BAA4B,CAACD,OAAjC,EAA0C,IAA1C,EAAgDI,aAAhD,EAA+DA,aAA/D,EAA8EU,cAA9E,CAA6FL,IAA7F,EAAmGG,OAAnG;;AAEA,WAAO,IAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGEG,EAAAA,IAAI,CAACN,IAAD,EAAOG,OAAP,EAAgB;AAClB,KAAC,GAAGX,4BAA4B,CAACD,OAAjC,EAA0C,IAA1C,EAAgDI,aAAhD,EAA+DA,aAA/D,EAA8EW,IAA9E,CAAmFN,IAAnF,EAAyFG,OAAzF;;AAEA,WAAO,IAAP;AACD;;AA1FU;;AA8Fbd,OAAO,CAACE,OAAR,GAAkBK,MAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _eventemitter2 = _interopRequireDefault(require(\"eventemitter3\"));\n\n// Copyright 2017-2020 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nvar _eventemitter = (0, _classPrivateFieldLooseKey2.default)(\"eventemitter\");\n\nclass Events {\n  constructor() {\n    Object.defineProperty(this, _eventemitter, {\n      writable: true,\n      value: new _eventemitter2.default()\n    });\n  }\n\n  emit(type, ...args) {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _eventemitter)[_eventemitter].emit(type, ...args);\n  }\n  /**\n   * @description Attach an eventemitter handler to listen to a specific event\n   *\n   * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`\n   * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.\n   *\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * api.on('connected', (): void => {\n   *   console.log('API has been connected to the endpoint');\n   * });\n   *\n   * api.on('disconnected', (): void => {\n   *   console.log('API has been disconnected from the endpoint');\n   * });\n   * ```\n   */\n\n\n  on(type, handler) {\n    (0, _classPrivateFieldLooseBase2.default)(this, _eventemitter)[_eventemitter].on(type, handler);\n\n    return this;\n  }\n  /**\n   * @description Remove the given eventemitter handler\n   *\n   * @param type The type of event the callback was attached to. Available events are `connected`, `disconnected`, `ready` and `error`\n   * @param handler The callback to unregister.\n   *\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * const handler = (): void => {\n   *  console.log('Connected !);\n   * };\n   *\n   * // Start listening\n   * api.on('connected', handler);\n   *\n   * // Stop listening\n   * api.off('connected', handler);\n   * ```\n   */\n\n\n  off(type, handler) {\n    (0, _classPrivateFieldLooseBase2.default)(this, _eventemitter)[_eventemitter].removeListener(type, handler);\n\n    return this;\n  }\n  /**\n   * @description Attach an one-time eventemitter handler to listen to a specific event\n   *\n   * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`\n   * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.\n   *\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * api.once('connected', (): void => {\n   *   console.log('API has been connected to the endpoint');\n   * });\n   *\n   * api.once('disconnected', (): void => {\n   *   console.log('API has been disconnected from the endpoint');\n   * });\n   * ```\n   */\n\n\n  once(type, handler) {\n    (0, _classPrivateFieldLooseBase2.default)(this, _eventemitter)[_eventemitter].once(type, handler);\n\n    return this;\n  }\n\n}\n\nexports.default = Events;"]},"metadata":{},"sourceType":"script"}