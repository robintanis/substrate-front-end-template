{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.Keyring = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _pair = _interopRequireDefault(require(\"@polkadot/keyring/pair\"));\n\nvar _chains = _interopRequireDefault(require(\"@polkadot/ui-settings/defaults/chains\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utilCrypto = require(\"@polkadot/util-crypto\");\n\nvar _development = _interopRequireDefault(require(\"./observable/development\"));\n\nvar _Base = _interopRequireDefault(require(\"./Base\"));\n\nvar _defaults = require(\"./defaults\");\n\nvar _options = _interopRequireDefault(require(\"./options\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nconst RECENT_EXPIRY = 24 * 60 * 60; // No accounts (or test accounts) should be loaded until after the chain determination.\n// Chain determination occurs outside of Keyring. Loading `keyring.loadAll({ type: 'ed25519' | 'sr25519' })` is triggered\n// from the API after the chain is received\n\nvar _stores = (0, _classPrivateFieldLooseKey2.default)(\"stores\");\n\nclass Keyring extends _Base.default {\n  constructor(...args) {\n    super(...args);\n    Object.defineProperty(this, _stores, {\n      writable: true,\n      value: {\n        account: () => this.accounts,\n        address: () => this.addresses,\n        contract: () => this.contracts\n      }\n    });\n  }\n\n  addExternal(address, meta = {}) {\n    const pair = this.keyring.addFromAddress(address, _objectSpread(_objectSpread({}, meta), {}, {\n      isExternal: true\n    }), null);\n    return {\n      json: this.saveAccount(pair),\n      pair\n    };\n  }\n\n  addHardware(address, hardwareType, meta = {}) {\n    return this.addExternal(address, _objectSpread(_objectSpread({}, meta), {}, {\n      hardwareType,\n      isHardware: true\n    }));\n  }\n\n  addMultisig(addresses, threshold, meta = {}) {\n    const address = (0, _utilCrypto.createKeyMulti)(addresses, threshold); // we could use `sortAddresses`, but rather use internal encode/decode so we are 100%\n\n    const who = (0, _util.u8aSorted)(addresses.map(who => this.decodeAddress(who))).map(who => this.encodeAddress(who));\n    return this.addExternal(address, _objectSpread(_objectSpread({}, meta), {}, {\n      isMultisig: true,\n      threshold: (0, _util.bnToBn)(threshold).toNumber(),\n      who\n    }));\n  }\n\n  addPair(pair, password) {\n    this.keyring.addPair(pair);\n    return {\n      json: this.saveAccount(pair, password),\n      pair\n    };\n  }\n\n  addUri(suri, password, meta = {}, type) {\n    const pair = this.keyring.addFromUri(suri, meta, type);\n    return {\n      json: this.saveAccount(pair, password),\n      pair\n    };\n  }\n\n  backupAccount(pair, password) {\n    if (!pair.isLocked) {\n      pair.lock();\n    }\n\n    pair.decodePkcs8(password);\n    return pair.toJson(password);\n  }\n\n  createFromJson(json, meta = {}) {\n    return this.keyring.createFromJson(_objectSpread(_objectSpread({}, json), {}, {\n      meta: _objectSpread(_objectSpread({}, json.meta || {}), {}, {\n        meta\n      })\n    }));\n  }\n\n  createFromUri(suri, meta = {}, type) {\n    return this.keyring.createFromUri(suri, meta, type);\n  }\n\n  encryptAccount(pair, password) {\n    const json = pair.toJson(password);\n    json.meta.whenEdited = Date.now();\n    this.keyring.addFromJson(json);\n    this.accounts.add(this._store, pair.address, json);\n  }\n\n  forgetAccount(address) {\n    this.keyring.removePair(address);\n    this.accounts.remove(this._store, address);\n  }\n\n  forgetAddress(address) {\n    this.addresses.remove(this._store, address);\n  }\n\n  forgetContract(address) {\n    this.contracts.remove(this._store, address);\n  }\n\n  getAccount(address) {\n    return this.getAddress(address, 'account');\n  }\n\n  getAccounts() {\n    const available = this.accounts.subject.getValue();\n    return Object.keys(available).map(address => this.getAddress(address, 'account')).filter(account => _development.default.isDevelopment() || account.meta.isTesting !== true);\n  }\n\n  getAddress(_address, type = null) {\n    const address = (0, _util.isString)(_address) ? _address : this.encodeAddress(_address);\n    const publicKey = this.decodeAddress(address);\n    const stores = type ? [(0, _classPrivateFieldLooseBase2.default)(this, _stores)[_stores][type]] : Object.values((0, _classPrivateFieldLooseBase2.default)(this, _stores)[_stores]);\n    const info = stores.reduce((lastInfo, store) => store().subject.getValue()[address] || lastInfo, undefined);\n    return info && {\n      address,\n      meta: info.json.meta,\n      publicKey\n    };\n  }\n\n  getAddresses() {\n    const available = this.addresses.subject.getValue();\n    return Object.keys(available).map(address => this.getAddress(address));\n  }\n\n  getContract(address) {\n    return this.getAddress(address, 'contract');\n  }\n\n  getContracts() {\n    const available = this.contracts.subject.getValue();\n    return Object.entries(available).filter(([, {\n      json: {\n        meta: {\n          contract\n        }\n      }\n    }]) => !!contract && contract.genesisHash === this.genesisHash).map(([address]) => this.getContract(address));\n  }\n\n  rewriteKey(json, key, hexAddr, creator) {\n    if (hexAddr.substr(0, 2) === '0x') {\n      return;\n    }\n\n    this._store.remove(key);\n\n    this._store.set(creator(hexAddr), json);\n  }\n\n  loadAccount(json, key) {\n    if (!json.meta.isTesting && json.encoded) {\n      // FIXME Just for the transition period (ignoreChecksum)\n      const pair = this.keyring.addFromJson(json, true);\n      this.accounts.add(this._store, pair.address, json);\n    }\n\n    const [, hexAddr] = key.split(':');\n    this.rewriteKey(json, key, hexAddr.trim(), _defaults.accountKey);\n  }\n\n  loadAddress(json, key) {\n    const {\n      isRecent,\n      whenCreated = 0\n    } = json.meta;\n\n    if (isRecent && Date.now() - whenCreated > RECENT_EXPIRY) {\n      this._store.remove(key);\n\n      return;\n    }\n\n    const address = this.encodeAddress((0, _util.isHex)(json.address) ? (0, _util.hexToU8a)(json.address) // FIXME Just for the transition period (ignoreChecksum)\n    : this.decodeAddress(json.address, true));\n    const [, hexAddr] = key.split(':');\n    this.addresses.add(this._store, address, json);\n    this.rewriteKey(json, key, hexAddr, _defaults.addressKey);\n  }\n\n  loadContract(json, key) {\n    const address = this.encodeAddress(this.decodeAddress(json.address));\n    const [, hexAddr] = key.split(':'); // move genesisHash to top-level (TODO Remove from contracts section?)\n\n    json.meta.genesisHash = json.meta.genesisHash || json.meta.contract && json.meta.contract.genesisHash;\n    this.contracts.add(this._store, address, json);\n    this.rewriteKey(json, key, hexAddr, _defaults.contractKey);\n  }\n\n  loadInjected(address, meta) {\n    const json = {\n      address,\n      meta: _objectSpread(_objectSpread({}, meta), {}, {\n        isInjected: true\n      })\n    };\n    const pair = this.keyring.addFromAddress(address, json.meta);\n    this.accounts.add(this._store, pair.address, json);\n  }\n\n  allowGenesis(json) {\n    if (json && json.meta && this.genesisHash) {\n      const hashes = Object.values(_chains.default).find(hashes => hashes.includes(this.genesisHash || '')) || [this.genesisHash];\n\n      if (json.meta.genesisHash) {\n        return hashes.includes(json.meta.genesisHash);\n      } else if (json.meta.contract) {\n        return hashes.includes(json.meta.contract.genesisHash);\n      }\n    }\n\n    return true;\n  }\n\n  loadAll(options, injected = []) {\n    super.initKeyring(options);\n\n    this._store.all((key, json) => {\n      if (options.filter ? options.filter(json) : true) {\n        if (this.allowGenesis(json)) {\n          if (_defaults.accountRegex.test(key)) {\n            this.loadAccount(json, key);\n          } else if (_defaults.addressRegex.test(key)) {\n            this.loadAddress(json, key);\n          } else if (_defaults.contractRegex.test(key)) {\n            this.loadContract(json, key);\n          }\n        }\n      }\n    });\n\n    injected.forEach(account => {\n      if (this.allowGenesis(account)) {\n        this.loadInjected(account.address, account.meta);\n      }\n    });\n\n    _options.default.init(this);\n  }\n\n  restoreAccount(json, password) {\n    const cryptoType = Array.isArray(json.encoding.content) ? json.encoding.content[1] : 'ed25519';\n    const encType = Array.isArray(json.encoding.type) ? json.encoding.type : [json.encoding.type];\n    const pair = (0, _pair.default)({\n      toSS58: this.encodeAddress,\n      type: cryptoType\n    }, {\n      publicKey: this.decodeAddress(json.address, true)\n    }, json.meta, (0, _util.isHex)(json.encoded) ? (0, _util.hexToU8a)(json.encoded) : (0, _utilCrypto.base64Decode)(json.encoded), encType); // unlock, save account and then lock (locking cleans secretKey, so needs to be last)\n\n    pair.decodePkcs8(password);\n    this.addPair(pair, password);\n    pair.lock();\n    return pair;\n  }\n\n  saveAccount(pair, password) {\n    this.addTimestamp(pair);\n    const json = pair.toJson(password);\n    this.keyring.addFromJson(json);\n    this.accounts.add(this._store, pair.address, json);\n    return json;\n  }\n\n  saveAccountMeta(pair, meta) {\n    const address = pair.address;\n\n    this._store.get((0, _defaults.accountKey)(address), json => {\n      pair.setMeta(meta);\n      json.meta = pair.meta;\n      this.accounts.add(this._store, address, json);\n    });\n  }\n\n  saveAddress(address, meta, type = 'address') {\n    const available = this.addresses.subject.getValue();\n    const json = available[address] && available[address].json || {\n      address,\n      meta: {\n        isRecent: undefined,\n        whenCreated: Date.now()\n      }\n    };\n    Object.keys(meta).forEach(key => {\n      json.meta[key] = meta[key];\n    });\n    delete json.meta.isRecent;\n\n    (0, _classPrivateFieldLooseBase2.default)(this, _stores)[_stores][type]().add(this._store, address, json);\n\n    return json;\n  }\n\n  saveContract(address, meta) {\n    return this.saveAddress(address, meta, 'contract');\n  }\n\n  saveRecent(address) {\n    const available = this.addresses.subject.getValue();\n\n    if (!available[address]) {\n      this.addresses.add(this._store, address, {\n        address,\n        meta: {\n          genesisHash: this.genesisHash,\n          isRecent: true,\n          whenCreated: Date.now()\n        }\n      });\n    }\n\n    return this.addresses.subject.getValue()[address];\n  }\n\n}\n\nexports.Keyring = Keyring;\nconst keyringInstance = new Keyring();\nvar _default = keyringInstance;\nexports.default = _default;","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/ui-keyring/Keyring.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","Keyring","_defineProperty2","_classPrivateFieldLooseBase2","_classPrivateFieldLooseKey2","_pair","_chains","_util","_utilCrypto","_development","_Base","_defaults","_options","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","RECENT_EXPIRY","_stores","constructor","args","writable","account","accounts","address","addresses","contract","contracts","addExternal","meta","pair","keyring","addFromAddress","isExternal","json","saveAccount","addHardware","hardwareType","isHardware","addMultisig","threshold","createKeyMulti","who","u8aSorted","map","decodeAddress","encodeAddress","isMultisig","bnToBn","toNumber","addPair","password","addUri","suri","type","addFromUri","backupAccount","isLocked","lock","decodePkcs8","toJson","createFromJson","createFromUri","encryptAccount","whenEdited","Date","now","addFromJson","add","_store","forgetAccount","removePair","remove","forgetAddress","forgetContract","getAccount","getAddress","getAccounts","available","subject","getValue","isDevelopment","isTesting","_address","isString","publicKey","stores","values","info","reduce","lastInfo","store","undefined","getAddresses","getContract","getContracts","entries","genesisHash","rewriteKey","hexAddr","creator","substr","set","loadAccount","encoded","split","trim","accountKey","loadAddress","isRecent","whenCreated","isHex","hexToU8a","addressKey","loadContract","contractKey","loadInjected","isInjected","allowGenesis","hashes","find","includes","loadAll","options","injected","initKeyring","all","accountRegex","test","addressRegex","contractRegex","init","restoreAccount","cryptoType","Array","isArray","encoding","content","encType","toSS58","base64Decode","addTimestamp","saveAccountMeta","get","setMeta","saveAddress","saveContract","saveRecent","keyringInstance","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.Keyring = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _pair = _interopRequireDefault(require(\"@polkadot/keyring/pair\"));\n\nvar _chains = _interopRequireDefault(require(\"@polkadot/ui-settings/defaults/chains\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utilCrypto = require(\"@polkadot/util-crypto\");\n\nvar _development = _interopRequireDefault(require(\"./observable/development\"));\n\nvar _Base = _interopRequireDefault(require(\"./Base\"));\n\nvar _defaults = require(\"./defaults\");\n\nvar _options = _interopRequireDefault(require(\"./options\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst RECENT_EXPIRY = 24 * 60 * 60; // No accounts (or test accounts) should be loaded until after the chain determination.\n// Chain determination occurs outside of Keyring. Loading `keyring.loadAll({ type: 'ed25519' | 'sr25519' })` is triggered\n// from the API after the chain is received\n\nvar _stores = (0, _classPrivateFieldLooseKey2.default)(\"stores\");\n\nclass Keyring extends _Base.default {\n  constructor(...args) {\n    super(...args);\n    Object.defineProperty(this, _stores, {\n      writable: true,\n      value: {\n        account: () => this.accounts,\n        address: () => this.addresses,\n        contract: () => this.contracts\n      }\n    });\n  }\n\n  addExternal(address, meta = {}) {\n    const pair = this.keyring.addFromAddress(address, _objectSpread(_objectSpread({}, meta), {}, {\n      isExternal: true\n    }), null);\n    return {\n      json: this.saveAccount(pair),\n      pair\n    };\n  }\n\n  addHardware(address, hardwareType, meta = {}) {\n    return this.addExternal(address, _objectSpread(_objectSpread({}, meta), {}, {\n      hardwareType,\n      isHardware: true\n    }));\n  }\n\n  addMultisig(addresses, threshold, meta = {}) {\n    const address = (0, _utilCrypto.createKeyMulti)(addresses, threshold); // we could use `sortAddresses`, but rather use internal encode/decode so we are 100%\n\n    const who = (0, _util.u8aSorted)(addresses.map(who => this.decodeAddress(who))).map(who => this.encodeAddress(who));\n    return this.addExternal(address, _objectSpread(_objectSpread({}, meta), {}, {\n      isMultisig: true,\n      threshold: (0, _util.bnToBn)(threshold).toNumber(),\n      who\n    }));\n  }\n\n  addPair(pair, password) {\n    this.keyring.addPair(pair);\n    return {\n      json: this.saveAccount(pair, password),\n      pair\n    };\n  }\n\n  addUri(suri, password, meta = {}, type) {\n    const pair = this.keyring.addFromUri(suri, meta, type);\n    return {\n      json: this.saveAccount(pair, password),\n      pair\n    };\n  }\n\n  backupAccount(pair, password) {\n    if (!pair.isLocked) {\n      pair.lock();\n    }\n\n    pair.decodePkcs8(password);\n    return pair.toJson(password);\n  }\n\n  createFromJson(json, meta = {}) {\n    return this.keyring.createFromJson(_objectSpread(_objectSpread({}, json), {}, {\n      meta: _objectSpread(_objectSpread({}, json.meta || {}), {}, {\n        meta\n      })\n    }));\n  }\n\n  createFromUri(suri, meta = {}, type) {\n    return this.keyring.createFromUri(suri, meta, type);\n  }\n\n  encryptAccount(pair, password) {\n    const json = pair.toJson(password);\n    json.meta.whenEdited = Date.now();\n    this.keyring.addFromJson(json);\n    this.accounts.add(this._store, pair.address, json);\n  }\n\n  forgetAccount(address) {\n    this.keyring.removePair(address);\n    this.accounts.remove(this._store, address);\n  }\n\n  forgetAddress(address) {\n    this.addresses.remove(this._store, address);\n  }\n\n  forgetContract(address) {\n    this.contracts.remove(this._store, address);\n  }\n\n  getAccount(address) {\n    return this.getAddress(address, 'account');\n  }\n\n  getAccounts() {\n    const available = this.accounts.subject.getValue();\n    return Object.keys(available).map(address => this.getAddress(address, 'account')).filter(account => _development.default.isDevelopment() || account.meta.isTesting !== true);\n  }\n\n  getAddress(_address, type = null) {\n    const address = (0, _util.isString)(_address) ? _address : this.encodeAddress(_address);\n    const publicKey = this.decodeAddress(address);\n    const stores = type ? [(0, _classPrivateFieldLooseBase2.default)(this, _stores)[_stores][type]] : Object.values((0, _classPrivateFieldLooseBase2.default)(this, _stores)[_stores]);\n    const info = stores.reduce((lastInfo, store) => store().subject.getValue()[address] || lastInfo, undefined);\n    return info && {\n      address,\n      meta: info.json.meta,\n      publicKey\n    };\n  }\n\n  getAddresses() {\n    const available = this.addresses.subject.getValue();\n    return Object.keys(available).map(address => this.getAddress(address));\n  }\n\n  getContract(address) {\n    return this.getAddress(address, 'contract');\n  }\n\n  getContracts() {\n    const available = this.contracts.subject.getValue();\n    return Object.entries(available).filter(([, {\n      json: {\n        meta: {\n          contract\n        }\n      }\n    }]) => !!contract && contract.genesisHash === this.genesisHash).map(([address]) => this.getContract(address));\n  }\n\n  rewriteKey(json, key, hexAddr, creator) {\n    if (hexAddr.substr(0, 2) === '0x') {\n      return;\n    }\n\n    this._store.remove(key);\n\n    this._store.set(creator(hexAddr), json);\n  }\n\n  loadAccount(json, key) {\n    if (!json.meta.isTesting && json.encoded) {\n      // FIXME Just for the transition period (ignoreChecksum)\n      const pair = this.keyring.addFromJson(json, true);\n      this.accounts.add(this._store, pair.address, json);\n    }\n\n    const [, hexAddr] = key.split(':');\n    this.rewriteKey(json, key, hexAddr.trim(), _defaults.accountKey);\n  }\n\n  loadAddress(json, key) {\n    const {\n      isRecent,\n      whenCreated = 0\n    } = json.meta;\n\n    if (isRecent && Date.now() - whenCreated > RECENT_EXPIRY) {\n      this._store.remove(key);\n\n      return;\n    }\n\n    const address = this.encodeAddress((0, _util.isHex)(json.address) ? (0, _util.hexToU8a)(json.address) // FIXME Just for the transition period (ignoreChecksum)\n    : this.decodeAddress(json.address, true));\n    const [, hexAddr] = key.split(':');\n    this.addresses.add(this._store, address, json);\n    this.rewriteKey(json, key, hexAddr, _defaults.addressKey);\n  }\n\n  loadContract(json, key) {\n    const address = this.encodeAddress(this.decodeAddress(json.address));\n    const [, hexAddr] = key.split(':'); // move genesisHash to top-level (TODO Remove from contracts section?)\n\n    json.meta.genesisHash = json.meta.genesisHash || json.meta.contract && json.meta.contract.genesisHash;\n    this.contracts.add(this._store, address, json);\n    this.rewriteKey(json, key, hexAddr, _defaults.contractKey);\n  }\n\n  loadInjected(address, meta) {\n    const json = {\n      address,\n      meta: _objectSpread(_objectSpread({}, meta), {}, {\n        isInjected: true\n      })\n    };\n    const pair = this.keyring.addFromAddress(address, json.meta);\n    this.accounts.add(this._store, pair.address, json);\n  }\n\n  allowGenesis(json) {\n    if (json && json.meta && this.genesisHash) {\n      const hashes = Object.values(_chains.default).find(hashes => hashes.includes(this.genesisHash || '')) || [this.genesisHash];\n\n      if (json.meta.genesisHash) {\n        return hashes.includes(json.meta.genesisHash);\n      } else if (json.meta.contract) {\n        return hashes.includes(json.meta.contract.genesisHash);\n      }\n    }\n\n    return true;\n  }\n\n  loadAll(options, injected = []) {\n    super.initKeyring(options);\n\n    this._store.all((key, json) => {\n      if (options.filter ? options.filter(json) : true) {\n        if (this.allowGenesis(json)) {\n          if (_defaults.accountRegex.test(key)) {\n            this.loadAccount(json, key);\n          } else if (_defaults.addressRegex.test(key)) {\n            this.loadAddress(json, key);\n          } else if (_defaults.contractRegex.test(key)) {\n            this.loadContract(json, key);\n          }\n        }\n      }\n    });\n\n    injected.forEach(account => {\n      if (this.allowGenesis(account)) {\n        this.loadInjected(account.address, account.meta);\n      }\n    });\n\n    _options.default.init(this);\n  }\n\n  restoreAccount(json, password) {\n    const cryptoType = Array.isArray(json.encoding.content) ? json.encoding.content[1] : 'ed25519';\n    const encType = Array.isArray(json.encoding.type) ? json.encoding.type : [json.encoding.type];\n    const pair = (0, _pair.default)({\n      toSS58: this.encodeAddress,\n      type: cryptoType\n    }, {\n      publicKey: this.decodeAddress(json.address, true)\n    }, json.meta, (0, _util.isHex)(json.encoded) ? (0, _util.hexToU8a)(json.encoded) : (0, _utilCrypto.base64Decode)(json.encoded), encType); // unlock, save account and then lock (locking cleans secretKey, so needs to be last)\n\n    pair.decodePkcs8(password);\n    this.addPair(pair, password);\n    pair.lock();\n    return pair;\n  }\n\n  saveAccount(pair, password) {\n    this.addTimestamp(pair);\n    const json = pair.toJson(password);\n    this.keyring.addFromJson(json);\n    this.accounts.add(this._store, pair.address, json);\n    return json;\n  }\n\n  saveAccountMeta(pair, meta) {\n    const address = pair.address;\n\n    this._store.get((0, _defaults.accountKey)(address), json => {\n      pair.setMeta(meta);\n      json.meta = pair.meta;\n      this.accounts.add(this._store, address, json);\n    });\n  }\n\n  saveAddress(address, meta, type = 'address') {\n    const available = this.addresses.subject.getValue();\n    const json = available[address] && available[address].json || {\n      address,\n      meta: {\n        isRecent: undefined,\n        whenCreated: Date.now()\n      }\n    };\n    Object.keys(meta).forEach(key => {\n      json.meta[key] = meta[key];\n    });\n    delete json.meta.isRecent;\n\n    (0, _classPrivateFieldLooseBase2.default)(this, _stores)[_stores][type]().add(this._store, address, json);\n\n    return json;\n  }\n\n  saveContract(address, meta) {\n    return this.saveAddress(address, meta, 'contract');\n  }\n\n  saveRecent(address) {\n    const available = this.addresses.subject.getValue();\n\n    if (!available[address]) {\n      this.addresses.add(this._store, address, {\n        address,\n        meta: {\n          genesisHash: this.genesisHash,\n          isRecent: true,\n          whenCreated: Date.now()\n        }\n      });\n    }\n\n    return this.addresses.subject.getValue()[address];\n  }\n\n}\n\nexports.Keyring = Keyring;\nconst keyringInstance = new Keyring();\nvar _default = keyringInstance;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}