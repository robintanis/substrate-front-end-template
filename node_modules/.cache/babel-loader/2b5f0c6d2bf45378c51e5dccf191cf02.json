{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utilCrypto = require(\"@polkadot/util-crypto\");\n\nvar _defaults = require(\"./defaults\");\n\nvar _pair = _interopRequireDefault(require(\"./pair\"));\n\nvar _pairs2 = _interopRequireDefault(require(\"./pairs\")); // Copyright 2017-2020 @polkadot/keyring authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nconst keypairFromSeed = {\n  ecdsa: seed => (0, _utilCrypto.secp256k1KeypairFromSeed)(seed),\n  ed25519: seed => (0, _utilCrypto.naclKeypairFromSeed)(seed),\n  ethereum: seed => (0, _utilCrypto.secp256k1KeypairFromSeed)(seed),\n  sr25519: seed => (0, _utilCrypto.schnorrkelKeypairFromSeed)(seed)\n};\n/**\n * # @polkadot/keyring\n *\n * ## Overview\n *\n * @name Keyring\n * @summary Keyring management of user accounts\n * @description Allows generation of keyring pairs from a variety of input combinations, such as\n * json object containing account address or public key, account metadata, and account encoded using\n * `addFromJson`, or by providing those values as arguments separately to `addFromAddress`,\n * or by providing the mnemonic (seed phrase) and account metadata as arguments to `addFromMnemonic`.\n * Stores the keyring pairs in a keyring pair dictionary. Removal of the keyring pairs from the keyring pair\n * dictionary is achieved using `removePair`. Retrieval of all the stored pairs via `getPairs` or perform\n * lookup of a pair for a given account address or public key using `getPair`. JSON metadata associated with\n * an account may be obtained using `toJson` accompanied by the account passphrase.\n */\n\nvar _pairs = (0, _classPrivateFieldLooseKey2.default)(\"pairs\");\n\nvar _type = (0, _classPrivateFieldLooseKey2.default)(\"type\");\n\nvar _ss = (0, _classPrivateFieldLooseKey2.default)(\"ss58\");\n\nclass Keyring {\n  constructor(options = {}) {\n    Object.defineProperty(this, _pairs, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _type, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _ss, {\n      writable: true,\n      value: void 0\n    });\n    this.decodeAddress = _utilCrypto.decodeAddress;\n\n    this.encodeAddress = (address, ss58Format) => {\n      return (0, _utilCrypto.encodeAddress)(address, (0, _util.isUndefined)(ss58Format) ? (0, _classPrivateFieldLooseBase2.default)(this, _ss)[_ss] : ss58Format);\n    };\n\n    options.type = options.type || 'ed25519';\n    (0, _util.assert)(options && ['ecdsa', 'ethereum', 'ed25519', 'sr25519'].includes(options.type || 'undefined'), `Expected a keyring type of either 'ed25519', 'sr25519' or 'ecdsa', found '${options.type}`);\n    (0, _classPrivateFieldLooseBase2.default)(this, _pairs)[_pairs] = new _pairs2.default();\n    (0, _classPrivateFieldLooseBase2.default)(this, _ss)[_ss] = options.ss58Format;\n    (0, _classPrivateFieldLooseBase2.default)(this, _type)[_type] = options.type;\n  }\n  /**\n   * @description retrieve the pairs (alias for getPairs)\n   */\n\n\n  get pairs() {\n    return this.getPairs();\n  }\n  /**\n   * @description retrieve the publicKeys (alias for getPublicKeys)\n   */\n\n\n  get publicKeys() {\n    return this.getPublicKeys();\n  }\n  /**\n   * @description Returns the type of the keyring, ed25519, sr25519 or ecdsa\n   */\n\n\n  get type() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _type)[_type];\n  }\n  /**\n   * @name addPair\n   * @summary Stores an account, given a keyring pair, as a Key/Value (public key, pair) in Keyring Pair Dictionary\n   */\n\n\n  addPair(pair) {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _pairs)[_pairs].add(pair);\n  }\n  /**\n   * @name addFromAddress\n   * @summary Stores an account, given an account address, as a Key/Value (public key, pair) in Keyring Pair Dictionary\n   * @description Allows user to explicitely provide separate inputs including account address or public key, and optionally\n   * the associated account metadata, and the default encoded value as arguments (that may be obtained from the json file\n   * of an account backup), and then generates a keyring pair from them that it passes to\n   * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.\n   */\n\n\n  addFromAddress(address, meta = {}, encoded = null, type = this.type, ignoreChecksum, encType) {\n    const publicKey = this.decodeAddress(address, ignoreChecksum);\n    return this.addPair((0, _pair.default)({\n      toSS58: this.encodeAddress,\n      type\n    }, {\n      publicKey,\n      secretKey: new Uint8Array()\n    }, meta, encoded, encType));\n  }\n  /**\n   * @name addFromJson\n   * @summary Stores an account, given JSON data, as a Key/Value (public key, pair) in Keyring Pair Dictionary\n   * @description Allows user to provide a json object argument that contains account information (that may be obtained from the json file\n   * of an account backup), and then generates a keyring pair from it that it passes to\n   * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.\n   */\n\n\n  addFromJson(json, ignoreChecksum) {\n    return this.addPair(this.createFromJson(json, ignoreChecksum));\n  }\n  /**\n   * @name addFromMnemonic\n   * @summary Stores an account, given a mnemonic, as a Key/Value (public key, pair) in Keyring Pair Dictionary\n   * @description Allows user to provide a mnemonic (seed phrase that is provided when account is originally created)\n   * argument and a metadata argument that contains account information (that may be obtained from the json file\n   * of an account backup), and then generates a keyring pair from it that it passes to\n   * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.\n   */\n\n\n  addFromMnemonic(mnemonic, meta = {}, type = this.type) {\n    return this.addFromUri(mnemonic, meta, type);\n  }\n  /**\n   * @name addFromSeed\n   * @summary Stores an account, given seed data, as a Key/Value (public key, pair) in Keyring Pair Dictionary\n   * @description Stores in a keyring pair dictionary the public key of the pair as a key and the pair as the associated value.\n   * Allows user to provide the account seed as an argument, and then generates a keyring pair from it that it passes to\n   * `addPair` to store in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.\n   */\n\n\n  addFromSeed(seed, meta = {}, type = this.type) {\n    return this.addPair((0, _pair.default)({\n      toSS58: this.encodeAddress,\n      type\n    }, keypairFromSeed[type](seed), meta, null));\n  }\n  /**\n   * @name addFromUri\n   * @summary Creates an account via an suri\n   * @description Extracts the phrase, path and password from a SURI format for specifying secret keys `<secret>/<soft-key>//<hard-key>///<password>` (the `///password` may be omitted, and `/<soft-key>` and `//<hard-key>` maybe repeated and mixed). The secret can be a hex string, mnemonic phrase or a string (to be padded)\n   */\n\n\n  addFromUri(suri, meta = {}, type = this.type) {\n    return this.addPair(this.createFromUri(suri, meta, type));\n  }\n  /**\n   * @name createFromJson\n   * @description Creates a pair from a JSON keyfile\n   */\n\n\n  createFromJson({\n    address,\n    encoded,\n    encoding: {\n      content,\n      type,\n      version\n    },\n    meta\n  }, ignoreChecksum) {\n    const cryptoType = version === '0' || !Array.isArray(content) ? this.type : content[1];\n    const encType = !Array.isArray(type) ? [type] : type;\n    const publicKey = (0, _util.isHex)(address) ? (0, _util.hexToU8a)(address) : this.decodeAddress(address, ignoreChecksum);\n    const decoded = (0, _util.isHex)(encoded) ? (0, _util.hexToU8a)(encoded) : (0, _utilCrypto.base64Decode)(encoded);\n    return (0, _pair.default)({\n      toSS58: this.encodeAddress,\n      type: cryptoType\n    }, {\n      publicKey,\n      secretKey: new Uint8Array()\n    }, meta, decoded, encType);\n  }\n  /**\n   * @name createFromUri\n   * @summary Creates a Keypair from an suri\n   * @description This creates a pair from the suri, but does not add it to the keyring\n   */\n\n\n  createFromUri(_suri, meta = {}, type = this.type) {\n    // here we only aut-add the dev phrase if we have a hard-derived path\n    const suri = _suri.startsWith('//') ? `${_defaults.DEV_PHRASE}${_suri}` : _suri;\n    const {\n      password,\n      path,\n      phrase\n    } = (0, _utilCrypto.keyExtractSuri)(suri);\n    let seed;\n\n    if ((0, _util.isHex)(phrase, 256)) {\n      seed = (0, _util.hexToU8a)(phrase);\n    } else {\n      const str = phrase;\n      const parts = str.split(' ');\n\n      if ([12, 15, 18, 21, 24].includes(parts.length)) {\n        seed = type === 'ethereum' ? (0, _utilCrypto.mnemonicToBip39)(phrase) : (0, _utilCrypto.mnemonicToMiniSecret)(phrase, password);\n      } else {\n        (0, _util.assert)(str.length <= 32, 'specified phrase is not a valid mnemonic and is invalid as a raw seed at > 32 bytes');\n        seed = (0, _util.stringToU8a)(str.padEnd(32));\n      }\n    } // FIXME Need to support Ethereum-type derivation paths\n\n\n    const derived = (0, _utilCrypto.keyFromPath)(keypairFromSeed[type](seed), path, type);\n    return (0, _pair.default)({\n      toSS58: this.encodeAddress,\n      type\n    }, derived, meta, null);\n  }\n  /**\n   * @name encodeAddress\n   * @description Encodes the input into an ss58 representation\n   */\n\n  /**\n   * @name getPair\n   * @summary Retrieves an account keyring pair from the Keyring Pair Dictionary, given an account address\n   * @description Returns a keyring pair value from the keyring pair dictionary by performing\n   * a key lookup using the provided account address or public key (after decoding it).\n   */\n\n\n  getPair(address) {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _pairs)[_pairs].get(address);\n  }\n  /**\n   * @name getPairs\n   * @summary Retrieves all account keyring pairs from the Keyring Pair Dictionary\n   * @description Returns an array list of all the keyring pair values that are stored in the keyring pair dictionary.\n   */\n\n\n  getPairs() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _pairs)[_pairs].all();\n  }\n  /**\n   * @name getPublicKeys\n   * @summary Retrieves Public Keys of all Keyring Pairs stored in the Keyring Pair Dictionary\n   * @description Returns an array list of all the public keys associated with each of the keyring pair values that are stored in the keyring pair dictionary.\n   */\n\n\n  getPublicKeys() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _pairs)[_pairs].all().map(({\n      publicKey\n    }) => publicKey);\n  }\n  /**\n   * @name removePair\n   * @description Deletes the provided input address or public key from the stored Keyring Pair Dictionary.\n   */\n\n\n  removePair(address) {\n    (0, _classPrivateFieldLooseBase2.default)(this, _pairs)[_pairs].remove(address);\n  }\n  /**\n   * @name setSS58Format;\n   * @description Sets the ss58 format for the keyring\n   */\n\n\n  setSS58Format(ss58) {\n    (0, _classPrivateFieldLooseBase2.default)(this, _ss)[_ss] = ss58;\n  }\n  /**\n   * @name toJson\n   * @summary Returns a JSON object associated with the input argument that contains metadata assocated with an account\n   * @description Returns a JSON object containing the metadata associated with an account\n   * when valid address or public key and when the account passphrase is provided if the account secret\n   * is not already unlocked and available in memory. Note that in [Polkadot-JS Apps](https://github.com/polkadot-js/apps) the user\n   * may backup their account to a JSON file that contains this information.\n   */\n\n\n  toJson(address, passphrase) {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _pairs)[_pairs].get(address).toJson(passphrase);\n  }\n\n}\n\nexports.default = Keyring;","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/keyring/keyring.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_classPrivateFieldLooseBase2","_classPrivateFieldLooseKey2","_util","_utilCrypto","_defaults","_pair","_pairs2","keypairFromSeed","ecdsa","seed","secp256k1KeypairFromSeed","ed25519","naclKeypairFromSeed","ethereum","sr25519","schnorrkelKeypairFromSeed","_pairs","_type","_ss","Keyring","constructor","options","writable","decodeAddress","encodeAddress","address","ss58Format","isUndefined","type","assert","includes","pairs","getPairs","publicKeys","getPublicKeys","addPair","pair","add","addFromAddress","meta","encoded","ignoreChecksum","encType","publicKey","toSS58","secretKey","Uint8Array","addFromJson","json","createFromJson","addFromMnemonic","mnemonic","addFromUri","addFromSeed","suri","createFromUri","encoding","content","version","cryptoType","Array","isArray","isHex","hexToU8a","decoded","base64Decode","_suri","startsWith","DEV_PHRASE","password","path","phrase","keyExtractSuri","str","parts","split","length","mnemonicToBip39","mnemonicToMiniSecret","stringToU8a","padEnd","derived","keyFromPath","getPair","get","all","map","removePair","remove","setSS58Format","ss58","toJson","passphrase"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utilCrypto = require(\"@polkadot/util-crypto\");\n\nvar _defaults = require(\"./defaults\");\n\nvar _pair = _interopRequireDefault(require(\"./pair\"));\n\nvar _pairs2 = _interopRequireDefault(require(\"./pairs\"));\n\n// Copyright 2017-2020 @polkadot/keyring authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst keypairFromSeed = {\n  ecdsa: seed => (0, _utilCrypto.secp256k1KeypairFromSeed)(seed),\n  ed25519: seed => (0, _utilCrypto.naclKeypairFromSeed)(seed),\n  ethereum: seed => (0, _utilCrypto.secp256k1KeypairFromSeed)(seed),\n  sr25519: seed => (0, _utilCrypto.schnorrkelKeypairFromSeed)(seed)\n};\n/**\n * # @polkadot/keyring\n *\n * ## Overview\n *\n * @name Keyring\n * @summary Keyring management of user accounts\n * @description Allows generation of keyring pairs from a variety of input combinations, such as\n * json object containing account address or public key, account metadata, and account encoded using\n * `addFromJson`, or by providing those values as arguments separately to `addFromAddress`,\n * or by providing the mnemonic (seed phrase) and account metadata as arguments to `addFromMnemonic`.\n * Stores the keyring pairs in a keyring pair dictionary. Removal of the keyring pairs from the keyring pair\n * dictionary is achieved using `removePair`. Retrieval of all the stored pairs via `getPairs` or perform\n * lookup of a pair for a given account address or public key using `getPair`. JSON metadata associated with\n * an account may be obtained using `toJson` accompanied by the account passphrase.\n */\n\nvar _pairs = (0, _classPrivateFieldLooseKey2.default)(\"pairs\");\n\nvar _type = (0, _classPrivateFieldLooseKey2.default)(\"type\");\n\nvar _ss = (0, _classPrivateFieldLooseKey2.default)(\"ss58\");\n\nclass Keyring {\n  constructor(options = {}) {\n    Object.defineProperty(this, _pairs, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _type, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _ss, {\n      writable: true,\n      value: void 0\n    });\n    this.decodeAddress = _utilCrypto.decodeAddress;\n\n    this.encodeAddress = (address, ss58Format) => {\n      return (0, _utilCrypto.encodeAddress)(address, (0, _util.isUndefined)(ss58Format) ? (0, _classPrivateFieldLooseBase2.default)(this, _ss)[_ss] : ss58Format);\n    };\n\n    options.type = options.type || 'ed25519';\n    (0, _util.assert)(options && ['ecdsa', 'ethereum', 'ed25519', 'sr25519'].includes(options.type || 'undefined'), `Expected a keyring type of either 'ed25519', 'sr25519' or 'ecdsa', found '${options.type}`);\n    (0, _classPrivateFieldLooseBase2.default)(this, _pairs)[_pairs] = new _pairs2.default();\n    (0, _classPrivateFieldLooseBase2.default)(this, _ss)[_ss] = options.ss58Format;\n    (0, _classPrivateFieldLooseBase2.default)(this, _type)[_type] = options.type;\n  }\n  /**\n   * @description retrieve the pairs (alias for getPairs)\n   */\n\n\n  get pairs() {\n    return this.getPairs();\n  }\n  /**\n   * @description retrieve the publicKeys (alias for getPublicKeys)\n   */\n\n\n  get publicKeys() {\n    return this.getPublicKeys();\n  }\n  /**\n   * @description Returns the type of the keyring, ed25519, sr25519 or ecdsa\n   */\n\n\n  get type() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _type)[_type];\n  }\n  /**\n   * @name addPair\n   * @summary Stores an account, given a keyring pair, as a Key/Value (public key, pair) in Keyring Pair Dictionary\n   */\n\n\n  addPair(pair) {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _pairs)[_pairs].add(pair);\n  }\n  /**\n   * @name addFromAddress\n   * @summary Stores an account, given an account address, as a Key/Value (public key, pair) in Keyring Pair Dictionary\n   * @description Allows user to explicitely provide separate inputs including account address or public key, and optionally\n   * the associated account metadata, and the default encoded value as arguments (that may be obtained from the json file\n   * of an account backup), and then generates a keyring pair from them that it passes to\n   * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.\n   */\n\n\n  addFromAddress(address, meta = {}, encoded = null, type = this.type, ignoreChecksum, encType) {\n    const publicKey = this.decodeAddress(address, ignoreChecksum);\n    return this.addPair((0, _pair.default)({\n      toSS58: this.encodeAddress,\n      type\n    }, {\n      publicKey,\n      secretKey: new Uint8Array()\n    }, meta, encoded, encType));\n  }\n  /**\n   * @name addFromJson\n   * @summary Stores an account, given JSON data, as a Key/Value (public key, pair) in Keyring Pair Dictionary\n   * @description Allows user to provide a json object argument that contains account information (that may be obtained from the json file\n   * of an account backup), and then generates a keyring pair from it that it passes to\n   * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.\n   */\n\n\n  addFromJson(json, ignoreChecksum) {\n    return this.addPair(this.createFromJson(json, ignoreChecksum));\n  }\n  /**\n   * @name addFromMnemonic\n   * @summary Stores an account, given a mnemonic, as a Key/Value (public key, pair) in Keyring Pair Dictionary\n   * @description Allows user to provide a mnemonic (seed phrase that is provided when account is originally created)\n   * argument and a metadata argument that contains account information (that may be obtained from the json file\n   * of an account backup), and then generates a keyring pair from it that it passes to\n   * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.\n   */\n\n\n  addFromMnemonic(mnemonic, meta = {}, type = this.type) {\n    return this.addFromUri(mnemonic, meta, type);\n  }\n  /**\n   * @name addFromSeed\n   * @summary Stores an account, given seed data, as a Key/Value (public key, pair) in Keyring Pair Dictionary\n   * @description Stores in a keyring pair dictionary the public key of the pair as a key and the pair as the associated value.\n   * Allows user to provide the account seed as an argument, and then generates a keyring pair from it that it passes to\n   * `addPair` to store in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.\n   */\n\n\n  addFromSeed(seed, meta = {}, type = this.type) {\n    return this.addPair((0, _pair.default)({\n      toSS58: this.encodeAddress,\n      type\n    }, keypairFromSeed[type](seed), meta, null));\n  }\n  /**\n   * @name addFromUri\n   * @summary Creates an account via an suri\n   * @description Extracts the phrase, path and password from a SURI format for specifying secret keys `<secret>/<soft-key>//<hard-key>///<password>` (the `///password` may be omitted, and `/<soft-key>` and `//<hard-key>` maybe repeated and mixed). The secret can be a hex string, mnemonic phrase or a string (to be padded)\n   */\n\n\n  addFromUri(suri, meta = {}, type = this.type) {\n    return this.addPair(this.createFromUri(suri, meta, type));\n  }\n  /**\n   * @name createFromJson\n   * @description Creates a pair from a JSON keyfile\n   */\n\n\n  createFromJson({\n    address,\n    encoded,\n    encoding: {\n      content,\n      type,\n      version\n    },\n    meta\n  }, ignoreChecksum) {\n    const cryptoType = version === '0' || !Array.isArray(content) ? this.type : content[1];\n    const encType = !Array.isArray(type) ? [type] : type;\n    const publicKey = (0, _util.isHex)(address) ? (0, _util.hexToU8a)(address) : this.decodeAddress(address, ignoreChecksum);\n    const decoded = (0, _util.isHex)(encoded) ? (0, _util.hexToU8a)(encoded) : (0, _utilCrypto.base64Decode)(encoded);\n    return (0, _pair.default)({\n      toSS58: this.encodeAddress,\n      type: cryptoType\n    }, {\n      publicKey,\n      secretKey: new Uint8Array()\n    }, meta, decoded, encType);\n  }\n  /**\n   * @name createFromUri\n   * @summary Creates a Keypair from an suri\n   * @description This creates a pair from the suri, but does not add it to the keyring\n   */\n\n\n  createFromUri(_suri, meta = {}, type = this.type) {\n    // here we only aut-add the dev phrase if we have a hard-derived path\n    const suri = _suri.startsWith('//') ? `${_defaults.DEV_PHRASE}${_suri}` : _suri;\n    const {\n      password,\n      path,\n      phrase\n    } = (0, _utilCrypto.keyExtractSuri)(suri);\n    let seed;\n\n    if ((0, _util.isHex)(phrase, 256)) {\n      seed = (0, _util.hexToU8a)(phrase);\n    } else {\n      const str = phrase;\n      const parts = str.split(' ');\n\n      if ([12, 15, 18, 21, 24].includes(parts.length)) {\n        seed = type === 'ethereum' ? (0, _utilCrypto.mnemonicToBip39)(phrase) : (0, _utilCrypto.mnemonicToMiniSecret)(phrase, password);\n      } else {\n        (0, _util.assert)(str.length <= 32, 'specified phrase is not a valid mnemonic and is invalid as a raw seed at > 32 bytes');\n        seed = (0, _util.stringToU8a)(str.padEnd(32));\n      }\n    } // FIXME Need to support Ethereum-type derivation paths\n\n\n    const derived = (0, _utilCrypto.keyFromPath)(keypairFromSeed[type](seed), path, type);\n    return (0, _pair.default)({\n      toSS58: this.encodeAddress,\n      type\n    }, derived, meta, null);\n  }\n  /**\n   * @name encodeAddress\n   * @description Encodes the input into an ss58 representation\n   */\n\n\n  /**\n   * @name getPair\n   * @summary Retrieves an account keyring pair from the Keyring Pair Dictionary, given an account address\n   * @description Returns a keyring pair value from the keyring pair dictionary by performing\n   * a key lookup using the provided account address or public key (after decoding it).\n   */\n  getPair(address) {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _pairs)[_pairs].get(address);\n  }\n  /**\n   * @name getPairs\n   * @summary Retrieves all account keyring pairs from the Keyring Pair Dictionary\n   * @description Returns an array list of all the keyring pair values that are stored in the keyring pair dictionary.\n   */\n\n\n  getPairs() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _pairs)[_pairs].all();\n  }\n  /**\n   * @name getPublicKeys\n   * @summary Retrieves Public Keys of all Keyring Pairs stored in the Keyring Pair Dictionary\n   * @description Returns an array list of all the public keys associated with each of the keyring pair values that are stored in the keyring pair dictionary.\n   */\n\n\n  getPublicKeys() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _pairs)[_pairs].all().map(({\n      publicKey\n    }) => publicKey);\n  }\n  /**\n   * @name removePair\n   * @description Deletes the provided input address or public key from the stored Keyring Pair Dictionary.\n   */\n\n\n  removePair(address) {\n    (0, _classPrivateFieldLooseBase2.default)(this, _pairs)[_pairs].remove(address);\n  }\n  /**\n   * @name setSS58Format;\n   * @description Sets the ss58 format for the keyring\n   */\n\n\n  setSS58Format(ss58) {\n    (0, _classPrivateFieldLooseBase2.default)(this, _ss)[_ss] = ss58;\n  }\n  /**\n   * @name toJson\n   * @summary Returns a JSON object associated with the input argument that contains metadata assocated with an account\n   * @description Returns a JSON object containing the metadata associated with an account\n   * when valid address or public key and when the account passphrase is provided if the account secret\n   * is not already unlocked and available in memory. Note that in [Polkadot-JS Apps](https://github.com/polkadot-js/apps) the user\n   * may backup their account to a JSON file that contains this information.\n   */\n\n\n  toJson(address, passphrase) {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _pairs)[_pairs].get(address).toJson(passphrase);\n  }\n\n}\n\nexports.default = Keyring;"]},"metadata":{},"sourceType":"script"}