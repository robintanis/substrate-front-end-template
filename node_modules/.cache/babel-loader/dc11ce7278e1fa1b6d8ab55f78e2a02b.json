{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findSi = findSi;\nexports.calcSi = calcSi;\nexports.SI = exports.SI_MID = void 0; // Copyright 2017-2020 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nconst SI_MID = 8;\nexports.SI_MID = SI_MID;\nconst SI = [{\n  power: -24,\n  text: 'yocto',\n  value: 'y'\n}, {\n  power: -21,\n  text: 'zepto',\n  value: 'z'\n}, {\n  power: -18,\n  text: 'atto',\n  value: 'a'\n}, {\n  power: -15,\n  text: 'femto',\n  value: 'f'\n}, {\n  power: -12,\n  text: 'pico',\n  value: 'p'\n}, {\n  power: -9,\n  text: 'nano',\n  value: 'n'\n}, {\n  power: -6,\n  text: 'micro',\n  value: 'µ'\n}, {\n  power: -3,\n  text: 'milli',\n  value: 'm'\n}, {\n  power: 0,\n  text: 'Unit',\n  value: '-'\n}, // position 8\n{\n  power: 3,\n  text: 'Kilo',\n  value: 'k'\n}, {\n  power: 6,\n  text: 'Mega',\n  value: 'M'\n}, {\n  power: 9,\n  text: 'Giga',\n  value: 'G'\n}, {\n  power: 12,\n  text: 'Tera',\n  value: 'T'\n}, {\n  power: 15,\n  text: 'Peta',\n  value: 'P'\n}, {\n  power: 18,\n  text: 'Exa',\n  value: 'E'\n}, {\n  power: 21,\n  text: 'Zeta',\n  value: 'Z'\n}, {\n  power: 24,\n  text: 'Yotta',\n  value: 'Y'\n}]; // Given a SI type (e.g. k, m, Y) find the SI definition\n\nexports.SI = SI;\n\nfunction findSi(type) {\n  // use a loop here, better RN support (which doesn't have [].find)\n  for (let i = 0; i < SI.length; i++) {\n    if (SI[i].value === type) {\n      return SI[i];\n    }\n  }\n\n  return SI[SI_MID];\n}\n\nfunction calcSi(text, decimals, forceUnit) {\n  if (forceUnit) {\n    return findSi(forceUnit);\n  }\n\n  const siDefIndex = SI_MID - 1 + Math.ceil((text.length - decimals) / 3);\n  return SI[siDefIndex] || SI[siDefIndex < 0 ? 0 : SI.length - 1];\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/util/format/si.js"],"names":["Object","defineProperty","exports","value","findSi","calcSi","SI","SI_MID","power","text","type","i","length","decimals","forceUnit","siDefIndex","Math","ceil"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findSi = findSi;\nexports.calcSi = calcSi;\nexports.SI = exports.SI_MID = void 0;\n// Copyright 2017-2020 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst SI_MID = 8;\nexports.SI_MID = SI_MID;\nconst SI = [{\n  power: -24,\n  text: 'yocto',\n  value: 'y'\n}, {\n  power: -21,\n  text: 'zepto',\n  value: 'z'\n}, {\n  power: -18,\n  text: 'atto',\n  value: 'a'\n}, {\n  power: -15,\n  text: 'femto',\n  value: 'f'\n}, {\n  power: -12,\n  text: 'pico',\n  value: 'p'\n}, {\n  power: -9,\n  text: 'nano',\n  value: 'n'\n}, {\n  power: -6,\n  text: 'micro',\n  value: 'µ'\n}, {\n  power: -3,\n  text: 'milli',\n  value: 'm'\n}, {\n  power: 0,\n  text: 'Unit',\n  value: '-'\n}, // position 8\n{\n  power: 3,\n  text: 'Kilo',\n  value: 'k'\n}, {\n  power: 6,\n  text: 'Mega',\n  value: 'M'\n}, {\n  power: 9,\n  text: 'Giga',\n  value: 'G'\n}, {\n  power: 12,\n  text: 'Tera',\n  value: 'T'\n}, {\n  power: 15,\n  text: 'Peta',\n  value: 'P'\n}, {\n  power: 18,\n  text: 'Exa',\n  value: 'E'\n}, {\n  power: 21,\n  text: 'Zeta',\n  value: 'Z'\n}, {\n  power: 24,\n  text: 'Yotta',\n  value: 'Y'\n}]; // Given a SI type (e.g. k, m, Y) find the SI definition\n\nexports.SI = SI;\n\nfunction findSi(type) {\n  // use a loop here, better RN support (which doesn't have [].find)\n  for (let i = 0; i < SI.length; i++) {\n    if (SI[i].value === type) {\n      return SI[i];\n    }\n  }\n\n  return SI[SI_MID];\n}\n\nfunction calcSi(text, decimals, forceUnit) {\n  if (forceUnit) {\n    return findSi(forceUnit);\n  }\n\n  const siDefIndex = SI_MID - 1 + Math.ceil((text.length - decimals) / 3);\n  return SI[siDefIndex] || SI[siDefIndex < 0 ? 0 : SI.length - 1];\n}"]},"metadata":{},"sourceType":"script"}