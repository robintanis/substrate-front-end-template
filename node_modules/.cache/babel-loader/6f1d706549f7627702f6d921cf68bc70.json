{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utils = require(\"./utils\");\n\nvar _AbstractArray = _interopRequireDefault(require(\"./AbstractArray\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\n\n\nfunction decodeTuple(registry, _Types, value) {\n  if ((0, _util.isU8a)(value)) {\n    return (0, _utils.decodeU8a)(registry, value, _Types);\n  } else if ((0, _util.isHex)(value)) {\n    return decodeTuple(registry, _Types, (0, _util.hexToU8a)(value));\n  }\n\n  const Types = Array.isArray(_Types) ? _Types : Object.values(_Types);\n  return Types.map((Type, index) => {\n    try {\n      const entry = value === null || value === void 0 ? void 0 : value[index];\n\n      if (entry instanceof Type) {\n        return entry;\n      }\n\n      return new Type(registry, entry);\n    } catch (error) {\n      throw new Error(`Tuple: failed on ${index}:: ${error.message}`);\n    }\n  });\n}\n/**\n * @name Tuple\n * @description\n * A Tuple defines an anonymous fixed-length array, where each element has its\n * own type. It extends the base JS `Array` object.\n */\n\n\nclass Tuple extends _AbstractArray.default {\n  constructor(registry, Types, value) {\n    const Clazzes = Array.isArray(Types) ? Types.map(type => (0, _utils.typeToConstructor)(registry, type)) : (0, _utils.mapToTypeMap)(registry, Types);\n    super(registry, ...decodeTuple(registry, Clazzes, value));\n    this._Types = void 0;\n    this._Types = Clazzes;\n  }\n\n  static with(Types) {\n    return class extends Tuple {\n      constructor(registry, value) {\n        super(registry, Types, value);\n      }\n\n    };\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.reduce((length, entry) => {\n      length += entry.encodedLength;\n      return length;\n    }, 0);\n  }\n  /**\n   * @description The types definition of the tuple\n   */\n\n\n  get Types() {\n    return Array.isArray(this._Types) ? this._Types.map(Type => new Type(this.registry).toRawType()) : Object.keys(this._Types);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    const types = (Array.isArray(this._Types) ? this._Types : Object.values(this._Types)).map(Type => this.registry.getClassName(Type) || new Type(this.registry).toRawType());\n    return `(${types.join(',')})`;\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    // Overwrite the default toString representation of Array.\n    return JSON.stringify(this.toJSON());\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    return (0, _util.u8aConcat)(...this.map(entry => entry.toU8a(isBare)));\n  }\n\n}\n\nexports.default = Tuple;","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/types/codec/Tuple.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_util","_utils","_AbstractArray","decodeTuple","registry","_Types","isU8a","decodeU8a","isHex","hexToU8a","Types","Array","isArray","values","map","Type","index","entry","error","Error","message","Tuple","constructor","Clazzes","type","typeToConstructor","mapToTypeMap","with","encodedLength","reduce","length","toRawType","keys","types","getClassName","join","toString","JSON","stringify","toJSON","toU8a","isBare","u8aConcat"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utils = require(\"./utils\");\n\nvar _AbstractArray = _interopRequireDefault(require(\"./AbstractArray\"));\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\nfunction decodeTuple(registry, _Types, value) {\n  if ((0, _util.isU8a)(value)) {\n    return (0, _utils.decodeU8a)(registry, value, _Types);\n  } else if ((0, _util.isHex)(value)) {\n    return decodeTuple(registry, _Types, (0, _util.hexToU8a)(value));\n  }\n\n  const Types = Array.isArray(_Types) ? _Types : Object.values(_Types);\n  return Types.map((Type, index) => {\n    try {\n      const entry = value === null || value === void 0 ? void 0 : value[index];\n\n      if (entry instanceof Type) {\n        return entry;\n      }\n\n      return new Type(registry, entry);\n    } catch (error) {\n      throw new Error(`Tuple: failed on ${index}:: ${error.message}`);\n    }\n  });\n}\n/**\n * @name Tuple\n * @description\n * A Tuple defines an anonymous fixed-length array, where each element has its\n * own type. It extends the base JS `Array` object.\n */\n\n\nclass Tuple extends _AbstractArray.default {\n  constructor(registry, Types, value) {\n    const Clazzes = Array.isArray(Types) ? Types.map(type => (0, _utils.typeToConstructor)(registry, type)) : (0, _utils.mapToTypeMap)(registry, Types);\n    super(registry, ...decodeTuple(registry, Clazzes, value));\n    this._Types = void 0;\n    this._Types = Clazzes;\n  }\n\n  static with(Types) {\n    return class extends Tuple {\n      constructor(registry, value) {\n        super(registry, Types, value);\n      }\n\n    };\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.reduce((length, entry) => {\n      length += entry.encodedLength;\n      return length;\n    }, 0);\n  }\n  /**\n   * @description The types definition of the tuple\n   */\n\n\n  get Types() {\n    return Array.isArray(this._Types) ? this._Types.map(Type => new Type(this.registry).toRawType()) : Object.keys(this._Types);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    const types = (Array.isArray(this._Types) ? this._Types : Object.values(this._Types)).map(Type => this.registry.getClassName(Type) || new Type(this.registry).toRawType());\n    return `(${types.join(',')})`;\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    // Overwrite the default toString representation of Array.\n    return JSON.stringify(this.toJSON());\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    return (0, _util.u8aConcat)(...this.map(entry => entry.toU8a(isBare)));\n  }\n\n}\n\nexports.default = Tuple;"]},"metadata":{},"sourceType":"script"}