{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\"); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\n\n\nfunction decodeBool(value) {\n  if (value instanceof Boolean) {\n    return value.valueOf();\n  } else if ((0, _util.isU8a)(value)) {\n    return value[0] === 1;\n  }\n\n  return !!value;\n}\n/**\n * @name Bool\n * @description\n * Representation for a boolean value in the system. It extends the base JS `Boolean` class\n * @noInheritDoc\n */\n\n\nclass Bool extends Boolean {\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  constructor(registry, value = false) {\n    super(decodeBool(value));\n    this.registry = void 0;\n    this.registry = registry;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return 1;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.createType('H256', this.registry.hash(this.toU8a()));\n  }\n  /**\n   * @description Checks if the value is an empty value (true when it wraps false/default)\n   */\n\n\n  get isEmpty() {\n    return this.isFalse;\n  }\n  /**\n   * @description Checks if the value is an empty value (always false)\n   */\n\n\n  get isFalse() {\n    return !this.isTrue;\n  }\n  /**\n   * @description Checks if the value is an empty value (always false)\n   */\n\n\n  get isTrue() {\n    return this.valueOf();\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return this.valueOf() === (other instanceof Boolean ? other.valueOf() : other);\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    return (0, _util.u8aToHex)(this.toU8a());\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.valueOf();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'bool';\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return this.toJSON().toString();\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toU8a(isBare) {\n    return new Uint8Array([this.valueOf() ? 1 : 0]);\n  }\n\n}\n\nexports.default = Bool;","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/types/primitive/Bool.js"],"names":["Object","defineProperty","exports","value","default","_util","require","decodeBool","Boolean","valueOf","isU8a","Bool","constructor","registry","encodedLength","hash","createType","toU8a","isEmpty","isFalse","isTrue","eq","other","toHex","u8aToHex","toHuman","toJSON","toRawType","toString","isBare","Uint8Array"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB,C,CAEA;AACA;;AAEA;;;AACA,SAASC,UAAT,CAAoBJ,KAApB,EAA2B;AACzB,MAAIA,KAAK,YAAYK,OAArB,EAA8B;AAC5B,WAAOL,KAAK,CAACM,OAAN,EAAP;AACD,GAFD,MAEO,IAAI,CAAC,GAAGJ,KAAK,CAACK,KAAV,EAAiBP,KAAjB,CAAJ,EAA6B;AAClC,WAAOA,KAAK,CAAC,CAAD,CAAL,KAAa,CAApB;AACD;;AAED,SAAO,CAAC,CAACA,KAAT;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,MAAMQ,IAAN,SAAmBH,OAAnB,CAA2B;AACzB;AACAI,EAAAA,WAAW,CAACC,QAAD,EAAWV,KAAK,GAAG,KAAnB,EAA0B;AACnC,UAAMI,UAAU,CAACJ,KAAD,CAAhB;AACA,SAAKU,QAAL,GAAgB,KAAK,CAArB;AACA,SAAKA,QAAL,GAAgBA,QAAhB;AACD;AACD;AACF;AACA;;;AAGE,MAAIC,aAAJ,GAAoB;AAClB,WAAO,CAAP;AACD;AACD;AACF;AACA;;;AAGE,MAAIC,IAAJ,GAAW;AACT,WAAO,KAAKF,QAAL,CAAcG,UAAd,CAAyB,MAAzB,EAAiC,KAAKH,QAAL,CAAcE,IAAd,CAAmB,KAAKE,KAAL,EAAnB,CAAjC,CAAP;AACD;AACD;AACF;AACA;;;AAGE,MAAIC,OAAJ,GAAc;AACZ,WAAO,KAAKC,OAAZ;AACD;AACD;AACF;AACA;;;AAGE,MAAIA,OAAJ,GAAc;AACZ,WAAO,CAAC,KAAKC,MAAb;AACD;AACD;AACF;AACA;;;AAGE,MAAIA,MAAJ,GAAa;AACX,WAAO,KAAKX,OAAL,EAAP;AACD;AACD;AACF;AACA;;;AAGEY,EAAAA,EAAE,CAACC,KAAD,EAAQ;AACR,WAAO,KAAKb,OAAL,QAAoBa,KAAK,YAAYd,OAAjB,GAA2Bc,KAAK,CAACb,OAAN,EAA3B,GAA6Ca,KAAjE,CAAP;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,KAAK,GAAG;AACN,WAAO,CAAC,GAAGlB,KAAK,CAACmB,QAAV,EAAoB,KAAKP,KAAL,EAApB,CAAP;AACD;AACD;AACF;AACA;;;AAGEQ,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKC,MAAL,EAAP;AACD;AACD;AACF;AACA;;;AAGEA,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKjB,OAAL,EAAP;AACD;AACD;AACF;AACA;;;AAGEkB,EAAAA,SAAS,GAAG;AACV,WAAO,MAAP;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,QAAQ,GAAG;AACT,WAAO,KAAKF,MAAL,GAAcE,QAAd,EAAP;AACD;AACD;AACF;AACA;AACA;AACE;;;AAGAX,EAAAA,KAAK,CAACY,MAAD,EAAS;AACZ,WAAO,IAAIC,UAAJ,CAAe,CAAC,KAAKrB,OAAL,KAAiB,CAAjB,GAAqB,CAAtB,CAAf,CAAP;AACD;;AAxGwB;;AA4G3BP,OAAO,CAACE,OAAR,GAAkBO,IAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\nfunction decodeBool(value) {\n  if (value instanceof Boolean) {\n    return value.valueOf();\n  } else if ((0, _util.isU8a)(value)) {\n    return value[0] === 1;\n  }\n\n  return !!value;\n}\n/**\n * @name Bool\n * @description\n * Representation for a boolean value in the system. It extends the base JS `Boolean` class\n * @noInheritDoc\n */\n\n\nclass Bool extends Boolean {\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  constructor(registry, value = false) {\n    super(decodeBool(value));\n    this.registry = void 0;\n    this.registry = registry;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return 1;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.createType('H256', this.registry.hash(this.toU8a()));\n  }\n  /**\n   * @description Checks if the value is an empty value (true when it wraps false/default)\n   */\n\n\n  get isEmpty() {\n    return this.isFalse;\n  }\n  /**\n   * @description Checks if the value is an empty value (always false)\n   */\n\n\n  get isFalse() {\n    return !this.isTrue;\n  }\n  /**\n   * @description Checks if the value is an empty value (always false)\n   */\n\n\n  get isTrue() {\n    return this.valueOf();\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return this.valueOf() === (other instanceof Boolean ? other.valueOf() : other);\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    return (0, _util.u8aToHex)(this.toU8a());\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.valueOf();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'bool';\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return this.toJSON().toString();\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toU8a(isBare) {\n    return new Uint8Array([this.valueOf() ? 1 : 0]);\n  }\n\n}\n\nexports.default = Bool;"]},"metadata":{},"sourceType":"script"}