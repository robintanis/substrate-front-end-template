{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._stakerExposure = _stakerExposure;\nexports.stakerExposure = stakerExposure;\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"../util\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nfunction _stakerExposure(instanceId, api) {\n  return (0, _util.memo)(instanceId, (accountId, eras, withActive) => {\n    const stakerId = api.registry.createType('AccountId', accountId).toString();\n    return api.derive.staking._erasExposure(eras, withActive).pipe((0, _operators.map)(exposures => exposures.map(({\n      era,\n      nominators: allNominators,\n      validators: allValidators\n    }) => {\n      const isValidator = !!allValidators[stakerId];\n      const validators = {};\n      const nominating = allNominators[stakerId] || [];\n\n      if (isValidator) {\n        validators[stakerId] = allValidators[stakerId];\n      } else if (nominating) {\n        nominating.forEach(({\n          validatorId\n        }) => {\n          validators[validatorId] = allValidators[validatorId];\n        });\n      }\n\n      return {\n        era,\n        isEmpty: !Object.keys(validators).length,\n        isValidator,\n        nominating,\n        validators\n      };\n    })));\n  });\n}\n\nfunction stakerExposure(instanceId, api) {\n  return (0, _util.memo)(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0, _operators.switchMap)(eras => api.derive.staking._stakerExposure(accountId, eras, withActive))));\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/api-derive/staking/stakerExposure.js"],"names":["Object","defineProperty","exports","value","_stakerExposure","stakerExposure","_operators","require","_util","instanceId","api","memo","accountId","eras","withActive","stakerId","registry","createType","toString","derive","staking","_erasExposure","pipe","map","exposures","era","nominators","allNominators","validators","allValidators","isValidator","nominating","forEach","validatorId","isEmpty","keys","length","erasHistoric","switchMap"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,eAAR,GAA0BA,eAA1B;AACAF,OAAO,CAACG,cAAR,GAAyBA,cAAzB;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,gBAAD,CAAxB;;AAEA,IAAIC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAAnB,C,CAEA;AACA;;;AACA,SAASH,eAAT,CAAyBK,UAAzB,EAAqCC,GAArC,EAA0C;AACxC,SAAO,CAAC,GAAGF,KAAK,CAACG,IAAV,EAAgBF,UAAhB,EAA4B,CAACG,SAAD,EAAYC,IAAZ,EAAkBC,UAAlB,KAAiC;AAClE,UAAMC,QAAQ,GAAGL,GAAG,CAACM,QAAJ,CAAaC,UAAb,CAAwB,WAAxB,EAAqCL,SAArC,EAAgDM,QAAhD,EAAjB;AACA,WAAOR,GAAG,CAACS,MAAJ,CAAWC,OAAX,CAAmBC,aAAnB,CAAiCR,IAAjC,EAAuCC,UAAvC,EAAmDQ,IAAnD,CAAwD,CAAC,GAAGhB,UAAU,CAACiB,GAAf,EAAoBC,SAAS,IAAIA,SAAS,CAACD,GAAV,CAAc,CAAC;AAC7GE,MAAAA,GAD6G;AAE7GC,MAAAA,UAAU,EAAEC,aAFiG;AAG7GC,MAAAA,UAAU,EAAEC;AAHiG,KAAD,KAIxG;AACJ,YAAMC,WAAW,GAAG,CAAC,CAACD,aAAa,CAACd,QAAD,CAAnC;AACA,YAAMa,UAAU,GAAG,EAAnB;AACA,YAAMG,UAAU,GAAGJ,aAAa,CAACZ,QAAD,CAAb,IAA2B,EAA9C;;AAEA,UAAIe,WAAJ,EAAiB;AACfF,QAAAA,UAAU,CAACb,QAAD,CAAV,GAAuBc,aAAa,CAACd,QAAD,CAApC;AACD,OAFD,MAEO,IAAIgB,UAAJ,EAAgB;AACrBA,QAAAA,UAAU,CAACC,OAAX,CAAmB,CAAC;AAClBC,UAAAA;AADkB,SAAD,KAEb;AACJL,UAAAA,UAAU,CAACK,WAAD,CAAV,GAA0BJ,aAAa,CAACI,WAAD,CAAvC;AACD,SAJD;AAKD;;AAED,aAAO;AACLR,QAAAA,GADK;AAELS,QAAAA,OAAO,EAAE,CAAClC,MAAM,CAACmC,IAAP,CAAYP,UAAZ,EAAwBQ,MAF7B;AAGLN,QAAAA,WAHK;AAILC,QAAAA,UAJK;AAKLH,QAAAA;AALK,OAAP;AAOD,KA1B+F,CAAjC,CAAxD,CAAP;AA2BD,GA7BM,CAAP;AA8BD;;AAED,SAASvB,cAAT,CAAwBI,UAAxB,EAAoCC,GAApC,EAAyC;AACvC,SAAO,CAAC,GAAGF,KAAK,CAACG,IAAV,EAAgBF,UAAhB,EAA4B,CAACG,SAAD,EAAYE,UAAU,GAAG,KAAzB,KAAmCJ,GAAG,CAACS,MAAJ,CAAWC,OAAX,CAAmBiB,YAAnB,CAAgCvB,UAAhC,EAA4CQ,IAA5C,CAAiD,CAAC,GAAGhB,UAAU,CAACgC,SAAf,EAA0BzB,IAAI,IAAIH,GAAG,CAACS,MAAJ,CAAWC,OAAX,CAAmBhB,eAAnB,CAAmCQ,SAAnC,EAA8CC,IAA9C,EAAoDC,UAApD,CAAlC,CAAjD,CAA/D,CAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._stakerExposure = _stakerExposure;\nexports.stakerExposure = stakerExposure;\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"../util\");\n\n// Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction _stakerExposure(instanceId, api) {\n  return (0, _util.memo)(instanceId, (accountId, eras, withActive) => {\n    const stakerId = api.registry.createType('AccountId', accountId).toString();\n    return api.derive.staking._erasExposure(eras, withActive).pipe((0, _operators.map)(exposures => exposures.map(({\n      era,\n      nominators: allNominators,\n      validators: allValidators\n    }) => {\n      const isValidator = !!allValidators[stakerId];\n      const validators = {};\n      const nominating = allNominators[stakerId] || [];\n\n      if (isValidator) {\n        validators[stakerId] = allValidators[stakerId];\n      } else if (nominating) {\n        nominating.forEach(({\n          validatorId\n        }) => {\n          validators[validatorId] = allValidators[validatorId];\n        });\n      }\n\n      return {\n        era,\n        isEmpty: !Object.keys(validators).length,\n        isValidator,\n        nominating,\n        validators\n      };\n    })));\n  });\n}\n\nfunction stakerExposure(instanceId, api) {\n  return (0, _util.memo)(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0, _operators.switchMap)(eras => api.derive.staking._stakerExposure(accountId, eras, withActive))));\n}"]},"metadata":{},"sourceType":"script"}