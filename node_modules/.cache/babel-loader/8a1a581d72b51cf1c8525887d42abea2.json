{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.EXTRINSIC_VERSION = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Struct = _interopRequireDefault(require(\"../../codec/Struct\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nconst EXTRINSIC_VERSION = 4;\nexports.EXTRINSIC_VERSION = EXTRINSIC_VERSION;\n/**\n * @name GenericExtrinsicV4\n * @description\n * The third generation of compact extrinsics\n */\n\nclass ExtrinsicV4 extends _Struct.default {\n  constructor(registry, value, {\n    isSigned\n  } = {}) {\n    super(registry, {\n      signature: 'ExtrinsicSignatureV4',\n      // eslint-disable-next-line sort-keys\n      method: 'Call'\n    }, ExtrinsicV4.decodeExtrinsic(registry, value, isSigned));\n  }\n  /** @internal */\n\n\n  static decodeExtrinsic(registry, value, isSigned = false) {\n    if (value instanceof ExtrinsicV4) {\n      return value;\n    } else if (value instanceof registry.createClass('Call')) {\n      return {\n        method: value\n      };\n    } else if ((0, _util.isU8a)(value)) {\n      // here we decode manually since we need to pull through the version information\n      const signature = registry.createType('ExtrinsicSignatureV4', value, {\n        isSigned\n      });\n      const method = registry.createType('Call', value.subarray(signature.encodedLength));\n      return {\n        method,\n        signature\n      };\n    }\n\n    return value || {};\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description The [[Call]] this extrinsic wraps\n   */\n\n\n  get method() {\n    return this.get('method');\n  }\n  /**\n   * @description The [[ExtrinsicSignatureV4]]\n   */\n\n\n  get signature() {\n    return this.get('signature');\n  }\n  /**\n   * @description The version for the signature\n   */\n\n\n  get version() {\n    return EXTRINSIC_VERSION;\n  }\n  /**\n   * @description Add an [[ExtrinsicSignatureV4]] to the extrinsic (already generated)\n   */\n\n\n  addSignature(signer, signature, payload) {\n    this.signature.addSignature(signer, signature, payload);\n    return this;\n  }\n  /**\n   * @description Sign the extrinsic with a specific keypair\n   */\n\n\n  sign(account, options) {\n    this.signature.sign(this.method, account, options);\n    return this;\n  }\n  /**\n   * @describe Adds a fake signature to the extrinsic\n   */\n\n\n  signFake(signer, options) {\n    this.signature.signFake(this.method, signer, options);\n    return this;\n  }\n\n}\n\nexports.default = ExtrinsicV4;","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/types/extrinsic/v4/Extrinsic.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","EXTRINSIC_VERSION","_util","_Struct","ExtrinsicV4","constructor","registry","isSigned","signature","method","decodeExtrinsic","createClass","isU8a","createType","subarray","encodedLength","toU8a","length","get","version","addSignature","signer","payload","sign","account","options","signFake"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.EXTRINSIC_VERSION = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Struct = _interopRequireDefault(require(\"../../codec/Struct\"));\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst EXTRINSIC_VERSION = 4;\nexports.EXTRINSIC_VERSION = EXTRINSIC_VERSION;\n\n/**\n * @name GenericExtrinsicV4\n * @description\n * The third generation of compact extrinsics\n */\nclass ExtrinsicV4 extends _Struct.default {\n  constructor(registry, value, {\n    isSigned\n  } = {}) {\n    super(registry, {\n      signature: 'ExtrinsicSignatureV4',\n      // eslint-disable-next-line sort-keys\n      method: 'Call'\n    }, ExtrinsicV4.decodeExtrinsic(registry, value, isSigned));\n  }\n  /** @internal */\n\n\n  static decodeExtrinsic(registry, value, isSigned = false) {\n    if (value instanceof ExtrinsicV4) {\n      return value;\n    } else if (value instanceof registry.createClass('Call')) {\n      return {\n        method: value\n      };\n    } else if ((0, _util.isU8a)(value)) {\n      // here we decode manually since we need to pull through the version information\n      const signature = registry.createType('ExtrinsicSignatureV4', value, {\n        isSigned\n      });\n      const method = registry.createType('Call', value.subarray(signature.encodedLength));\n      return {\n        method,\n        signature\n      };\n    }\n\n    return value || {};\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description The [[Call]] this extrinsic wraps\n   */\n\n\n  get method() {\n    return this.get('method');\n  }\n  /**\n   * @description The [[ExtrinsicSignatureV4]]\n   */\n\n\n  get signature() {\n    return this.get('signature');\n  }\n  /**\n   * @description The version for the signature\n   */\n\n\n  get version() {\n    return EXTRINSIC_VERSION;\n  }\n  /**\n   * @description Add an [[ExtrinsicSignatureV4]] to the extrinsic (already generated)\n   */\n\n\n  addSignature(signer, signature, payload) {\n    this.signature.addSignature(signer, signature, payload);\n    return this;\n  }\n  /**\n   * @description Sign the extrinsic with a specific keypair\n   */\n\n\n  sign(account, options) {\n    this.signature.sign(this.method, account, options);\n    return this;\n  }\n  /**\n   * @describe Adds a fake signature to the extrinsic\n   */\n\n\n  signFake(signer, options) {\n    this.signature.signFake(this.method, signer, options);\n    return this;\n  }\n\n}\n\nexports.default = ExtrinsicV4;"]},"metadata":{},"sourceType":"script"}