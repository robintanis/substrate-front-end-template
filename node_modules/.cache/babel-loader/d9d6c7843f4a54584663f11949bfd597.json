{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createClass = createClass;\nexports.ClassOfUnsafe = ClassOfUnsafe;\nexports.ClassOf = ClassOf;\nexports.getTypeClass = getTypeClass;\n\nvar _types = require(\"./types\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _BTreeMap = _interopRequireDefault(require(\"../codec/BTreeMap\"));\n\nvar _BTreeSet = _interopRequireDefault(require(\"../codec/BTreeSet\"));\n\nvar _Compact = _interopRequireDefault(require(\"../codec/Compact\"));\n\nvar _Enum = _interopRequireDefault(require(\"../codec/Enum\"));\n\nvar _HashMap = _interopRequireDefault(require(\"../codec/HashMap\"));\n\nvar _Int = _interopRequireDefault(require(\"../codec/Int\"));\n\nvar _Option = _interopRequireDefault(require(\"../codec/Option\"));\n\nvar _Result = _interopRequireDefault(require(\"../codec/Result\"));\n\nvar _Set = _interopRequireDefault(require(\"../codec/Set\"));\n\nvar _Struct = _interopRequireDefault(require(\"../codec/Struct\"));\n\nvar _Tuple = _interopRequireDefault(require(\"../codec/Tuple\"));\n\nvar _U8aFixed = _interopRequireDefault(require(\"../codec/U8aFixed\"));\n\nvar _UInt = _interopRequireDefault(require(\"../codec/UInt\"));\n\nvar _Vec = _interopRequireDefault(require(\"../codec/Vec\"));\n\nvar _VecFixed = _interopRequireDefault(require(\"../codec/VecFixed\"));\n\nvar _DoNotConstruct = _interopRequireDefault(require(\"../primitive/DoNotConstruct\"));\n\nvar _getTypeDef = require(\"./getTypeDef\"); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nfunction createClass(registry, type) {\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  return getTypeClass(registry, (0, _getTypeDef.getTypeDef)(type));\n} // An unsafe version of the `createType` below. It's unsafe because the `type`\n// argument here can be any string, which, if it cannot be parsed, it will yield\n// a runtime error.\n\n\nfunction ClassOfUnsafe(registry, name) {\n  return createClass(registry, name);\n} // alias for createClass\n\n\nfunction ClassOf(registry, name) {\n  // TS2589: Type instantiation is excessively deep and possibly infinite.\n  // The above happens with as Constructor<InterfaceTypes[K]>;\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n  return ClassOfUnsafe(registry, name);\n}\n\nfunction getSubDefArray(value) {\n  (0, _util.assert)(value.sub && Array.isArray(value.sub), `Expected subtype as TypeDef[] in ${JSON.stringify(value)}`);\n  return value.sub;\n}\n\nfunction getSubDef(value) {\n  (0, _util.assert)(value.sub && !Array.isArray(value.sub), `Expected subtype as TypeDef in ${JSON.stringify(value)}`);\n  return value.sub;\n}\n\nfunction getSubType(value) {\n  return getSubDef(value).type;\n} // create a maps of type string constructors from the input\n\n\nfunction getTypeClassMap(value) {\n  const result = {};\n  return getSubDefArray(value).reduce((result, sub) => {\n    result[sub.name] = sub.type;\n    return result;\n  }, result);\n} // create an array of type string constructors from the input\n\n\nfunction getTypeClassArray(value) {\n  return getSubDefArray(value).map(({\n    type\n  }) => type);\n}\n\nfunction createInt({\n  displayName,\n  length\n}, Clazz) {\n  (0, _util.assert)((0, _util.isNumber)(length), `Expected bitLength information for ${displayName || Clazz.constructor.name}<bitLength>`);\n  return Clazz.with(length, displayName);\n}\n\nfunction createHashMap(value, Clazz) {\n  const [keyType, valueType] = getTypeClassArray(value);\n  return Clazz.with(keyType, valueType);\n}\n\nconst infoMapping = {\n  [_types.TypeDefInfo.BTreeMap]: (registry, value) => createHashMap(value, _BTreeMap.default),\n  [_types.TypeDefInfo.BTreeSet]: (registry, value) => _BTreeSet.default.with(getSubType(value)),\n  [_types.TypeDefInfo.Compact]: (registry, value) => _Compact.default.with(getSubType(value)),\n  [_types.TypeDefInfo.DoNotConstruct]: (registry, value) => _DoNotConstruct.default.with(value.displayName),\n  [_types.TypeDefInfo.Enum]: (registry, value) => _Enum.default.with(getTypeClassMap(value)),\n  [_types.TypeDefInfo.HashMap]: (registry, value) => createHashMap(value, _HashMap.default),\n  [_types.TypeDefInfo.Int]: (registry, value) => createInt(value, _Int.default),\n  // We have circular deps between Linkage & Struct\n  [_types.TypeDefInfo.Linkage]: (registry, value) => {\n    const type = `Option<${getSubType(value)}>`; // eslint-disable-next-line sort-keys\n\n    const Clazz = _Struct.default.with({\n      previous: type,\n      next: type\n    }); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n\n    Clazz.prototype.toRawType = function () {\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call\n      return `Linkage<${this.next.toRawType(true)}>`;\n    };\n\n    return Clazz;\n  },\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  [_types.TypeDefInfo.Null]: (registry, _) => createClass(registry, 'Null'),\n  [_types.TypeDefInfo.Option]: (registry, value) => _Option.default.with(getSubType(value)),\n  [_types.TypeDefInfo.Plain]: (registry, value) => registry.getOrUnknown(value.type),\n  [_types.TypeDefInfo.Result]: (registry, value) => {\n    const [Ok, Error] = getTypeClassArray(value); // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n    return _Result.default.with({\n      Error,\n      Ok\n    });\n  },\n  [_types.TypeDefInfo.Set]: (registry, value) => {\n    const result = {};\n    return _Set.default.with(getSubDefArray(value).reduce((result, {\n      index,\n      name\n    }) => {\n      result[name] = index;\n      return result;\n    }, result), value.length);\n  },\n  [_types.TypeDefInfo.Struct]: (registry, value) => _Struct.default.with(getTypeClassMap(value), value.alias),\n  [_types.TypeDefInfo.Tuple]: (registry, value) => _Tuple.default.with(getTypeClassArray(value)),\n  [_types.TypeDefInfo.UInt]: (registry, value) => createInt(value, _UInt.default),\n  [_types.TypeDefInfo.Vec]: (registry, value) => {\n    const subType = getSubType(value);\n    return subType === 'u8' ? createClass(registry, 'Bytes') : _Vec.default.with(subType);\n  },\n  [_types.TypeDefInfo.VecFixed]: (registry, {\n    displayName,\n    length,\n    sub\n  }) => {\n    (0, _util.assert)((0, _util.isNumber)(length) && !(0, _util.isUndefined)(sub), 'Expected length & type information for fixed vector');\n    return sub.type === 'u8' ? _U8aFixed.default.with(length * 8, displayName) : _VecFixed.default.with(sub.type, length);\n  }\n}; // Returns the type Class for construction\n\nfunction getTypeClass(registry, value) {\n  const Type = registry.get(value.type);\n\n  if (Type) {\n    return Type;\n  }\n\n  const getFn = infoMapping[value.info];\n\n  if (!getFn) {\n    throw new Error(`Unable to construct class from ${JSON.stringify(value)}`);\n  }\n\n  return getFn(registry, value);\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/types/create/createClass.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","createClass","ClassOfUnsafe","ClassOf","getTypeClass","_types","_util","_BTreeMap","_BTreeSet","_Compact","_Enum","_HashMap","_Int","_Option","_Result","_Set","_Struct","_Tuple","_U8aFixed","_UInt","_Vec","_VecFixed","_DoNotConstruct","_getTypeDef","registry","type","getTypeDef","name","getSubDefArray","assert","sub","Array","isArray","JSON","stringify","getSubDef","getSubType","getTypeClassMap","result","reduce","getTypeClassArray","map","createInt","displayName","length","Clazz","isNumber","constructor","with","createHashMap","keyType","valueType","infoMapping","TypeDefInfo","BTreeMap","default","BTreeSet","Compact","DoNotConstruct","Enum","HashMap","Int","Linkage","previous","next","prototype","toRawType","Null","_","Option","Plain","getOrUnknown","Result","Ok","Error","Set","index","Struct","alias","Tuple","UInt","Vec","subType","VecFixed","isUndefined","Type","get","getFn","info"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createClass = createClass;\nexports.ClassOfUnsafe = ClassOfUnsafe;\nexports.ClassOf = ClassOf;\nexports.getTypeClass = getTypeClass;\n\nvar _types = require(\"./types\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _BTreeMap = _interopRequireDefault(require(\"../codec/BTreeMap\"));\n\nvar _BTreeSet = _interopRequireDefault(require(\"../codec/BTreeSet\"));\n\nvar _Compact = _interopRequireDefault(require(\"../codec/Compact\"));\n\nvar _Enum = _interopRequireDefault(require(\"../codec/Enum\"));\n\nvar _HashMap = _interopRequireDefault(require(\"../codec/HashMap\"));\n\nvar _Int = _interopRequireDefault(require(\"../codec/Int\"));\n\nvar _Option = _interopRequireDefault(require(\"../codec/Option\"));\n\nvar _Result = _interopRequireDefault(require(\"../codec/Result\"));\n\nvar _Set = _interopRequireDefault(require(\"../codec/Set\"));\n\nvar _Struct = _interopRequireDefault(require(\"../codec/Struct\"));\n\nvar _Tuple = _interopRequireDefault(require(\"../codec/Tuple\"));\n\nvar _U8aFixed = _interopRequireDefault(require(\"../codec/U8aFixed\"));\n\nvar _UInt = _interopRequireDefault(require(\"../codec/UInt\"));\n\nvar _Vec = _interopRequireDefault(require(\"../codec/Vec\"));\n\nvar _VecFixed = _interopRequireDefault(require(\"../codec/VecFixed\"));\n\nvar _DoNotConstruct = _interopRequireDefault(require(\"../primitive/DoNotConstruct\"));\n\nvar _getTypeDef = require(\"./getTypeDef\");\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction createClass(registry, type) {\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  return getTypeClass(registry, (0, _getTypeDef.getTypeDef)(type));\n} // An unsafe version of the `createType` below. It's unsafe because the `type`\n// argument here can be any string, which, if it cannot be parsed, it will yield\n// a runtime error.\n\n\nfunction ClassOfUnsafe(registry, name) {\n  return createClass(registry, name);\n} // alias for createClass\n\n\nfunction ClassOf(registry, name) {\n  // TS2589: Type instantiation is excessively deep and possibly infinite.\n  // The above happens with as Constructor<InterfaceTypes[K]>;\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n  return ClassOfUnsafe(registry, name);\n}\n\nfunction getSubDefArray(value) {\n  (0, _util.assert)(value.sub && Array.isArray(value.sub), `Expected subtype as TypeDef[] in ${JSON.stringify(value)}`);\n  return value.sub;\n}\n\nfunction getSubDef(value) {\n  (0, _util.assert)(value.sub && !Array.isArray(value.sub), `Expected subtype as TypeDef in ${JSON.stringify(value)}`);\n  return value.sub;\n}\n\nfunction getSubType(value) {\n  return getSubDef(value).type;\n} // create a maps of type string constructors from the input\n\n\nfunction getTypeClassMap(value) {\n  const result = {};\n  return getSubDefArray(value).reduce((result, sub) => {\n    result[sub.name] = sub.type;\n    return result;\n  }, result);\n} // create an array of type string constructors from the input\n\n\nfunction getTypeClassArray(value) {\n  return getSubDefArray(value).map(({\n    type\n  }) => type);\n}\n\nfunction createInt({\n  displayName,\n  length\n}, Clazz) {\n  (0, _util.assert)((0, _util.isNumber)(length), `Expected bitLength information for ${displayName || Clazz.constructor.name}<bitLength>`);\n  return Clazz.with(length, displayName);\n}\n\nfunction createHashMap(value, Clazz) {\n  const [keyType, valueType] = getTypeClassArray(value);\n  return Clazz.with(keyType, valueType);\n}\n\nconst infoMapping = {\n  [_types.TypeDefInfo.BTreeMap]: (registry, value) => createHashMap(value, _BTreeMap.default),\n  [_types.TypeDefInfo.BTreeSet]: (registry, value) => _BTreeSet.default.with(getSubType(value)),\n  [_types.TypeDefInfo.Compact]: (registry, value) => _Compact.default.with(getSubType(value)),\n  [_types.TypeDefInfo.DoNotConstruct]: (registry, value) => _DoNotConstruct.default.with(value.displayName),\n  [_types.TypeDefInfo.Enum]: (registry, value) => _Enum.default.with(getTypeClassMap(value)),\n  [_types.TypeDefInfo.HashMap]: (registry, value) => createHashMap(value, _HashMap.default),\n  [_types.TypeDefInfo.Int]: (registry, value) => createInt(value, _Int.default),\n  // We have circular deps between Linkage & Struct\n  [_types.TypeDefInfo.Linkage]: (registry, value) => {\n    const type = `Option<${getSubType(value)}>`; // eslint-disable-next-line sort-keys\n\n    const Clazz = _Struct.default.with({\n      previous: type,\n      next: type\n    }); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n\n    Clazz.prototype.toRawType = function () {\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call\n      return `Linkage<${this.next.toRawType(true)}>`;\n    };\n\n    return Clazz;\n  },\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  [_types.TypeDefInfo.Null]: (registry, _) => createClass(registry, 'Null'),\n  [_types.TypeDefInfo.Option]: (registry, value) => _Option.default.with(getSubType(value)),\n  [_types.TypeDefInfo.Plain]: (registry, value) => registry.getOrUnknown(value.type),\n  [_types.TypeDefInfo.Result]: (registry, value) => {\n    const [Ok, Error] = getTypeClassArray(value); // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n    return _Result.default.with({\n      Error,\n      Ok\n    });\n  },\n  [_types.TypeDefInfo.Set]: (registry, value) => {\n    const result = {};\n    return _Set.default.with(getSubDefArray(value).reduce((result, {\n      index,\n      name\n    }) => {\n      result[name] = index;\n      return result;\n    }, result), value.length);\n  },\n  [_types.TypeDefInfo.Struct]: (registry, value) => _Struct.default.with(getTypeClassMap(value), value.alias),\n  [_types.TypeDefInfo.Tuple]: (registry, value) => _Tuple.default.with(getTypeClassArray(value)),\n  [_types.TypeDefInfo.UInt]: (registry, value) => createInt(value, _UInt.default),\n  [_types.TypeDefInfo.Vec]: (registry, value) => {\n    const subType = getSubType(value);\n    return subType === 'u8' ? createClass(registry, 'Bytes') : _Vec.default.with(subType);\n  },\n  [_types.TypeDefInfo.VecFixed]: (registry, {\n    displayName,\n    length,\n    sub\n  }) => {\n    (0, _util.assert)((0, _util.isNumber)(length) && !(0, _util.isUndefined)(sub), 'Expected length & type information for fixed vector');\n    return sub.type === 'u8' ? _U8aFixed.default.with(length * 8, displayName) : _VecFixed.default.with(sub.type, length);\n  }\n}; // Returns the type Class for construction\n\nfunction getTypeClass(registry, value) {\n  const Type = registry.get(value.type);\n\n  if (Type) {\n    return Type;\n  }\n\n  const getFn = infoMapping[value.info];\n\n  if (!getFn) {\n    throw new Error(`Unable to construct class from ${JSON.stringify(value)}`);\n  }\n\n  return getFn(registry, value);\n}"]},"metadata":{},"sourceType":"script"}