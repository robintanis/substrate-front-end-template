{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = base58Encode;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _bs = require(\"./bs58\"); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name base58Encode\n * @summary Creates a base58 value.\n * @description\n * From the provided input, create the base58 and return the result as a string.\n */\n\n\nfunction base58Encode(value, ipfsCompat) {\n  const out = _bs.bs58.encode((0, _util.u8aToBuffer)((0, _util.u8aToU8a)(value)));\n\n  return ipfsCompat ? `z${out}` : out;\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/util-crypto/base58/encode.js"],"names":["Object","defineProperty","exports","value","default","base58Encode","_util","require","_bs","ipfsCompat","out","bs58","encode","u8aToBuffer","u8aToU8a"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,YAAlB;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIC,GAAG,GAAGD,OAAO,CAAC,QAAD,CAAjB,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,YAAT,CAAsBF,KAAtB,EAA6BM,UAA7B,EAAyC;AACvC,QAAMC,GAAG,GAAGF,GAAG,CAACG,IAAJ,CAASC,MAAT,CAAgB,CAAC,GAAGN,KAAK,CAACO,WAAV,EAAuB,CAAC,GAAGP,KAAK,CAACQ,QAAV,EAAoBX,KAApB,CAAvB,CAAhB,CAAZ;;AAEA,SAAOM,UAAU,GAAI,IAAGC,GAAI,EAAX,GAAeA,GAAhC;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = base58Encode;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _bs = require(\"./bs58\");\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name base58Encode\n * @summary Creates a base58 value.\n * @description\n * From the provided input, create the base58 and return the result as a string.\n */\nfunction base58Encode(value, ipfsCompat) {\n  const out = _bs.bs58.encode((0, _util.u8aToBuffer)((0, _util.u8aToU8a)(value)));\n\n  return ipfsCompat ? `z${out}` : out;\n}"]},"metadata":{},"sourceType":"script"}