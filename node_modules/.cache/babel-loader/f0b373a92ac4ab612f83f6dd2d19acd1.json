{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Enum = _interopRequireDefault(require(\"./Enum\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name Result\n * @description\n * A Result maps to the Rust Result type, that can either wrap a success or error value\n */\n\n\nclass Result extends _Enum.default {\n  constructor(registry, Ok, Error, value) {\n    // NOTE This is order-dependent, Ok (with index 0) needs to be first\n    // eslint-disable-next-line sort-keys\n    super(registry, {\n      Ok,\n      Error\n    }, value);\n  }\n\n  static with(Types) {\n    return class extends Result {\n      constructor(registry, value) {\n        super(registry, Types.Ok, Types.Error, value);\n      }\n\n    };\n  }\n  /**\n   * @description Returns the wrapper Error value (if isError)\n   */\n\n\n  get asError() {\n    (0, _util.assert)(this.isError, 'Cannot extract Error value from Ok result, check isError first');\n    return this.value;\n  }\n  /**\n   * @description Returns the wrapper Ok value (if isOk)\n   */\n\n\n  get asOk() {\n    (0, _util.assert)(this.isOk, 'Cannot extract Ok value from Error result, check isOk first');\n    return this.value;\n  }\n  /**\n   * @description Checks if the Result has no value\n   */\n\n\n  get isEmpty() {\n    return this.isOk && this.value.isEmpty;\n  }\n  /**\n   * @description Checks if the Result wraps an Error value\n   */\n\n\n  get isError() {\n    return !this.isOk;\n  }\n  /**\n   * @description Checks if the Result wraps an Ok value\n   */\n\n\n  get isOk() {\n    return this.index === 0;\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    const Types = this._toRawStruct();\n\n    return `Result<${Types.Ok},${Types.Error}>`;\n  }\n\n}\n\nexports.default = Result;","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/types/codec/Result.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_util","_Enum","Result","constructor","registry","Ok","Error","with","Types","asError","assert","isError","asOk","isOk","isEmpty","index","toRawType","_toRawStruct"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,KAAK,GAAGN,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIO,KAAK,GAAGR,sBAAsB,CAACC,OAAO,CAAC,QAAD,CAAR,CAAlC,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMQ,MAAN,SAAqBD,KAAK,CAACF,OAA3B,CAAmC;AACjCI,EAAAA,WAAW,CAACC,QAAD,EAAWC,EAAX,EAAeC,KAAf,EAAsBR,KAAtB,EAA6B;AACtC;AACA;AACA,UAAMM,QAAN,EAAgB;AACdC,MAAAA,EADc;AAEdC,MAAAA;AAFc,KAAhB,EAGGR,KAHH;AAID;;AAED,SAAOS,IAAP,CAAYC,KAAZ,EAAmB;AACjB,WAAO,cAAcN,MAAd,CAAqB;AAC1BC,MAAAA,WAAW,CAACC,QAAD,EAAWN,KAAX,EAAkB;AAC3B,cAAMM,QAAN,EAAgBI,KAAK,CAACH,EAAtB,EAA0BG,KAAK,CAACF,KAAhC,EAAuCR,KAAvC;AACD;;AAHyB,KAA5B;AAMD;AACD;AACF;AACA;;;AAGE,MAAIW,OAAJ,GAAc;AACZ,KAAC,GAAGT,KAAK,CAACU,MAAV,EAAkB,KAAKC,OAAvB,EAAgC,gEAAhC;AACA,WAAO,KAAKb,KAAZ;AACD;AACD;AACF;AACA;;;AAGE,MAAIc,IAAJ,GAAW;AACT,KAAC,GAAGZ,KAAK,CAACU,MAAV,EAAkB,KAAKG,IAAvB,EAA6B,6DAA7B;AACA,WAAO,KAAKf,KAAZ;AACD;AACD;AACF;AACA;;;AAGE,MAAIgB,OAAJ,GAAc;AACZ,WAAO,KAAKD,IAAL,IAAa,KAAKf,KAAL,CAAWgB,OAA/B;AACD;AACD;AACF;AACA;;;AAGE,MAAIH,OAAJ,GAAc;AACZ,WAAO,CAAC,KAAKE,IAAb;AACD;AACD;AACF;AACA;;;AAGE,MAAIA,IAAJ,GAAW;AACT,WAAO,KAAKE,KAAL,KAAe,CAAtB;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,SAAS,GAAG;AACV,UAAMR,KAAK,GAAG,KAAKS,YAAL,EAAd;;AAEA,WAAQ,UAAST,KAAK,CAACH,EAAG,IAAGG,KAAK,CAACF,KAAM,GAAzC;AACD;;AArEgC;;AAyEnCT,OAAO,CAACE,OAAR,GAAkBG,MAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Enum = _interopRequireDefault(require(\"./Enum\"));\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name Result\n * @description\n * A Result maps to the Rust Result type, that can either wrap a success or error value\n */\nclass Result extends _Enum.default {\n  constructor(registry, Ok, Error, value) {\n    // NOTE This is order-dependent, Ok (with index 0) needs to be first\n    // eslint-disable-next-line sort-keys\n    super(registry, {\n      Ok,\n      Error\n    }, value);\n  }\n\n  static with(Types) {\n    return class extends Result {\n      constructor(registry, value) {\n        super(registry, Types.Ok, Types.Error, value);\n      }\n\n    };\n  }\n  /**\n   * @description Returns the wrapper Error value (if isError)\n   */\n\n\n  get asError() {\n    (0, _util.assert)(this.isError, 'Cannot extract Error value from Ok result, check isError first');\n    return this.value;\n  }\n  /**\n   * @description Returns the wrapper Ok value (if isOk)\n   */\n\n\n  get asOk() {\n    (0, _util.assert)(this.isOk, 'Cannot extract Ok value from Error result, check isOk first');\n    return this.value;\n  }\n  /**\n   * @description Checks if the Result has no value\n   */\n\n\n  get isEmpty() {\n    return this.isOk && this.value.isEmpty;\n  }\n  /**\n   * @description Checks if the Result wraps an Error value\n   */\n\n\n  get isError() {\n    return !this.isOk;\n  }\n  /**\n   * @description Checks if the Result wraps an Ok value\n   */\n\n\n  get isOk() {\n    return this.index === 0;\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    const Types = this._toRawStruct();\n\n    return `Result<${Types.Ok},${Types.Error}>`;\n  }\n\n}\n\nexports.default = Result;"]},"metadata":{},"sourceType":"script"}