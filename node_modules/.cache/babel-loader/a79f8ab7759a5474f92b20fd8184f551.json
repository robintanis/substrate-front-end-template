{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = naclSeal;\n\nvar _tweetnacl = _interopRequireDefault(require(\"tweetnacl\"));\n\nvar _asU8a = _interopRequireDefault(require(\"../random/asU8a\")); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name naclSeal\n * @summary Seals a message using the sender's encrypting secretKey, receiver's public key, and nonce\n * @description\n * Returns an encrypted message which can be open only by receiver's secretKey. If the `nonce` was not supplied, a random value is generated.\n * @example\n * <BR>\n *\n * ```javascript\n * import { naclEncrypt } from '@polkadot/util-crypto';\n *\n * naclSeal([...], [...], [...], [...]); // => [...]\n * ```\n */\n\n\nfunction naclSeal(message, senderBoxSecret, receiverBoxPublic, nonce = (0, _asU8a.default)(24)) {\n  return {\n    nonce,\n    sealed: _tweetnacl.default.box(message, nonce, receiverBoxPublic, senderBoxSecret)\n  };\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/util-crypto/nacl/seal.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","naclSeal","_tweetnacl","_asU8a","message","senderBoxSecret","receiverBoxPublic","nonce","sealed","box"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,QAAlB;;AAEA,IAAIC,UAAU,GAAGR,sBAAsB,CAACC,OAAO,CAAC,WAAD,CAAR,CAAvC;;AAEA,IAAIQ,MAAM,GAAGT,sBAAsB,CAACC,OAAO,CAAC,iBAAD,CAAR,CAAnC,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,QAAT,CAAkBG,OAAlB,EAA2BC,eAA3B,EAA4CC,iBAA5C,EAA+DC,KAAK,GAAG,CAAC,GAAGJ,MAAM,CAACH,OAAX,EAAoB,EAApB,CAAvE,EAAgG;AAC9F,SAAO;AACLO,IAAAA,KADK;AAELC,IAAAA,MAAM,EAAEN,UAAU,CAACF,OAAX,CAAmBS,GAAnB,CAAuBL,OAAvB,EAAgCG,KAAhC,EAAuCD,iBAAvC,EAA0DD,eAA1D;AAFH,GAAP;AAID","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = naclSeal;\n\nvar _tweetnacl = _interopRequireDefault(require(\"tweetnacl\"));\n\nvar _asU8a = _interopRequireDefault(require(\"../random/asU8a\"));\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name naclSeal\n * @summary Seals a message using the sender's encrypting secretKey, receiver's public key, and nonce\n * @description\n * Returns an encrypted message which can be open only by receiver's secretKey. If the `nonce` was not supplied, a random value is generated.\n * @example\n * <BR>\n *\n * ```javascript\n * import { naclEncrypt } from '@polkadot/util-crypto';\n *\n * naclSeal([...], [...], [...], [...]); // => [...]\n * ```\n */\nfunction naclSeal(message, senderBoxSecret, receiverBoxPublic, nonce = (0, _asU8a.default)(24)) {\n  return {\n    nonce,\n    sealed: _tweetnacl.default.box(message, nonce, receiverBoxPublic, senderBoxSecret)\n  };\n}"]},"metadata":{},"sourceType":"script"}