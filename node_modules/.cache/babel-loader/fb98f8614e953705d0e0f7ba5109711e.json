{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = secp256k1Expand;\n\nvar _elliptic = _interopRequireDefault(require(\"elliptic\"));\n\nvar _util = require(\"@polkadot/util\"); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nconst EC = _elliptic.default.ec;\nconst ec = new EC('secp256k1');\n\nfunction secp256k1Expand(publicKey) {\n  (0, _util.assert)([33, 65].includes(publicKey.length), 'Invalid publicKey provided');\n  const expanded = ec.keyFromPublic(publicKey).getPublic();\n  return (0, _util.u8aConcat)((0, _util.bnToU8a)(expanded.getX(), {\n    bitLength: 256,\n    isLe: false\n  }), (0, _util.bnToU8a)(expanded.getY(), {\n    bitLength: 256,\n    isLe: false\n  }));\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/util-crypto/secp256k1/expand.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","secp256k1Expand","_elliptic","_util","EC","ec","publicKey","assert","includes","length","expanded","keyFromPublic","getPublic","u8aConcat","bnToU8a","getX","bitLength","isLe","getY"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,eAAlB;;AAEA,IAAIC,SAAS,GAAGR,sBAAsB,CAACC,OAAO,CAAC,UAAD,CAAR,CAAtC;;AAEA,IAAIQ,KAAK,GAAGR,OAAO,CAAC,gBAAD,CAAnB,C,CAEA;AACA;;;AACA,MAAMS,EAAE,GAAGF,SAAS,CAACF,OAAV,CAAkBK,EAA7B;AACA,MAAMA,EAAE,GAAG,IAAID,EAAJ,CAAO,WAAP,CAAX;;AAEA,SAASH,eAAT,CAAyBK,SAAzB,EAAoC;AAClC,GAAC,GAAGH,KAAK,CAACI,MAAV,EAAkB,CAAC,EAAD,EAAK,EAAL,EAASC,QAAT,CAAkBF,SAAS,CAACG,MAA5B,CAAlB,EAAuD,4BAAvD;AACA,QAAMC,QAAQ,GAAGL,EAAE,CAACM,aAAH,CAAiBL,SAAjB,EAA4BM,SAA5B,EAAjB;AACA,SAAO,CAAC,GAAGT,KAAK,CAACU,SAAV,EAAqB,CAAC,GAAGV,KAAK,CAACW,OAAV,EAAmBJ,QAAQ,CAACK,IAAT,EAAnB,EAAoC;AAC9DC,IAAAA,SAAS,EAAE,GADmD;AAE9DC,IAAAA,IAAI,EAAE;AAFwD,GAApC,CAArB,EAGH,CAAC,GAAGd,KAAK,CAACW,OAAV,EAAmBJ,QAAQ,CAACQ,IAAT,EAAnB,EAAoC;AACtCF,IAAAA,SAAS,EAAE,GAD2B;AAEtCC,IAAAA,IAAI,EAAE;AAFgC,GAApC,CAHG,CAAP;AAOD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = secp256k1Expand;\n\nvar _elliptic = _interopRequireDefault(require(\"elliptic\"));\n\nvar _util = require(\"@polkadot/util\");\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst EC = _elliptic.default.ec;\nconst ec = new EC('secp256k1');\n\nfunction secp256k1Expand(publicKey) {\n  (0, _util.assert)([33, 65].includes(publicKey.length), 'Invalid publicKey provided');\n  const expanded = ec.keyFromPublic(publicKey).getPublic();\n  return (0, _util.u8aConcat)((0, _util.bnToU8a)(expanded.getX(), {\n    bitLength: 256,\n    isLe: false\n  }), (0, _util.bnToU8a)(expanded.getY(), {\n    bitLength: 256,\n    isLe: false\n  }));\n}"]},"metadata":{},"sourceType":"script"}