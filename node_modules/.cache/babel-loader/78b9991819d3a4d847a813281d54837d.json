{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.accountId = accountId;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utilCrypto = require(\"@polkadot/util-crypto\");\n\nvar _util2 = require(\"../util\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nfunction retrieve(api, address) {\n  const decoded = (0, _util.isU8a)(address) ? address : (0, _utilCrypto.decodeAddress)((address || '').toString());\n\n  if (decoded.length === 32) {\n    return (0, _rxjs.of)(api.registry.createType('AccountId', decoded));\n  }\n\n  const accountIndex = api.registry.createType('AccountIndex', decoded);\n  return api.derive.accounts.indexToId(accountIndex.toString()).pipe((0, _operators.map)(accountId => {\n    (0, _util.assert)(accountId, 'Unable to retrieve accountId');\n    return accountId;\n  }));\n}\n/**\n * @name accountId\n * @param {(Address | AccountId | AccountIndex | string | null)} address - An accounts address in various formats.\n * @description  An [[AccountId]]\n */\n\n\nfunction accountId(instanceId, api) {\n  return (0, _util2.memo)(instanceId, address => retrieve(api, address));\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/api-derive/accounts/accountId.js"],"names":["Object","defineProperty","exports","value","accountId","_rxjs","require","_operators","_util","_utilCrypto","_util2","retrieve","api","address","decoded","isU8a","decodeAddress","toString","length","of","registry","createType","accountIndex","derive","accounts","indexToId","pipe","map","assert","instanceId","memo"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,SAAR,GAAoBA,SAApB;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AAEA,IAAIC,UAAU,GAAGD,OAAO,CAAC,gBAAD,CAAxB;;AAEA,IAAIE,KAAK,GAAGF,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIG,WAAW,GAAGH,OAAO,CAAC,uBAAD,CAAzB;;AAEA,IAAII,MAAM,GAAGJ,OAAO,CAAC,SAAD,CAApB,C,CAEA;AACA;;;AACA,SAASK,QAAT,CAAkBC,GAAlB,EAAuBC,OAAvB,EAAgC;AAC9B,QAAMC,OAAO,GAAG,CAAC,GAAGN,KAAK,CAACO,KAAV,EAAiBF,OAAjB,IAA4BA,OAA5B,GAAsC,CAAC,GAAGJ,WAAW,CAACO,aAAhB,EAA+B,CAACH,OAAO,IAAI,EAAZ,EAAgBI,QAAhB,EAA/B,CAAtD;;AAEA,MAAIH,OAAO,CAACI,MAAR,KAAmB,EAAvB,EAA2B;AACzB,WAAO,CAAC,GAAGb,KAAK,CAACc,EAAV,EAAcP,GAAG,CAACQ,QAAJ,CAAaC,UAAb,CAAwB,WAAxB,EAAqCP,OAArC,CAAd,CAAP;AACD;;AAED,QAAMQ,YAAY,GAAGV,GAAG,CAACQ,QAAJ,CAAaC,UAAb,CAAwB,cAAxB,EAAwCP,OAAxC,CAArB;AACA,SAAOF,GAAG,CAACW,MAAJ,CAAWC,QAAX,CAAoBC,SAApB,CAA8BH,YAAY,CAACL,QAAb,EAA9B,EAAuDS,IAAvD,CAA4D,CAAC,GAAGnB,UAAU,CAACoB,GAAf,EAAoBvB,SAAS,IAAI;AAClG,KAAC,GAAGI,KAAK,CAACoB,MAAV,EAAkBxB,SAAlB,EAA6B,8BAA7B;AACA,WAAOA,SAAP;AACD,GAHkE,CAA5D,CAAP;AAID;AACD;AACA;AACA;AACA;AACA;;;AAGA,SAASA,SAAT,CAAmByB,UAAnB,EAA+BjB,GAA/B,EAAoC;AAClC,SAAO,CAAC,GAAGF,MAAM,CAACoB,IAAX,EAAiBD,UAAjB,EAA6BhB,OAAO,IAAIF,QAAQ,CAACC,GAAD,EAAMC,OAAN,CAAhD,CAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.accountId = accountId;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utilCrypto = require(\"@polkadot/util-crypto\");\n\nvar _util2 = require(\"../util\");\n\n// Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction retrieve(api, address) {\n  const decoded = (0, _util.isU8a)(address) ? address : (0, _utilCrypto.decodeAddress)((address || '').toString());\n\n  if (decoded.length === 32) {\n    return (0, _rxjs.of)(api.registry.createType('AccountId', decoded));\n  }\n\n  const accountIndex = api.registry.createType('AccountIndex', decoded);\n  return api.derive.accounts.indexToId(accountIndex.toString()).pipe((0, _operators.map)(accountId => {\n    (0, _util.assert)(accountId, 'Unable to retrieve accountId');\n    return accountId;\n  }));\n}\n/**\n * @name accountId\n * @param {(Address | AccountId | AccountIndex | string | null)} address - An accounts address in various formats.\n * @description  An [[AccountId]]\n */\n\n\nfunction accountId(instanceId, api) {\n  return (0, _util2.memo)(instanceId, address => retrieve(api, address));\n}"]},"metadata":{},"sourceType":"script"}