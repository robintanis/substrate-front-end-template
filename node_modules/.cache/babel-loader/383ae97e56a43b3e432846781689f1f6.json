{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = naclVerify;\n\nvar _tweetnacl = _interopRequireDefault(require(\"tweetnacl\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _wasmCrypto = require(\"@polkadot/wasm-crypto\"); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name naclSign\n * @summary Verifies the signature on the supplied message.\n * @description\n * Verifies the `signature` on `message` with the supplied `publicKey`. Returns `true` on sucess, `false` otherwise.\n * @example\n * <BR>\n *\n * ```javascript\n * import { naclVerify } from '@polkadot/util-crypto';\n *\n * naclVerify([...], [...], [...]); // => true/false\n * ```\n */\n\n\nfunction naclVerify(message, signature, publicKey) {\n  const messageU8a = (0, _util.u8aToU8a)(message);\n  const publicKeyU8a = (0, _util.u8aToU8a)(publicKey);\n  const signatureU8a = (0, _util.u8aToU8a)(signature);\n  (0, _util.assert)(publicKeyU8a.length === 32, `Invalid publicKey, received ${publicKeyU8a.length}, expected 32`);\n  (0, _util.assert)(signatureU8a.length === 64, `Invalid signature, received ${signatureU8a.length} bytes, expected 64`);\n  return (0, _wasmCrypto.isReady)() ? (0, _wasmCrypto.ed25519Verify)(signatureU8a, messageU8a, publicKeyU8a) : _tweetnacl.default.sign.detached.verify(messageU8a, signatureU8a, publicKeyU8a);\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/util-crypto/nacl/verify.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","naclVerify","_tweetnacl","_util","_wasmCrypto","message","signature","publicKey","messageU8a","u8aToU8a","publicKeyU8a","signatureU8a","assert","length","isReady","ed25519Verify","sign","detached","verify"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,UAAlB;;AAEA,IAAIC,UAAU,GAAGR,sBAAsB,CAACC,OAAO,CAAC,WAAD,CAAR,CAAvC;;AAEA,IAAIQ,KAAK,GAAGR,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIS,WAAW,GAAGT,OAAO,CAAC,uBAAD,CAAzB,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,UAAT,CAAoBI,OAApB,EAA6BC,SAA7B,EAAwCC,SAAxC,EAAmD;AACjD,QAAMC,UAAU,GAAG,CAAC,GAAGL,KAAK,CAACM,QAAV,EAAoBJ,OAApB,CAAnB;AACA,QAAMK,YAAY,GAAG,CAAC,GAAGP,KAAK,CAACM,QAAV,EAAoBF,SAApB,CAArB;AACA,QAAMI,YAAY,GAAG,CAAC,GAAGR,KAAK,CAACM,QAAV,EAAoBH,SAApB,CAArB;AACA,GAAC,GAAGH,KAAK,CAACS,MAAV,EAAkBF,YAAY,CAACG,MAAb,KAAwB,EAA1C,EAA+C,+BAA8BH,YAAY,CAACG,MAAO,eAAjG;AACA,GAAC,GAAGV,KAAK,CAACS,MAAV,EAAkBD,YAAY,CAACE,MAAb,KAAwB,EAA1C,EAA+C,+BAA8BF,YAAY,CAACE,MAAO,qBAAjG;AACA,SAAO,CAAC,GAAGT,WAAW,CAACU,OAAhB,MAA6B,CAAC,GAAGV,WAAW,CAACW,aAAhB,EAA+BJ,YAA/B,EAA6CH,UAA7C,EAAyDE,YAAzD,CAA7B,GAAsGR,UAAU,CAACF,OAAX,CAAmBgB,IAAnB,CAAwBC,QAAxB,CAAiCC,MAAjC,CAAwCV,UAAxC,EAAoDG,YAApD,EAAkED,YAAlE,CAA7G;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = naclVerify;\n\nvar _tweetnacl = _interopRequireDefault(require(\"tweetnacl\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _wasmCrypto = require(\"@polkadot/wasm-crypto\");\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name naclSign\n * @summary Verifies the signature on the supplied message.\n * @description\n * Verifies the `signature` on `message` with the supplied `publicKey`. Returns `true` on sucess, `false` otherwise.\n * @example\n * <BR>\n *\n * ```javascript\n * import { naclVerify } from '@polkadot/util-crypto';\n *\n * naclVerify([...], [...], [...]); // => true/false\n * ```\n */\nfunction naclVerify(message, signature, publicKey) {\n  const messageU8a = (0, _util.u8aToU8a)(message);\n  const publicKeyU8a = (0, _util.u8aToU8a)(publicKey);\n  const signatureU8a = (0, _util.u8aToU8a)(signature);\n  (0, _util.assert)(publicKeyU8a.length === 32, `Invalid publicKey, received ${publicKeyU8a.length}, expected 32`);\n  (0, _util.assert)(signatureU8a.length === 64, `Invalid signature, received ${signatureU8a.length} bytes, expected 64`);\n  return (0, _wasmCrypto.isReady)() ? (0, _wasmCrypto.ed25519Verify)(signatureU8a, messageU8a, publicKeyU8a) : _tweetnacl.default.sign.detached.verify(messageU8a, signatureU8a, publicKeyU8a);\n}"]},"metadata":{},"sourceType":"script"}