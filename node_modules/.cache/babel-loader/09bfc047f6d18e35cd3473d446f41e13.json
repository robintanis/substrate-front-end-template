{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = augmentObject;\n\nvar _util = require(\"@polkadot/util\"); // Copyright 2017-2020 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nconst l = (0, _util.logger)('api/augment');\n\nfunction logLength(type, values, and = []) {\n  return values.length ? ` ${values.length} ${type}${and.length ? ' and' : ''}` : '';\n}\n\nfunction logValues(type, values) {\n  return values.length ? `\\n\\t${type.padStart(7)}: ${values.sort().join(', ')}` : '';\n} // log details to console\n\n\nfunction warn(prefix, type, [added, removed]) {\n  if (added.length || removed.length) {\n    l.warn(`api.${prefix}: Found${logLength('added', added, removed)}${logLength('removed', removed)} ${type}:${logValues('added', added)}${logValues('removed', removed)}`);\n  }\n}\n\nfunction extractKeys(src, dst) {\n  return [Object.keys(src), Object.keys(dst)];\n}\n\nfunction findSectionExcludes(a, b) {\n  return a.filter(section => !b.includes(section));\n}\n\nfunction extractSections(src, dst) {\n  const [srcSections, dstSections] = extractKeys(src, dst);\n  return [findSectionExcludes(srcSections, dstSections), findSectionExcludes(dstSections, srcSections)];\n}\n\nfunction findMethodExcludes(src, dst) {\n  const srcSections = Object.keys(src);\n  const dstSections = Object.keys(dst);\n  return dstSections.filter(section => srcSections.includes(section)).reduce((rmMethods, section) => {\n    const srcMethods = Object.keys(src[section]);\n    return rmMethods.concat(...Object.keys(dst[section]).filter(method => !srcMethods.includes(method)).map(method => `${section}.${method}`));\n  }, []);\n}\n\nfunction extractMethods(src, dst) {\n  return [findMethodExcludes(dst, src), findMethodExcludes(src, dst)];\n}\n/**\n * Takes a decorated api section (e.g. api.tx) and augment it with the details. It does not override what is\n * already available, but rather just adds new missing ites into the result object.\n * @internal\n */\n\n\nfunction augmentObject(prefix, src, dst, fromEmpty = false) {\n  if (fromEmpty) {\n    Object.keys(dst).forEach(key => {\n      delete dst[key];\n    });\n  }\n\n  if (prefix && Object.keys(dst).length) {\n    warn(prefix, 'modules', extractSections(src, dst));\n    warn(prefix, 'calls', extractMethods(src, dst));\n  }\n\n  return Object.keys(src).reduce((newSection, sectionName) => {\n    const section = src[sectionName];\n    newSection[sectionName] = Object.keys(section).reduce((result, methodName) => {\n      // TODO When it does match, check the actual details and warn when there are differences\n      if (!result[methodName]) {\n        result[methodName] = section[methodName];\n      }\n\n      return result;\n    }, dst[sectionName] || {});\n    return newSection;\n  }, dst);\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/api/util/augmentObject.js"],"names":["Object","defineProperty","exports","value","default","augmentObject","_util","require","l","logger","logLength","type","values","and","length","logValues","padStart","sort","join","warn","prefix","added","removed","extractKeys","src","dst","keys","findSectionExcludes","a","b","filter","section","includes","extractSections","srcSections","dstSections","findMethodExcludes","reduce","rmMethods","srcMethods","concat","method","map","extractMethods","fromEmpty","forEach","key","newSection","sectionName","result","methodName"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = augmentObject;\n\nvar _util = require(\"@polkadot/util\");\n\n// Copyright 2017-2020 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst l = (0, _util.logger)('api/augment');\n\nfunction logLength(type, values, and = []) {\n  return values.length ? ` ${values.length} ${type}${and.length ? ' and' : ''}` : '';\n}\n\nfunction logValues(type, values) {\n  return values.length ? `\\n\\t${type.padStart(7)}: ${values.sort().join(', ')}` : '';\n} // log details to console\n\n\nfunction warn(prefix, type, [added, removed]) {\n  if (added.length || removed.length) {\n    l.warn(`api.${prefix}: Found${logLength('added', added, removed)}${logLength('removed', removed)} ${type}:${logValues('added', added)}${logValues('removed', removed)}`);\n  }\n}\n\nfunction extractKeys(src, dst) {\n  return [Object.keys(src), Object.keys(dst)];\n}\n\nfunction findSectionExcludes(a, b) {\n  return a.filter(section => !b.includes(section));\n}\n\nfunction extractSections(src, dst) {\n  const [srcSections, dstSections] = extractKeys(src, dst);\n  return [findSectionExcludes(srcSections, dstSections), findSectionExcludes(dstSections, srcSections)];\n}\n\nfunction findMethodExcludes(src, dst) {\n  const srcSections = Object.keys(src);\n  const dstSections = Object.keys(dst);\n  return dstSections.filter(section => srcSections.includes(section)).reduce((rmMethods, section) => {\n    const srcMethods = Object.keys(src[section]);\n    return rmMethods.concat(...Object.keys(dst[section]).filter(method => !srcMethods.includes(method)).map(method => `${section}.${method}`));\n  }, []);\n}\n\nfunction extractMethods(src, dst) {\n  return [findMethodExcludes(dst, src), findMethodExcludes(src, dst)];\n}\n/**\n * Takes a decorated api section (e.g. api.tx) and augment it with the details. It does not override what is\n * already available, but rather just adds new missing ites into the result object.\n * @internal\n */\n\n\nfunction augmentObject(prefix, src, dst, fromEmpty = false) {\n  if (fromEmpty) {\n    Object.keys(dst).forEach(key => {\n      delete dst[key];\n    });\n  }\n\n  if (prefix && Object.keys(dst).length) {\n    warn(prefix, 'modules', extractSections(src, dst));\n    warn(prefix, 'calls', extractMethods(src, dst));\n  }\n\n  return Object.keys(src).reduce((newSection, sectionName) => {\n    const section = src[sectionName];\n    newSection[sectionName] = Object.keys(section).reduce((result, methodName) => {\n      // TODO When it does match, check the actual details and warn when there are differences\n      if (!result[methodName]) {\n        result[methodName] = section[methodName];\n      }\n\n      return result;\n    }, dst[sectionName] || {});\n    return newSection;\n  }, dst);\n}"]},"metadata":{},"sourceType":"script"}