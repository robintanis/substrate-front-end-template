{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = u8aFixLength; // Copyright 2017-2020 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name u8aFixLength\n * @summary Shifts a Uint8Array to a specific bitLength\n * @description\n * Returns a uint8Array with the specified number of bits contained in the return value. (If bitLength is -1, length checking is not done). Values with more bits are trimmed to the specified length.\n * @example\n * <BR>\n *\n * ```javascript\n * import { u8aFixLength } from '@polkadot/util';\n *\n * u8aFixLength('0x12') // => 0x12\n * u8aFixLength('0x12', 16) // => 0x0012\n * u8aFixLength('0x1234', 8) // => 0x12\n * ```\n */\n\nfunction u8aFixLength(value, bitLength = -1, atStart = false) {\n  const byteLength = Math.ceil(bitLength / 8);\n\n  if (bitLength === -1 || value.length === byteLength) {\n    return value;\n  } else if (value.length > byteLength) {\n    return value.subarray(0, byteLength);\n  }\n\n  const result = new Uint8Array(byteLength);\n\n  if (atStart) {\n    result.set(value, 0);\n  } else {\n    result.set(value, byteLength - value.length);\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/util/u8a/fixLength.js"],"names":["Object","defineProperty","exports","value","default","u8aFixLength","bitLength","atStart","byteLength","Math","ceil","length","subarray","result","Uint8Array","set"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,YAAlB,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,YAAT,CAAsBF,KAAtB,EAA6BG,SAAS,GAAG,CAAC,CAA1C,EAA6CC,OAAO,GAAG,KAAvD,EAA8D;AAC5D,QAAMC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUJ,SAAS,GAAG,CAAtB,CAAnB;;AAEA,MAAIA,SAAS,KAAK,CAAC,CAAf,IAAoBH,KAAK,CAACQ,MAAN,KAAiBH,UAAzC,EAAqD;AACnD,WAAOL,KAAP;AACD,GAFD,MAEO,IAAIA,KAAK,CAACQ,MAAN,GAAeH,UAAnB,EAA+B;AACpC,WAAOL,KAAK,CAACS,QAAN,CAAe,CAAf,EAAkBJ,UAAlB,CAAP;AACD;;AAED,QAAMK,MAAM,GAAG,IAAIC,UAAJ,CAAeN,UAAf,CAAf;;AAEA,MAAID,OAAJ,EAAa;AACXM,IAAAA,MAAM,CAACE,GAAP,CAAWZ,KAAX,EAAkB,CAAlB;AACD,GAFD,MAEO;AACLU,IAAAA,MAAM,CAACE,GAAP,CAAWZ,KAAX,EAAkBK,UAAU,GAAGL,KAAK,CAACQ,MAArC;AACD;;AAED,SAAOE,MAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = u8aFixLength;\n\n// Copyright 2017-2020 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name u8aFixLength\n * @summary Shifts a Uint8Array to a specific bitLength\n * @description\n * Returns a uint8Array with the specified number of bits contained in the return value. (If bitLength is -1, length checking is not done). Values with more bits are trimmed to the specified length.\n * @example\n * <BR>\n *\n * ```javascript\n * import { u8aFixLength } from '@polkadot/util';\n *\n * u8aFixLength('0x12') // => 0x12\n * u8aFixLength('0x12', 16) // => 0x0012\n * u8aFixLength('0x1234', 8) // => 0x12\n * ```\n */\nfunction u8aFixLength(value, bitLength = -1, atStart = false) {\n  const byteLength = Math.ceil(bitLength / 8);\n\n  if (bitLength === -1 || value.length === byteLength) {\n    return value;\n  } else if (value.length > byteLength) {\n    return value.subarray(0, byteLength);\n  }\n\n  const result = new Uint8Array(byteLength);\n\n  if (atStart) {\n    result.set(value, 0);\n  } else {\n    result.set(value, byteLength - value.length);\n  }\n\n  return result;\n}"]},"metadata":{},"sourceType":"script"}