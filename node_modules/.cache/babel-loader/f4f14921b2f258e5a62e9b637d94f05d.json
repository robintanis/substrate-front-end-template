{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = decodeU8a; // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * Given an u8a, and an array of Type constructors, decode the u8a against the\n * types, and return an array of decoded values.\n *\n * @param u8a - The u8a to decode.\n * @param types - The array of Constructor to decode the U8a against.\n */\n\nfunction decodeU8a(registry, u8a, _types) {\n  const types = Array.isArray(_types) ? _types : Object.values(_types);\n\n  if (!types.length) {\n    return [];\n  }\n\n  const Type = types[0];\n  const value = new Type(registry, u8a);\n  return [value].concat(decodeU8a(registry, u8a.subarray(value.encodedLength), types.slice(1)));\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/types/codec/utils/decodeU8a.js"],"names":["Object","defineProperty","exports","value","default","decodeU8a","registry","u8a","_types","types","Array","isArray","values","length","Type","concat","subarray","encodedLength","slice"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,SAAlB,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,SAAT,CAAmBC,QAAnB,EAA6BC,GAA7B,EAAkCC,MAAlC,EAA0C;AACxC,QAAMC,KAAK,GAAGC,KAAK,CAACC,OAAN,CAAcH,MAAd,IAAwBA,MAAxB,GAAiCR,MAAM,CAACY,MAAP,CAAcJ,MAAd,CAA/C;;AAEA,MAAI,CAACC,KAAK,CAACI,MAAX,EAAmB;AACjB,WAAO,EAAP;AACD;;AAED,QAAMC,IAAI,GAAGL,KAAK,CAAC,CAAD,CAAlB;AACA,QAAMN,KAAK,GAAG,IAAIW,IAAJ,CAASR,QAAT,EAAmBC,GAAnB,CAAd;AACA,SAAO,CAACJ,KAAD,EAAQY,MAAR,CAAeV,SAAS,CAACC,QAAD,EAAWC,GAAG,CAACS,QAAJ,CAAab,KAAK,CAACc,aAAnB,CAAX,EAA8CR,KAAK,CAACS,KAAN,CAAY,CAAZ,CAA9C,CAAxB,CAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = decodeU8a;\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * Given an u8a, and an array of Type constructors, decode the u8a against the\n * types, and return an array of decoded values.\n *\n * @param u8a - The u8a to decode.\n * @param types - The array of Constructor to decode the U8a against.\n */\nfunction decodeU8a(registry, u8a, _types) {\n  const types = Array.isArray(_types) ? _types : Object.values(_types);\n\n  if (!types.length) {\n    return [];\n  }\n\n  const Type = types[0];\n  const value = new Type(registry, u8a);\n  return [value].concat(decodeU8a(registry, u8a.subarray(value.encodedLength), types.slice(1)));\n}"]},"metadata":{},"sourceType":"script"}