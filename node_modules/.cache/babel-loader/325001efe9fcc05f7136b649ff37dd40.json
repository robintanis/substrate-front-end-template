{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = encodeMultiAddress;\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _keyMulti = _interopRequireDefault(require(\"./keyMulti\")); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name encodeMultiAddress\n * @summary Creates a multisig address.\n * @description\n * Creates a Substrate multisig address based on the input address and the required threshold.\n */\n\n\nfunction encodeMultiAddress(who, threshold, ss58Format) {\n  return (0, _encode.default)((0, _keyMulti.default)(who, threshold), ss58Format);\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/util-crypto/address/encodeMulti.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","encodeMultiAddress","_encode","_keyMulti","who","threshold","ss58Format"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,kBAAlB;;AAEA,IAAIC,OAAO,GAAGR,sBAAsB,CAACC,OAAO,CAAC,UAAD,CAAR,CAApC;;AAEA,IAAIQ,SAAS,GAAGT,sBAAsB,CAACC,OAAO,CAAC,YAAD,CAAR,CAAtC,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,kBAAT,CAA4BG,GAA5B,EAAiCC,SAAjC,EAA4CC,UAA5C,EAAwD;AACtD,SAAO,CAAC,GAAGJ,OAAO,CAACF,OAAZ,EAAqB,CAAC,GAAGG,SAAS,CAACH,OAAd,EAAuBI,GAAvB,EAA4BC,SAA5B,CAArB,EAA6DC,UAA7D,CAAP;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = encodeMultiAddress;\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _keyMulti = _interopRequireDefault(require(\"./keyMulti\"));\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name encodeMultiAddress\n * @summary Creates a multisig address.\n * @description\n * Creates a Substrate multisig address based on the input address and the required threshold.\n */\nfunction encodeMultiAddress(who, threshold, ss58Format) {\n  return (0, _encode.default)((0, _keyMulti.default)(who, threshold), ss58Format);\n}"]},"metadata":{},"sourceType":"script"}