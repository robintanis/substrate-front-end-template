{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Base = _interopRequireDefault(require(\"../codec/Base\"));\n\nvar _constants = require(\"./constants\"); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nconst VERSIONS = ['ExtrinsicPayloadUnknown', // v0 is unknown\n'ExtrinsicPayloadUnknown', 'ExtrinsicPayloadUnknown', 'ExtrinsicPayloadUnknown', 'ExtrinsicPayloadV4'];\n/**\n * @name GenericExtrinsicPayload\n * @description\n * A signing payload for an [[Extrinsic]]. For the final encoding, it is variable length based\n * on the contents included\n */\n\nclass ExtrinsicPayload extends _Base.default {\n  constructor(registry, value, {\n    version\n  } = {}) {\n    super(registry, ExtrinsicPayload.decodeExtrinsicPayload(registry, value, version));\n  }\n  /** @internal */\n\n\n  static decodeExtrinsicPayload(registry, value, version = _constants.DEFAULT_VERSION) {\n    if (value instanceof ExtrinsicPayload) {\n      return value._raw;\n    }\n\n    return registry.createType(VERSIONS[version] || VERSIONS[0], value, {\n      version\n    });\n  }\n  /**\n   * @description The block [[Hash]] the signature applies to (mortal/immortal)\n   */\n\n\n  get blockHash() {\n    return this._raw.blockHash;\n  }\n  /**\n   * @description The [[ExtrinsicEra]]\n   */\n\n\n  get era() {\n    return this._raw.era;\n  }\n  /**\n   * @description The genesis block [[Hash]] the signature applies to\n   */\n\n\n  get genesisHash() {\n    // NOTE only v3+\n    return this._raw.genesisHash || this.registry.createType('Hash');\n  }\n  /**\n   * @description The [[Raw]] contained in the payload\n   */\n\n\n  get method() {\n    return this._raw.method;\n  }\n  /**\n   * @description The [[Index]]\n   */\n\n\n  get nonce() {\n    return this._raw.nonce;\n  }\n  /**\n   * @description The specVersion as a [[u32]] for this payload\n   */\n\n\n  get specVersion() {\n    // NOTE only v3+\n    return this._raw.specVersion || this.registry.createType('u32');\n  }\n  /**\n   * @description The [[Balance]]\n   */\n\n\n  get tip() {\n    // NOTE from v2+\n    return this._raw.tip || this.registry.createType('Compact<Balance>');\n  }\n  /**\n   * @description The transaction version as a [[u32]] for this payload\n   */\n\n\n  get transactionVersion() {\n    // NOTE only v4+\n    return this._raw.transactionVersion || this.registry.createType('u32');\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return this._raw.eq(other);\n  }\n  /**\n   * @description Sign the payload with the keypair\n   */\n\n\n  sign(signerPair) {\n    const signature = this._raw.sign(signerPair); // This is extensible, so we could quite readily extend to send back extra\n    // information, such as for instance the payload, i.e. `payload: this.toHex()`\n    // For the case here we sign via the extrinsic, we ignore the return, so generally\n    // this is applicable for external signing\n\n\n    return {\n      signature: (0, _util.u8aToHex)(signature)\n    };\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExtended) {\n    return this._raw.toHuman(isExtended);\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toHex();\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return this.toHex();\n  }\n  /**\n   * @description Returns a serialized u8a form\n   */\n\n\n  toU8a(isBare) {\n    // call our parent, with only the method stripped\n    return super.toU8a(isBare ? {\n      method: true\n    } : false);\n  }\n\n}\n\nexports.default = ExtrinsicPayload;","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/types/extrinsic/ExtrinsicPayload.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_util","_Base","_constants","VERSIONS","ExtrinsicPayload","constructor","registry","version","decodeExtrinsicPayload","DEFAULT_VERSION","_raw","createType","blockHash","era","genesisHash","method","nonce","specVersion","tip","transactionVersion","eq","other","sign","signerPair","signature","u8aToHex","toHuman","isExtended","toJSON","toHex","toString","toU8a","isBare"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Base = _interopRequireDefault(require(\"../codec/Base\"));\n\nvar _constants = require(\"./constants\");\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst VERSIONS = ['ExtrinsicPayloadUnknown', // v0 is unknown\n'ExtrinsicPayloadUnknown', 'ExtrinsicPayloadUnknown', 'ExtrinsicPayloadUnknown', 'ExtrinsicPayloadV4'];\n/**\n * @name GenericExtrinsicPayload\n * @description\n * A signing payload for an [[Extrinsic]]. For the final encoding, it is variable length based\n * on the contents included\n */\n\nclass ExtrinsicPayload extends _Base.default {\n  constructor(registry, value, {\n    version\n  } = {}) {\n    super(registry, ExtrinsicPayload.decodeExtrinsicPayload(registry, value, version));\n  }\n  /** @internal */\n\n\n  static decodeExtrinsicPayload(registry, value, version = _constants.DEFAULT_VERSION) {\n    if (value instanceof ExtrinsicPayload) {\n      return value._raw;\n    }\n\n    return registry.createType(VERSIONS[version] || VERSIONS[0], value, {\n      version\n    });\n  }\n  /**\n   * @description The block [[Hash]] the signature applies to (mortal/immortal)\n   */\n\n\n  get blockHash() {\n    return this._raw.blockHash;\n  }\n  /**\n   * @description The [[ExtrinsicEra]]\n   */\n\n\n  get era() {\n    return this._raw.era;\n  }\n  /**\n   * @description The genesis block [[Hash]] the signature applies to\n   */\n\n\n  get genesisHash() {\n    // NOTE only v3+\n    return this._raw.genesisHash || this.registry.createType('Hash');\n  }\n  /**\n   * @description The [[Raw]] contained in the payload\n   */\n\n\n  get method() {\n    return this._raw.method;\n  }\n  /**\n   * @description The [[Index]]\n   */\n\n\n  get nonce() {\n    return this._raw.nonce;\n  }\n  /**\n   * @description The specVersion as a [[u32]] for this payload\n   */\n\n\n  get specVersion() {\n    // NOTE only v3+\n    return this._raw.specVersion || this.registry.createType('u32');\n  }\n  /**\n   * @description The [[Balance]]\n   */\n\n\n  get tip() {\n    // NOTE from v2+\n    return this._raw.tip || this.registry.createType('Compact<Balance>');\n  }\n  /**\n   * @description The transaction version as a [[u32]] for this payload\n   */\n\n\n  get transactionVersion() {\n    // NOTE only v4+\n    return this._raw.transactionVersion || this.registry.createType('u32');\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return this._raw.eq(other);\n  }\n  /**\n   * @description Sign the payload with the keypair\n   */\n\n\n  sign(signerPair) {\n    const signature = this._raw.sign(signerPair); // This is extensible, so we could quite readily extend to send back extra\n    // information, such as for instance the payload, i.e. `payload: this.toHex()`\n    // For the case here we sign via the extrinsic, we ignore the return, so generally\n    // this is applicable for external signing\n\n\n    return {\n      signature: (0, _util.u8aToHex)(signature)\n    };\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExtended) {\n    return this._raw.toHuman(isExtended);\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toHex();\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return this.toHex();\n  }\n  /**\n   * @description Returns a serialized u8a form\n   */\n\n\n  toU8a(isBare) {\n    // call our parent, with only the method stripped\n    return super.toU8a(isBare ? {\n      method: true\n    } : false);\n  }\n\n}\n\nexports.default = ExtrinsicPayload;"]},"metadata":{},"sourceType":"script"}