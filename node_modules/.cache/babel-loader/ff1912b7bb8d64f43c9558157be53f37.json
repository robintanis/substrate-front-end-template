{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.indexes = indexes;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _util2 = require(\"../util\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nfunction isEraOpt(era) {\n  return (0, _util.isFunction)(era.unwrapOrDefault);\n} // parse into Indexes\n\n\nfunction parse([activeEra, activeEraStart, currentEra, currentIndex, validatorCount]) {\n  return {\n    activeEra,\n    activeEraStart,\n    currentEra,\n    currentIndex,\n    validatorCount\n  };\n} // query for previous V2\n\n\nfunction queryNoActive(api) {\n  return api.queryMulti([api.query.staking.currentEra, api.query.session.currentIndex, api.query.staking.validatorCount]).pipe((0, _operators.map)(([currentEraOpt, currentIndex, validatorCount]) => {\n    const currentEra = isEraOpt(currentEraOpt) ? currentEraOpt.unwrapOrDefault() : currentEraOpt;\n    return parse([currentEra, api.registry.createType('Option<Moment>'), currentEra, currentIndex, validatorCount]);\n  }));\n} // query based on latest\n\n\nfunction query(api) {\n  return api.queryMulti([api.query.staking.activeEra, api.query.staking.currentEra, api.query.session.currentIndex, api.query.staking.validatorCount]).pipe((0, _operators.map)(([activeOpt, currentEra, currentIndex, validatorCount]) => {\n    const {\n      index,\n      start\n    } = activeOpt.unwrapOrDefault();\n    return parse([index, start, currentEra.unwrapOrDefault(), currentIndex, validatorCount]);\n  }));\n} // empty set when none is available\n\n\nfunction empty(api) {\n  return (0, _rxjs.of)(parse([api.registry.createType('EraIndex'), api.registry.createType('Option<Moment>'), api.registry.createType('EraIndex'), api.registry.createType('SessionIndex', 1), api.registry.createType('u32')]));\n}\n\nfunction indexes(instanceId, api) {\n  return (0, _util2.memo)(instanceId, () => api.query.session && api.query.staking ? (0, _util.isFunction)(api.query.staking.activeEra) ? query(api) : queryNoActive(api) : empty(api));\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/api-derive/session/indexes.js"],"names":["Object","defineProperty","exports","value","indexes","_rxjs","require","_operators","_util","_util2","isEraOpt","era","isFunction","unwrapOrDefault","parse","activeEra","activeEraStart","currentEra","currentIndex","validatorCount","queryNoActive","api","queryMulti","query","staking","session","pipe","map","currentEraOpt","registry","createType","activeOpt","index","start","empty","of","instanceId","memo"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBA,OAAlB;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AAEA,IAAIC,UAAU,GAAGD,OAAO,CAAC,gBAAD,CAAxB;;AAEA,IAAIE,KAAK,GAAGF,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIG,MAAM,GAAGH,OAAO,CAAC,SAAD,CAApB,C,CAEA;AACA;;;AACA,SAASI,QAAT,CAAkBC,GAAlB,EAAuB;AACrB,SAAO,CAAC,GAAGH,KAAK,CAACI,UAAV,EAAsBD,GAAG,CAACE,eAA1B,CAAP;AACD,C,CAAC;;;AAGF,SAASC,KAAT,CAAe,CAACC,SAAD,EAAYC,cAAZ,EAA4BC,UAA5B,EAAwCC,YAAxC,EAAsDC,cAAtD,CAAf,EAAsF;AACpF,SAAO;AACLJ,IAAAA,SADK;AAELC,IAAAA,cAFK;AAGLC,IAAAA,UAHK;AAILC,IAAAA,YAJK;AAKLC,IAAAA;AALK,GAAP;AAOD,C,CAAC;;;AAGF,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;AAC1B,SAAOA,GAAG,CAACC,UAAJ,CAAe,CAACD,GAAG,CAACE,KAAJ,CAAUC,OAAV,CAAkBP,UAAnB,EAA+BI,GAAG,CAACE,KAAJ,CAAUE,OAAV,CAAkBP,YAAjD,EAA+DG,GAAG,CAACE,KAAJ,CAAUC,OAAV,CAAkBL,cAAjF,CAAf,EAAiHO,IAAjH,CAAsH,CAAC,GAAGnB,UAAU,CAACoB,GAAf,EAAoB,CAAC,CAACC,aAAD,EAAgBV,YAAhB,EAA8BC,cAA9B,CAAD,KAAmD;AAClM,UAAMF,UAAU,GAAGP,QAAQ,CAACkB,aAAD,CAAR,GAA0BA,aAAa,CAACf,eAAd,EAA1B,GAA4De,aAA/E;AACA,WAAOd,KAAK,CAAC,CAACG,UAAD,EAAaI,GAAG,CAACQ,QAAJ,CAAaC,UAAb,CAAwB,gBAAxB,CAAb,EAAwDb,UAAxD,EAAoEC,YAApE,EAAkFC,cAAlF,CAAD,CAAZ;AACD,GAH4H,CAAtH,CAAP;AAID,C,CAAC;;;AAGF,SAASI,KAAT,CAAeF,GAAf,EAAoB;AAClB,SAAOA,GAAG,CAACC,UAAJ,CAAe,CAACD,GAAG,CAACE,KAAJ,CAAUC,OAAV,CAAkBT,SAAnB,EAA8BM,GAAG,CAACE,KAAJ,CAAUC,OAAV,CAAkBP,UAAhD,EAA4DI,GAAG,CAACE,KAAJ,CAAUE,OAAV,CAAkBP,YAA9E,EAA4FG,GAAG,CAACE,KAAJ,CAAUC,OAAV,CAAkBL,cAA9G,CAAf,EAA8IO,IAA9I,CAAmJ,CAAC,GAAGnB,UAAU,CAACoB,GAAf,EAAoB,CAAC,CAACI,SAAD,EAAYd,UAAZ,EAAwBC,YAAxB,EAAsCC,cAAtC,CAAD,KAA2D;AACvO,UAAM;AACJa,MAAAA,KADI;AAEJC,MAAAA;AAFI,QAGFF,SAAS,CAAClB,eAAV,EAHJ;AAIA,WAAOC,KAAK,CAAC,CAACkB,KAAD,EAAQC,KAAR,EAAehB,UAAU,CAACJ,eAAX,EAAf,EAA6CK,YAA7C,EAA2DC,cAA3D,CAAD,CAAZ;AACD,GANyJ,CAAnJ,CAAP;AAOD,C,CAAC;;;AAGF,SAASe,KAAT,CAAeb,GAAf,EAAoB;AAClB,SAAO,CAAC,GAAGhB,KAAK,CAAC8B,EAAV,EAAcrB,KAAK,CAAC,CAACO,GAAG,CAACQ,QAAJ,CAAaC,UAAb,CAAwB,UAAxB,CAAD,EAAsCT,GAAG,CAACQ,QAAJ,CAAaC,UAAb,CAAwB,gBAAxB,CAAtC,EAAiFT,GAAG,CAACQ,QAAJ,CAAaC,UAAb,CAAwB,UAAxB,CAAjF,EAAsHT,GAAG,CAACQ,QAAJ,CAAaC,UAAb,CAAwB,cAAxB,EAAwC,CAAxC,CAAtH,EAAkKT,GAAG,CAACQ,QAAJ,CAAaC,UAAb,CAAwB,KAAxB,CAAlK,CAAD,CAAnB,CAAP;AACD;;AAED,SAAS1B,OAAT,CAAiBgC,UAAjB,EAA6Bf,GAA7B,EAAkC;AAChC,SAAO,CAAC,GAAGZ,MAAM,CAAC4B,IAAX,EAAiBD,UAAjB,EAA6B,MAAMf,GAAG,CAACE,KAAJ,CAAUE,OAAV,IAAqBJ,GAAG,CAACE,KAAJ,CAAUC,OAA/B,GAAyC,CAAC,GAAGhB,KAAK,CAACI,UAAV,EAAsBS,GAAG,CAACE,KAAJ,CAAUC,OAAV,CAAkBT,SAAxC,IAAqDQ,KAAK,CAACF,GAAD,CAA1D,GAAkED,aAAa,CAACC,GAAD,CAAxH,GAAgIa,KAAK,CAACb,GAAD,CAAxK,CAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.indexes = indexes;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _util2 = require(\"../util\");\n\n// Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction isEraOpt(era) {\n  return (0, _util.isFunction)(era.unwrapOrDefault);\n} // parse into Indexes\n\n\nfunction parse([activeEra, activeEraStart, currentEra, currentIndex, validatorCount]) {\n  return {\n    activeEra,\n    activeEraStart,\n    currentEra,\n    currentIndex,\n    validatorCount\n  };\n} // query for previous V2\n\n\nfunction queryNoActive(api) {\n  return api.queryMulti([api.query.staking.currentEra, api.query.session.currentIndex, api.query.staking.validatorCount]).pipe((0, _operators.map)(([currentEraOpt, currentIndex, validatorCount]) => {\n    const currentEra = isEraOpt(currentEraOpt) ? currentEraOpt.unwrapOrDefault() : currentEraOpt;\n    return parse([currentEra, api.registry.createType('Option<Moment>'), currentEra, currentIndex, validatorCount]);\n  }));\n} // query based on latest\n\n\nfunction query(api) {\n  return api.queryMulti([api.query.staking.activeEra, api.query.staking.currentEra, api.query.session.currentIndex, api.query.staking.validatorCount]).pipe((0, _operators.map)(([activeOpt, currentEra, currentIndex, validatorCount]) => {\n    const {\n      index,\n      start\n    } = activeOpt.unwrapOrDefault();\n    return parse([index, start, currentEra.unwrapOrDefault(), currentIndex, validatorCount]);\n  }));\n} // empty set when none is available\n\n\nfunction empty(api) {\n  return (0, _rxjs.of)(parse([api.registry.createType('EraIndex'), api.registry.createType('Option<Moment>'), api.registry.createType('EraIndex'), api.registry.createType('SessionIndex', 1), api.registry.createType('u32')]));\n}\n\nfunction indexes(instanceId, api) {\n  return (0, _util2.memo)(instanceId, () => api.query.session && api.query.staking ? (0, _util.isFunction)(api.query.staking.activeEra) ? query(api) : queryNoActive(api) : empty(api));\n}"]},"metadata":{},"sourceType":"script"}