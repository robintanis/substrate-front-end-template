{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = filterEvents;\n\nvar _logging = _interopRequireDefault(require(\"./logging\")); // Copyright 2017-2020 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nfunction filterEvents(extHash, {\n  block: {\n    extrinsics,\n    header\n  }\n}, allEvents, status) {\n  // extrinsics to hashes\n  const myHash = extHash.toHex();\n  const allHashes = extrinsics.map(ext => ext.hash.toHex()); // find the index of our extrinsic in the block\n\n  const index = allHashes.indexOf(myHash); // if we do get the block after finalized, it _should_ be there\n\n  if (index === -1) {\n    // only warn on filtering with isInBlock (finalization finalizes after)\n    if (status.isInBlock) {\n      _logging.default.warn(`block ${header.hash.toHex()}: Unable to find extrinsic ${myHash} inside ${allHashes.join(', ')}`);\n    }\n\n    return;\n  }\n\n  return allEvents.filter(({\n    phase\n  }) => // only ApplyExtrinsic has the extrinsic index\n  phase.isApplyExtrinsic && phase.asApplyExtrinsic.eqn(index));\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/api/util/filterEvents.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","filterEvents","_logging","extHash","block","extrinsics","header","allEvents","status","myHash","toHex","allHashes","map","ext","hash","index","indexOf","isInBlock","warn","join","filter","phase","isApplyExtrinsic","asApplyExtrinsic","eqn"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,YAAlB;;AAEA,IAAIC,QAAQ,GAAGR,sBAAsB,CAACC,OAAO,CAAC,WAAD,CAAR,CAArC,C,CAEA;AACA;;;AACA,SAASM,YAAT,CAAsBE,OAAtB,EAA+B;AAC7BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,UADK;AAELC,IAAAA;AAFK;AADsB,CAA/B,EAKGC,SALH,EAKcC,MALd,EAKsB;AACpB;AACA,QAAMC,MAAM,GAAGN,OAAO,CAACO,KAAR,EAAf;AACA,QAAMC,SAAS,GAAGN,UAAU,CAACO,GAAX,CAAeC,GAAG,IAAIA,GAAG,CAACC,IAAJ,CAASJ,KAAT,EAAtB,CAAlB,CAHoB,CAGuC;;AAE3D,QAAMK,KAAK,GAAGJ,SAAS,CAACK,OAAV,CAAkBP,MAAlB,CAAd,CALoB,CAKqB;;AAEzC,MAAIM,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB;AACA,QAAIP,MAAM,CAACS,SAAX,EAAsB;AACpBf,MAAAA,QAAQ,CAACF,OAAT,CAAiBkB,IAAjB,CAAuB,SAAQZ,MAAM,CAACQ,IAAP,CAAYJ,KAAZ,EAAoB,8BAA6BD,MAAO,WAAUE,SAAS,CAACQ,IAAV,CAAe,IAAf,CAAqB,EAAtH;AACD;;AAED;AACD;;AAED,SAAOZ,SAAS,CAACa,MAAV,CAAiB,CAAC;AACvBC,IAAAA;AADuB,GAAD,KAElB;AACNA,EAAAA,KAAK,CAACC,gBAAN,IAA0BD,KAAK,CAACE,gBAAN,CAAuBC,GAAvB,CAA2BT,KAA3B,CAHnB,CAAP;AAID","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = filterEvents;\n\nvar _logging = _interopRequireDefault(require(\"./logging\"));\n\n// Copyright 2017-2020 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction filterEvents(extHash, {\n  block: {\n    extrinsics,\n    header\n  }\n}, allEvents, status) {\n  // extrinsics to hashes\n  const myHash = extHash.toHex();\n  const allHashes = extrinsics.map(ext => ext.hash.toHex()); // find the index of our extrinsic in the block\n\n  const index = allHashes.indexOf(myHash); // if we do get the block after finalized, it _should_ be there\n\n  if (index === -1) {\n    // only warn on filtering with isInBlock (finalization finalizes after)\n    if (status.isInBlock) {\n      _logging.default.warn(`block ${header.hash.toHex()}: Unable to find extrinsic ${myHash} inside ${allHashes.join(', ')}`);\n    }\n\n    return;\n  }\n\n  return allEvents.filter(({\n    phase\n  }) => // only ApplyExtrinsic has the extrinsic index\n  phase.isApplyExtrinsic && phase.asApplyExtrinsic.eqn(index));\n}"]},"metadata":{},"sourceType":"script"}