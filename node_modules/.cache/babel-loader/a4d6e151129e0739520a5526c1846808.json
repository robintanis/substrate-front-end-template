{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = sqrt;\n\nvar _bn = _interopRequireDefault(require(\"bn.js\"));\n\nvar _assert = _interopRequireDefault(require(\"../assert\")); // Copyright 2017-2020 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// https://golb.hplar.ch/2018/09/javascript-bigint.html\n\n\nfunction newtonIteration(n, x0) {\n  const x1 = n.div(x0).add(x0).shrn(1);\n\n  if (x0.eq(x1) || x0.eq(x1.subn(1))) {\n    return x0;\n  }\n\n  return newtonIteration(n, x1);\n}\n/**\n * @name bnSqrt\n * @summary Calculates the integer square root of a BN\n * @example\n * <BR>\n *\n * ```javascript\n * import BN from 'bn.js';\n * import { bnSqrt } from '@polkadot/util';\n *\n * bnSqrt(new BN(16)).toString(); // => '4'\n * ```\n */\n\n\nfunction sqrt(value) {\n  (0, _assert.default)(value.gten(0), 'square root of negative numbers is not supported');\n  return value.ltn(2) ? value : newtonIteration(value, new _bn.default(1));\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/util/bn/sqrt.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","sqrt","_bn","_assert","newtonIteration","n","x0","x1","div","add","shrn","eq","subn","gten","ltn"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,IAAlB;;AAEA,IAAIC,GAAG,GAAGR,sBAAsB,CAACC,OAAO,CAAC,OAAD,CAAR,CAAhC;;AAEA,IAAIQ,OAAO,GAAGT,sBAAsB,CAACC,OAAO,CAAC,WAAD,CAAR,CAApC,C,CAEA;AACA;AACA;;;AACA,SAASS,eAAT,CAAyBC,CAAzB,EAA4BC,EAA5B,EAAgC;AAC9B,QAAMC,EAAE,GAAGF,CAAC,CAACG,GAAF,CAAMF,EAAN,EAAUG,GAAV,CAAcH,EAAd,EAAkBI,IAAlB,CAAuB,CAAvB,CAAX;;AAEA,MAAIJ,EAAE,CAACK,EAAH,CAAMJ,EAAN,KAAaD,EAAE,CAACK,EAAH,CAAMJ,EAAE,CAACK,IAAH,CAAQ,CAAR,CAAN,CAAjB,EAAoC;AAClC,WAAON,EAAP;AACD;;AAED,SAAOF,eAAe,CAACC,CAAD,EAAIE,EAAJ,CAAtB;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASN,IAAT,CAAcF,KAAd,EAAqB;AACnB,GAAC,GAAGI,OAAO,CAACH,OAAZ,EAAqBD,KAAK,CAACc,IAAN,CAAW,CAAX,CAArB,EAAoC,kDAApC;AACA,SAAOd,KAAK,CAACe,GAAN,CAAU,CAAV,IAAef,KAAf,GAAuBK,eAAe,CAACL,KAAD,EAAQ,IAAIG,GAAG,CAACF,OAAR,CAAgB,CAAhB,CAAR,CAA7C;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = sqrt;\n\nvar _bn = _interopRequireDefault(require(\"bn.js\"));\n\nvar _assert = _interopRequireDefault(require(\"../assert\"));\n\n// Copyright 2017-2020 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// https://golb.hplar.ch/2018/09/javascript-bigint.html\nfunction newtonIteration(n, x0) {\n  const x1 = n.div(x0).add(x0).shrn(1);\n\n  if (x0.eq(x1) || x0.eq(x1.subn(1))) {\n    return x0;\n  }\n\n  return newtonIteration(n, x1);\n}\n/**\n * @name bnSqrt\n * @summary Calculates the integer square root of a BN\n * @example\n * <BR>\n *\n * ```javascript\n * import BN from 'bn.js';\n * import { bnSqrt } from '@polkadot/util';\n *\n * bnSqrt(new BN(16)).toString(); // => '4'\n * ```\n */\n\n\nfunction sqrt(value) {\n  (0, _assert.default)(value.gten(0), 'square root of negative numbers is not supported');\n  return value.ltn(2) ? value : newtonIteration(value, new _bn.default(1));\n}"]},"metadata":{},"sourceType":"script"}