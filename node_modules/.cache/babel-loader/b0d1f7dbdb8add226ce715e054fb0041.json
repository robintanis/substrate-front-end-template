{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = secp256k1Hasher;\n\nvar _blake = require(\"../blake2\");\n\nvar _keccak = require(\"../keccak\"); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nconst HASH_TYPES = ['blake2', 'keccak'];\n\nfunction secp256k1Hasher(hashType, data) {\n  if (hashType === 'blake2') {\n    return (0, _blake.blake2AsU8a)(data);\n  } else if (hashType === 'keccak') {\n    return (0, _keccak.keccakAsU8a)(data);\n  }\n\n  throw new Error(`Unsupported secp256k1 hasher '${hashType}', expected one of ${HASH_TYPES.join(', ')}`);\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/util-crypto/secp256k1/hasher.js"],"names":["Object","defineProperty","exports","value","default","secp256k1Hasher","_blake","require","_keccak","HASH_TYPES","hashType","data","blake2AsU8a","keccakAsU8a","Error","join"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,eAAlB;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,WAAD,CAApB;;AAEA,IAAIC,OAAO,GAAGD,OAAO,CAAC,WAAD,CAArB,C,CAEA;AACA;;;AACA,MAAME,UAAU,GAAG,CAAC,QAAD,EAAW,QAAX,CAAnB;;AAEA,SAASJ,eAAT,CAAyBK,QAAzB,EAAmCC,IAAnC,EAAyC;AACvC,MAAID,QAAQ,KAAK,QAAjB,EAA2B;AACzB,WAAO,CAAC,GAAGJ,MAAM,CAACM,WAAX,EAAwBD,IAAxB,CAAP;AACD,GAFD,MAEO,IAAID,QAAQ,KAAK,QAAjB,EAA2B;AAChC,WAAO,CAAC,GAAGF,OAAO,CAACK,WAAZ,EAAyBF,IAAzB,CAAP;AACD;;AAED,QAAM,IAAIG,KAAJ,CAAW,iCAAgCJ,QAAS,sBAAqBD,UAAU,CAACM,IAAX,CAAgB,IAAhB,CAAsB,EAA/F,CAAN;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = secp256k1Hasher;\n\nvar _blake = require(\"../blake2\");\n\nvar _keccak = require(\"../keccak\");\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst HASH_TYPES = ['blake2', 'keccak'];\n\nfunction secp256k1Hasher(hashType, data) {\n  if (hashType === 'blake2') {\n    return (0, _blake.blake2AsU8a)(data);\n  } else if (hashType === 'keccak') {\n    return (0, _keccak.keccakAsU8a)(data);\n  }\n\n  throw new Error(`Unsupported secp256k1 hasher '${hashType}', expected one of ${HASH_TYPES.join(', ')}`);\n}"]},"metadata":{},"sourceType":"script"}