{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = decode;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _decode = _interopRequireDefault(require(\"../base58/decode\"));\n\nvar _checkChecksum = _interopRequireDefault(require(\"./checkChecksum\"));\n\nvar _defaults = _interopRequireDefault(require(\"./defaults\")); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// Original implementation: https://github.com/paritytech/polka-ui/blob/4858c094684769080f5811f32b081dd7780b0880/src/polkadot.js#L6\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\nfunction decode(encoded, ignoreChecksum, ss58Format = 99) {\n  if ((0, _util.isU8a)(encoded) || (0, _util.isHex)(encoded)) {\n    return (0, _util.u8aToU8a)(encoded);\n  }\n\n  const wrapError = message => `Decoding ${encoded}: ${message}`;\n\n  let decoded;\n\n  try {\n    decoded = (0, _decode.default)(encoded);\n  } catch (error) {\n    throw new Error(wrapError(error.message));\n  } // assert(defaults.allowedPrefix.includes(decoded[0] as Prefix), error('Invalid decoded address prefix'));\n\n\n  (0, _util.assert)(_defaults.default.allowedEncodedLengths.includes(decoded.length), wrapError('Invalid decoded address length')); // TODO Unless it is an \"use everywhere\" prefix, throw an error\n  // if (decoded[0] !== prefix) {\n  //   console.log(`WARN: Expected ${prefix}, found ${decoded[0]}`);\n  // }\n\n  const [isValid, endPos] = (0, _checkChecksum.default)(decoded);\n  (0, _util.assert)(ignoreChecksum || isValid, wrapError('Invalid decoded address checksum'));\n  return decoded.slice(1, endPos);\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/util-crypto/address/decode.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","decode","_util","_decode","_checkChecksum","_defaults","encoded","ignoreChecksum","ss58Format","isU8a","isHex","u8aToU8a","wrapError","message","decoded","error","Error","assert","allowedEncodedLengths","includes","length","isValid","endPos","slice"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,MAAlB;;AAEA,IAAIC,KAAK,GAAGP,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIQ,OAAO,GAAGT,sBAAsB,CAACC,OAAO,CAAC,kBAAD,CAAR,CAApC;;AAEA,IAAIS,cAAc,GAAGV,sBAAsB,CAACC,OAAO,CAAC,iBAAD,CAAR,CAA3C;;AAEA,IAAIU,SAAS,GAAGX,sBAAsB,CAACC,OAAO,CAAC,YAAD,CAAR,CAAtC,C,CAEA;AACA;AACA;AACA;;;AACA,SAASM,MAAT,CAAgBK,OAAhB,EAAyBC,cAAzB,EAAyCC,UAAU,GAAG,EAAtD,EAA0D;AACxD,MAAI,CAAC,GAAGN,KAAK,CAACO,KAAV,EAAiBH,OAAjB,KAA6B,CAAC,GAAGJ,KAAK,CAACQ,KAAV,EAAiBJ,OAAjB,CAAjC,EAA4D;AAC1D,WAAO,CAAC,GAAGJ,KAAK,CAACS,QAAV,EAAoBL,OAApB,CAAP;AACD;;AAED,QAAMM,SAAS,GAAGC,OAAO,IAAK,YAAWP,OAAQ,KAAIO,OAAQ,EAA7D;;AAEA,MAAIC,OAAJ;;AAEA,MAAI;AACFA,IAAAA,OAAO,GAAG,CAAC,GAAGX,OAAO,CAACH,OAAZ,EAAqBM,OAArB,CAAV;AACD,GAFD,CAEE,OAAOS,KAAP,EAAc;AACd,UAAM,IAAIC,KAAJ,CAAUJ,SAAS,CAACG,KAAK,CAACF,OAAP,CAAnB,CAAN;AACD,GAbuD,CAatD;;;AAGF,GAAC,GAAGX,KAAK,CAACe,MAAV,EAAkBZ,SAAS,CAACL,OAAV,CAAkBkB,qBAAlB,CAAwCC,QAAxC,CAAiDL,OAAO,CAACM,MAAzD,CAAlB,EAAoFR,SAAS,CAAC,gCAAD,CAA7F,EAhBwD,CAgB0E;AAClI;AACA;AACA;;AAEA,QAAM,CAACS,OAAD,EAAUC,MAAV,IAAoB,CAAC,GAAGlB,cAAc,CAACJ,OAAnB,EAA4Bc,OAA5B,CAA1B;AACA,GAAC,GAAGZ,KAAK,CAACe,MAAV,EAAkBV,cAAc,IAAIc,OAApC,EAA6CT,SAAS,CAAC,kCAAD,CAAtD;AACA,SAAOE,OAAO,CAACS,KAAR,CAAc,CAAd,EAAiBD,MAAjB,CAAP;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = decode;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _decode = _interopRequireDefault(require(\"../base58/decode\"));\n\nvar _checkChecksum = _interopRequireDefault(require(\"./checkChecksum\"));\n\nvar _defaults = _interopRequireDefault(require(\"./defaults\"));\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// Original implementation: https://github.com/paritytech/polka-ui/blob/4858c094684769080f5811f32b081dd7780b0880/src/polkadot.js#L6\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction decode(encoded, ignoreChecksum, ss58Format = 99) {\n  if ((0, _util.isU8a)(encoded) || (0, _util.isHex)(encoded)) {\n    return (0, _util.u8aToU8a)(encoded);\n  }\n\n  const wrapError = message => `Decoding ${encoded}: ${message}`;\n\n  let decoded;\n\n  try {\n    decoded = (0, _decode.default)(encoded);\n  } catch (error) {\n    throw new Error(wrapError(error.message));\n  } // assert(defaults.allowedPrefix.includes(decoded[0] as Prefix), error('Invalid decoded address prefix'));\n\n\n  (0, _util.assert)(_defaults.default.allowedEncodedLengths.includes(decoded.length), wrapError('Invalid decoded address length')); // TODO Unless it is an \"use everywhere\" prefix, throw an error\n  // if (decoded[0] !== prefix) {\n  //   console.log(`WARN: Expected ${prefix}, found ${decoded[0]}`);\n  // }\n\n  const [isValid, endPos] = (0, _checkChecksum.default)(decoded);\n  (0, _util.assert)(ignoreChecksum || isValid, wrapError('Invalid decoded address checksum'));\n  return decoded.slice(1, endPos);\n}"]},"metadata":{},"sourceType":"script"}