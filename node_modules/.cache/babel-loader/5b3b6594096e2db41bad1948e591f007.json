{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Compact = _interopRequireDefault(require(\"./Compact\"));\n\nvar _Raw = _interopRequireDefault(require(\"./Raw\"));\n\nvar _utils = require(\"./utils\"); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\n\n\nfunction decodeSetFromU8a(registry, ValClass, u8a) {\n  const output = new Set();\n\n  const [offset, length] = _Compact.default.decodeU8a(u8a);\n\n  const types = [];\n\n  for (let i = 0; i < length.toNumber(); i++) {\n    types.push(ValClass);\n  }\n\n  const values = (0, _utils.decodeU8a)(registry, u8a.subarray(offset), types);\n\n  for (let i = 0; i < values.length; i++) {\n    output.add(values[i]);\n  }\n\n  return output;\n}\n/** @internal */\n\n\nfunction decodeSetFromSet(registry, ValClass, value) {\n  const output = new Set();\n  value.forEach(val => {\n    try {\n      output.add(val instanceof ValClass ? val : new ValClass(registry, val));\n    } catch (error) {\n      console.error('Failed to decode BTreeSet key or value:', error.message);\n      throw error;\n    }\n  });\n  return output;\n}\n/**\n * Decode input to pass into constructor.\n *\n * @param ValClass - Type of the map value\n * @param value - Value to decode, one of:\n * - null\n * - undefined\n * - hex\n * - Uint8Array\n * - Set<any>, where both key and value types are either\n *   constructors or decodeable values for their types.\n * @param jsonSet\n * @internal\n */\n\n\nfunction decodeSet(registry, valType, value) {\n  if (!value) {\n    return new Set();\n  }\n\n  const ValClass = (0, _utils.typeToConstructor)(registry, valType);\n\n  if ((0, _util.isHex)(value)) {\n    return decodeSet(registry, ValClass, (0, _util.hexToU8a)(value));\n  } else if ((0, _util.isU8a)(value)) {\n    return decodeSetFromU8a(registry, ValClass, (0, _util.u8aToU8a)(value));\n  } else if (Array.isArray(value) || value instanceof Set) {\n    return decodeSetFromSet(registry, ValClass, value);\n  }\n\n  throw new Error('BTreeSet: cannot decode type');\n}\n\nvar _ValClass = (0, _classPrivateFieldLooseKey2.default)(\"ValClass\");\n\nclass BTreeSet extends Set {\n  constructor(registry, valType, rawValue) {\n    super(decodeSet(registry, valType, rawValue));\n    this.registry = void 0;\n    Object.defineProperty(this, _ValClass, {\n      writable: true,\n      value: void 0\n    });\n    this.registry = registry;\n    (0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass] = (0, _utils.typeToConstructor)(registry, valType);\n  }\n\n  static with(valType) {\n    return class extends BTreeSet {\n      constructor(registry, value) {\n        super(registry, valType, value);\n      }\n\n    };\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    let len = _Compact.default.encodeU8a(this.size).length;\n\n    this.forEach(v => {\n      len += v.encodedLength;\n    });\n    return len;\n  }\n  /**\n   * @description Returns a hash of the value\n   */\n\n\n  get hash() {\n    return new _Raw.default(this.registry, this.registry.hash(this.toU8a()));\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return this.size === 0;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return (0, _utils.compareSet)(this, other);\n  }\n  /**\n   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n   */\n\n\n  toHex() {\n    return (0, _util.u8aToHex)(this.toU8a());\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExtended) {\n    const json = [];\n    this.forEach(v => {\n      json.push(v.toHuman(isExtended));\n    });\n    return json;\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    const json = [];\n    this.forEach(v => {\n      json.push(v.toJSON());\n    });\n    return json;\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return `BTreeSet<${this.registry.getClassName((0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass]) || new ((0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass])(this.registry).toRawType()}>`;\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    const encoded = new Array();\n\n    if (!isBare) {\n      encoded.push(_Compact.default.encodeU8a(this.size));\n    }\n\n    this.forEach(v => {\n      encoded.push(v.toU8a(isBare));\n    });\n    return (0, _util.u8aConcat)(...encoded);\n  }\n\n}\n\nexports.default = BTreeSet;","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/types/codec/BTreeSet.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_classPrivateFieldLooseBase2","_classPrivateFieldLooseKey2","_util","_Compact","_Raw","_utils","decodeSetFromU8a","registry","ValClass","u8a","output","Set","offset","length","decodeU8a","types","i","toNumber","push","values","subarray","add","decodeSetFromSet","forEach","val","error","console","message","decodeSet","valType","typeToConstructor","isHex","hexToU8a","isU8a","u8aToU8a","Array","isArray","Error","_ValClass","BTreeSet","constructor","rawValue","writable","with","encodedLength","len","encodeU8a","size","v","hash","toU8a","isEmpty","eq","other","compareSet","toHex","u8aToHex","toHuman","isExtended","json","toJSON","toRawType","getClassName","toString","JSON","stringify","isBare","encoded","u8aConcat"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Compact = _interopRequireDefault(require(\"./Compact\"));\n\nvar _Raw = _interopRequireDefault(require(\"./Raw\"));\n\nvar _utils = require(\"./utils\");\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\nfunction decodeSetFromU8a(registry, ValClass, u8a) {\n  const output = new Set();\n\n  const [offset, length] = _Compact.default.decodeU8a(u8a);\n\n  const types = [];\n\n  for (let i = 0; i < length.toNumber(); i++) {\n    types.push(ValClass);\n  }\n\n  const values = (0, _utils.decodeU8a)(registry, u8a.subarray(offset), types);\n\n  for (let i = 0; i < values.length; i++) {\n    output.add(values[i]);\n  }\n\n  return output;\n}\n/** @internal */\n\n\nfunction decodeSetFromSet(registry, ValClass, value) {\n  const output = new Set();\n  value.forEach(val => {\n    try {\n      output.add(val instanceof ValClass ? val : new ValClass(registry, val));\n    } catch (error) {\n      console.error('Failed to decode BTreeSet key or value:', error.message);\n      throw error;\n    }\n  });\n  return output;\n}\n/**\n * Decode input to pass into constructor.\n *\n * @param ValClass - Type of the map value\n * @param value - Value to decode, one of:\n * - null\n * - undefined\n * - hex\n * - Uint8Array\n * - Set<any>, where both key and value types are either\n *   constructors or decodeable values for their types.\n * @param jsonSet\n * @internal\n */\n\n\nfunction decodeSet(registry, valType, value) {\n  if (!value) {\n    return new Set();\n  }\n\n  const ValClass = (0, _utils.typeToConstructor)(registry, valType);\n\n  if ((0, _util.isHex)(value)) {\n    return decodeSet(registry, ValClass, (0, _util.hexToU8a)(value));\n  } else if ((0, _util.isU8a)(value)) {\n    return decodeSetFromU8a(registry, ValClass, (0, _util.u8aToU8a)(value));\n  } else if (Array.isArray(value) || value instanceof Set) {\n    return decodeSetFromSet(registry, ValClass, value);\n  }\n\n  throw new Error('BTreeSet: cannot decode type');\n}\n\nvar _ValClass = (0, _classPrivateFieldLooseKey2.default)(\"ValClass\");\n\nclass BTreeSet extends Set {\n  constructor(registry, valType, rawValue) {\n    super(decodeSet(registry, valType, rawValue));\n    this.registry = void 0;\n    Object.defineProperty(this, _ValClass, {\n      writable: true,\n      value: void 0\n    });\n    this.registry = registry;\n    (0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass] = (0, _utils.typeToConstructor)(registry, valType);\n  }\n\n  static with(valType) {\n    return class extends BTreeSet {\n      constructor(registry, value) {\n        super(registry, valType, value);\n      }\n\n    };\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    let len = _Compact.default.encodeU8a(this.size).length;\n\n    this.forEach(v => {\n      len += v.encodedLength;\n    });\n    return len;\n  }\n  /**\n   * @description Returns a hash of the value\n   */\n\n\n  get hash() {\n    return new _Raw.default(this.registry, this.registry.hash(this.toU8a()));\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return this.size === 0;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return (0, _utils.compareSet)(this, other);\n  }\n  /**\n   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n   */\n\n\n  toHex() {\n    return (0, _util.u8aToHex)(this.toU8a());\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExtended) {\n    const json = [];\n    this.forEach(v => {\n      json.push(v.toHuman(isExtended));\n    });\n    return json;\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    const json = [];\n    this.forEach(v => {\n      json.push(v.toJSON());\n    });\n    return json;\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return `BTreeSet<${this.registry.getClassName((0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass]) || new ((0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass])(this.registry).toRawType()}>`;\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    const encoded = new Array();\n\n    if (!isBare) {\n      encoded.push(_Compact.default.encodeU8a(this.size));\n    }\n\n    this.forEach(v => {\n      encoded.push(v.toU8a(isBare));\n    });\n    return (0, _util.u8aConcat)(...encoded);\n  }\n\n}\n\nexports.default = BTreeSet;"]},"metadata":{},"sourceType":"script"}