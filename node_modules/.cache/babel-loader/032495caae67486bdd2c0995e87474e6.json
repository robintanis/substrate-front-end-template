{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Compact = _interopRequireDefault(require(\"../codec/Compact\"));\n\nvar _Raw = _interopRequireDefault(require(\"../codec/Raw\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\n\n\nfunction decodeBitVecU8a(value) {\n  if (!value || !value.length) {\n    return new Uint8Array();\n  } // handle all other Uint8Array inputs, these do have a length prefix which is the number of bits encoded\n\n\n  const [offset, length] = _Compact.default.decodeU8a(value);\n\n  const total = offset + Math.ceil(length.toNumber() / 8);\n  (0, _util.assert)(total <= value.length, `BitVec: required length less than remainder, expected at least ${total}, found ${value.length}`);\n  return value.subarray(offset, total);\n}\n/** @internal */\n\n\nfunction decodeBitVec(value) {\n  if (Array.isArray(value) || (0, _util.isString)(value)) {\n    return (0, _util.u8aToU8a)(value);\n  }\n\n  return decodeBitVecU8a(value);\n}\n/**\n * @name BitVec\n * @description\n * A BitVec that represents an array of bits. The bits are however stored encoded. The difference between this\n * and a normal Bytes would be that the length prefix indicates the number of bits encoded, not the bytes\n */\n\n\nclass BitVec extends _Raw.default {\n  constructor(registry, value) {\n    super(registry, decodeBitVec(value));\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.length + _Compact.default.encodeU8a(this.bitLength()).length;\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'BitVec';\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    const bitVec = super.toU8a();\n    return isBare ? bitVec : (0, _util.u8aConcat)(_Compact.default.encodeU8a(this.bitLength()), bitVec);\n  }\n\n}\n\nexports.default = BitVec;","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/types/primitive/BitVec.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_util","_Compact","_Raw","decodeBitVecU8a","length","Uint8Array","offset","decodeU8a","total","Math","ceil","toNumber","assert","subarray","decodeBitVec","Array","isArray","isString","u8aToU8a","BitVec","constructor","registry","encodedLength","encodeU8a","bitLength","toRawType","toU8a","isBare","bitVec","u8aConcat"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,KAAK,GAAGN,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIO,QAAQ,GAAGR,sBAAsB,CAACC,OAAO,CAAC,kBAAD,CAAR,CAArC;;AAEA,IAAIQ,IAAI,GAAGT,sBAAsB,CAACC,OAAO,CAAC,cAAD,CAAR,CAAjC,C,CAEA;AACA;;AAEA;;;AACA,SAASS,eAAT,CAAyBL,KAAzB,EAAgC;AAC9B,MAAI,CAACA,KAAD,IAAU,CAACA,KAAK,CAACM,MAArB,EAA6B;AAC3B,WAAO,IAAIC,UAAJ,EAAP;AACD,GAH6B,CAG5B;;;AAGF,QAAM,CAACC,MAAD,EAASF,MAAT,IAAmBH,QAAQ,CAACF,OAAT,CAAiBQ,SAAjB,CAA2BT,KAA3B,CAAzB;;AAEA,QAAMU,KAAK,GAAGF,MAAM,GAAGG,IAAI,CAACC,IAAL,CAAUN,MAAM,CAACO,QAAP,KAAoB,CAA9B,CAAvB;AACA,GAAC,GAAGX,KAAK,CAACY,MAAV,EAAkBJ,KAAK,IAAIV,KAAK,CAACM,MAAjC,EAA0C,kEAAiEI,KAAM,WAAUV,KAAK,CAACM,MAAO,EAAxI;AACA,SAAON,KAAK,CAACe,QAAN,CAAeP,MAAf,EAAuBE,KAAvB,CAAP;AACD;AACD;;;AAGA,SAASM,YAAT,CAAsBhB,KAAtB,EAA6B;AAC3B,MAAIiB,KAAK,CAACC,OAAN,CAAclB,KAAd,KAAwB,CAAC,GAAGE,KAAK,CAACiB,QAAV,EAAoBnB,KAApB,CAA5B,EAAwD;AACtD,WAAO,CAAC,GAAGE,KAAK,CAACkB,QAAV,EAAoBpB,KAApB,CAAP;AACD;;AAED,SAAOK,eAAe,CAACL,KAAD,CAAtB;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,MAAMqB,MAAN,SAAqBjB,IAAI,CAACH,OAA1B,CAAkC;AAChCqB,EAAAA,WAAW,CAACC,QAAD,EAAWvB,KAAX,EAAkB;AAC3B,UAAMuB,QAAN,EAAgBP,YAAY,CAAChB,KAAD,CAA5B;AACD;AACD;AACF;AACA;;;AAGE,MAAIwB,aAAJ,GAAoB;AAClB,WAAO,KAAKlB,MAAL,GAAcH,QAAQ,CAACF,OAAT,CAAiBwB,SAAjB,CAA2B,KAAKC,SAAL,EAA3B,EAA6CpB,MAAlE;AACD;AACD;AACF;AACA;;;AAGEqB,EAAAA,SAAS,GAAG;AACV,WAAO,QAAP;AACD;AACD;AACF;AACA;AACA;;;AAGEC,EAAAA,KAAK,CAACC,MAAD,EAAS;AACZ,UAAMC,MAAM,GAAG,MAAMF,KAAN,EAAf;AACA,WAAOC,MAAM,GAAGC,MAAH,GAAY,CAAC,GAAG5B,KAAK,CAAC6B,SAAV,EAAqB5B,QAAQ,CAACF,OAAT,CAAiBwB,SAAjB,CAA2B,KAAKC,SAAL,EAA3B,CAArB,EAAmEI,MAAnE,CAAzB;AACD;;AA7B+B;;AAiClC/B,OAAO,CAACE,OAAR,GAAkBoB,MAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Compact = _interopRequireDefault(require(\"../codec/Compact\"));\n\nvar _Raw = _interopRequireDefault(require(\"../codec/Raw\"));\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\nfunction decodeBitVecU8a(value) {\n  if (!value || !value.length) {\n    return new Uint8Array();\n  } // handle all other Uint8Array inputs, these do have a length prefix which is the number of bits encoded\n\n\n  const [offset, length] = _Compact.default.decodeU8a(value);\n\n  const total = offset + Math.ceil(length.toNumber() / 8);\n  (0, _util.assert)(total <= value.length, `BitVec: required length less than remainder, expected at least ${total}, found ${value.length}`);\n  return value.subarray(offset, total);\n}\n/** @internal */\n\n\nfunction decodeBitVec(value) {\n  if (Array.isArray(value) || (0, _util.isString)(value)) {\n    return (0, _util.u8aToU8a)(value);\n  }\n\n  return decodeBitVecU8a(value);\n}\n/**\n * @name BitVec\n * @description\n * A BitVec that represents an array of bits. The bits are however stored encoded. The difference between this\n * and a normal Bytes would be that the length prefix indicates the number of bits encoded, not the bytes\n */\n\n\nclass BitVec extends _Raw.default {\n  constructor(registry, value) {\n    super(registry, decodeBitVec(value));\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.length + _Compact.default.encodeU8a(this.bitLength()).length;\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'BitVec';\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    const bitVec = super.toU8a();\n    return isBare ? bitVec : (0, _util.u8aConcat)(_Compact.default.encodeU8a(this.bitLength()), bitVec);\n  }\n\n}\n\nexports.default = BitVec;"]},"metadata":{},"sourceType":"script"}