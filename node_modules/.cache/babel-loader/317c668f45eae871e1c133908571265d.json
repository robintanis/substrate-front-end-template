{"ast":null,"code":"// Copyright 2019-2020 @polkadot/wasm-crypto authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n/* eslint-disable sort-keys */\nconst {\n  assert\n} = require('@polkadot/util');\n\nconst INIT_ERRROR = 'The WASM interface has not been initialized. Ensure that you wait for the initialization Promise with waitReady() from @polkadot/wasm-crypto (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.';\n\nmodule.exports = function (stubbed) {\n  const wrapReady = fn => (...params) => {\n    assert(stubbed.isReady(), INIT_ERRROR);\n    return fn(...params);\n  };\n\n  return {\n    bip39Generate: wrapReady(stubbed.ext_bip39_generate),\n    bip39ToEntropy: wrapReady(stubbed.ext_bip39_to_entropy),\n    bip39ToMiniSecret: wrapReady(stubbed.ext_bip39_to_mini_secret),\n    bip39ToSeed: wrapReady(stubbed.ext_bip39_to_seed),\n    bip39Validate: wrapReady(stubbed.ext_bip39_validate),\n    ed25519KeypairFromSeed: wrapReady(stubbed.ext_ed_from_seed),\n    ed25519Sign: wrapReady(stubbed.ext_ed_sign),\n    ed25519Verify: wrapReady(stubbed.ext_ed_verify),\n    sr25519DeriveKeypairHard: wrapReady(stubbed.ext_sr_derive_keypair_hard),\n    sr25519DeriveKeypairSoft: wrapReady(stubbed.ext_sr_derive_keypair_soft),\n    sr25519DerivePublicSoft: wrapReady(stubbed.ext_sr_derive_public_soft),\n    sr25519KeypairFromSeed: wrapReady(stubbed.ext_sr_from_seed),\n    sr25519Sign: wrapReady(stubbed.ext_sr_sign),\n    sr25519Verify: wrapReady(stubbed.ext_sr_verify),\n    blake2b: wrapReady(stubbed.ext_blake2b),\n    keccak256: wrapReady(stubbed.ext_keccak256),\n    pbkdf2: wrapReady(stubbed.ext_pbkdf2),\n    scrypt: wrapReady(stubbed.ext_scrypt),\n    // secp256k1IsRecoverable: wrapReady(stubbed.ext_secp256k1_is_recoverable);\n    // secp256k1Recover: wrapReady(stubbed.ext_secp256k1_recover);\n    sha512: wrapReady(stubbed.ext_sha512),\n    twox: wrapReady(stubbed.ext_twox),\n    isReady: stubbed.isReady,\n    waitReady: stubbed.waitReady\n  };\n};","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/wasm-crypto/exports.js"],"names":["assert","require","INIT_ERRROR","module","exports","stubbed","wrapReady","fn","params","isReady","bip39Generate","ext_bip39_generate","bip39ToEntropy","ext_bip39_to_entropy","bip39ToMiniSecret","ext_bip39_to_mini_secret","bip39ToSeed","ext_bip39_to_seed","bip39Validate","ext_bip39_validate","ed25519KeypairFromSeed","ext_ed_from_seed","ed25519Sign","ext_ed_sign","ed25519Verify","ext_ed_verify","sr25519DeriveKeypairHard","ext_sr_derive_keypair_hard","sr25519DeriveKeypairSoft","ext_sr_derive_keypair_soft","sr25519DerivePublicSoft","ext_sr_derive_public_soft","sr25519KeypairFromSeed","ext_sr_from_seed","sr25519Sign","ext_sr_sign","sr25519Verify","ext_sr_verify","blake2b","ext_blake2b","keccak256","ext_keccak256","pbkdf2","ext_pbkdf2","scrypt","ext_scrypt","sha512","ext_sha512","twox","ext_twox","waitReady"],"mappings":"AAAA;AACA;AACA;;AAEA;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,gBAAD,CAA1B;;AAEA,MAAMC,WAAW,GAAG,+OAApB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,OAAV,EAAmB;AAClC,QAAMC,SAAS,GAAIC,EAAD,IAChB,CAAC,GAAGC,MAAJ,KAAe;AACbR,IAAAA,MAAM,CAACK,OAAO,CAACI,OAAR,EAAD,EAAoBP,WAApB,CAAN;AAEA,WAAOK,EAAE,CAAC,GAAGC,MAAJ,CAAT;AACD,GALH;;AAOA,SAAO;AACLE,IAAAA,aAAa,EAAEJ,SAAS,CAACD,OAAO,CAACM,kBAAT,CADnB;AAELC,IAAAA,cAAc,EAAEN,SAAS,CAACD,OAAO,CAACQ,oBAAT,CAFpB;AAGLC,IAAAA,iBAAiB,EAAER,SAAS,CAACD,OAAO,CAACU,wBAAT,CAHvB;AAILC,IAAAA,WAAW,EAAEV,SAAS,CAACD,OAAO,CAACY,iBAAT,CAJjB;AAKLC,IAAAA,aAAa,EAAEZ,SAAS,CAACD,OAAO,CAACc,kBAAT,CALnB;AAOLC,IAAAA,sBAAsB,EAAEd,SAAS,CAACD,OAAO,CAACgB,gBAAT,CAP5B;AAQLC,IAAAA,WAAW,EAAEhB,SAAS,CAACD,OAAO,CAACkB,WAAT,CARjB;AASLC,IAAAA,aAAa,EAAElB,SAAS,CAACD,OAAO,CAACoB,aAAT,CATnB;AAWLC,IAAAA,wBAAwB,EAAEpB,SAAS,CAACD,OAAO,CAACsB,0BAAT,CAX9B;AAYLC,IAAAA,wBAAwB,EAAEtB,SAAS,CAACD,OAAO,CAACwB,0BAAT,CAZ9B;AAaLC,IAAAA,uBAAuB,EAAExB,SAAS,CAACD,OAAO,CAAC0B,yBAAT,CAb7B;AAcLC,IAAAA,sBAAsB,EAAE1B,SAAS,CAACD,OAAO,CAAC4B,gBAAT,CAd5B;AAeLC,IAAAA,WAAW,EAAE5B,SAAS,CAACD,OAAO,CAAC8B,WAAT,CAfjB;AAgBLC,IAAAA,aAAa,EAAE9B,SAAS,CAACD,OAAO,CAACgC,aAAT,CAhBnB;AAkBLC,IAAAA,OAAO,EAAEhC,SAAS,CAACD,OAAO,CAACkC,WAAT,CAlBb;AAmBLC,IAAAA,SAAS,EAAElC,SAAS,CAACD,OAAO,CAACoC,aAAT,CAnBf;AAoBLC,IAAAA,MAAM,EAAEpC,SAAS,CAACD,OAAO,CAACsC,UAAT,CApBZ;AAqBLC,IAAAA,MAAM,EAAEtC,SAAS,CAACD,OAAO,CAACwC,UAAT,CArBZ;AAuBL;AACA;AAEAC,IAAAA,MAAM,EAAExC,SAAS,CAACD,OAAO,CAAC0C,UAAT,CA1BZ;AA2BLC,IAAAA,IAAI,EAAE1C,SAAS,CAACD,OAAO,CAAC4C,QAAT,CA3BV;AA6BLxC,IAAAA,OAAO,EAAEJ,OAAO,CAACI,OA7BZ;AA8BLyC,IAAAA,SAAS,EAAE7C,OAAO,CAAC6C;AA9Bd,GAAP;AAgCD,CAxCD","sourcesContent":["// Copyright 2019-2020 @polkadot/wasm-crypto authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n/* eslint-disable sort-keys */\n\nconst { assert } = require('@polkadot/util');\n\nconst INIT_ERRROR = 'The WASM interface has not been initialized. Ensure that you wait for the initialization Promise with waitReady() from @polkadot/wasm-crypto (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.';\n\nmodule.exports = function (stubbed) {\n  const wrapReady = (fn) =>\n    (...params) => {\n      assert(stubbed.isReady(), INIT_ERRROR);\n\n      return fn(...params);\n    };\n\n  return {\n    bip39Generate: wrapReady(stubbed.ext_bip39_generate),\n    bip39ToEntropy: wrapReady(stubbed.ext_bip39_to_entropy),\n    bip39ToMiniSecret: wrapReady(stubbed.ext_bip39_to_mini_secret),\n    bip39ToSeed: wrapReady(stubbed.ext_bip39_to_seed),\n    bip39Validate: wrapReady(stubbed.ext_bip39_validate),\n\n    ed25519KeypairFromSeed: wrapReady(stubbed.ext_ed_from_seed),\n    ed25519Sign: wrapReady(stubbed.ext_ed_sign),\n    ed25519Verify: wrapReady(stubbed.ext_ed_verify),\n\n    sr25519DeriveKeypairHard: wrapReady(stubbed.ext_sr_derive_keypair_hard),\n    sr25519DeriveKeypairSoft: wrapReady(stubbed.ext_sr_derive_keypair_soft),\n    sr25519DerivePublicSoft: wrapReady(stubbed.ext_sr_derive_public_soft),\n    sr25519KeypairFromSeed: wrapReady(stubbed.ext_sr_from_seed),\n    sr25519Sign: wrapReady(stubbed.ext_sr_sign),\n    sr25519Verify: wrapReady(stubbed.ext_sr_verify),\n\n    blake2b: wrapReady(stubbed.ext_blake2b),\n    keccak256: wrapReady(stubbed.ext_keccak256),\n    pbkdf2: wrapReady(stubbed.ext_pbkdf2),\n    scrypt: wrapReady(stubbed.ext_scrypt),\n\n    // secp256k1IsRecoverable: wrapReady(stubbed.ext_secp256k1_is_recoverable);\n    // secp256k1Recover: wrapReady(stubbed.ext_secp256k1_recover);\n\n    sha512: wrapReady(stubbed.ext_sha512),\n    twox: wrapReady(stubbed.ext_twox),\n\n    isReady: stubbed.isReady,\n    waitReady: stubbed.waitReady\n  };\n};\n"]},"metadata":{},"sourceType":"script"}