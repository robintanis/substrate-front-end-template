{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _memoizee = _interopRequireDefault(require(\"memoizee\"));\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _jsonrpc = _interopRequireDefault(require(\"@polkadot/types/interfaces/jsonrpc\"));\n\nvar _types = require(\"@polkadot/types\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _rxjs2 = require(\"./rxjs\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nconst l = (0, _util.logger)('rpc-core');\nconst EMPTY_META = {\n  fallback: undefined,\n  modifier: {\n    isOptional: true\n  },\n  type: {\n    asMap: {\n      linked: {\n        isTrue: false\n      }\n    },\n    isMap: false\n  }\n}; // utility method to create a nicely-formatted error\n\n/** @internal */\n\nfunction logErrorMessage(method, {\n  params,\n  type\n}, error) {\n  const inputs = params.map(({\n    isOptional,\n    name,\n    type\n  }) => `${name}${isOptional ? '?' : ''}: ${type}`).join(', ');\n  l.error(`${method}(${inputs}): ${type}:: ${error.message}`);\n}\n/**\n * @name Rpc\n * @summary The API may use a HTTP or WebSockets provider.\n * @description It allows for querying a Polkadot Client Node.\n * WebSockets provider is recommended since HTTP provider only supports basic querying.\n *\n * ```mermaid\n * graph LR;\n *   A[Api] --> |WebSockets| B[WsProvider];\n *   B --> |endpoint| C[ws://127.0.0.1:9944]\n * ```\n *\n * @example\n * <BR>\n *\n * ```javascript\n * import Rpc from '@polkadot/rpc-core';\n * import WsProvider from '@polkadot/rpc-provider/ws';\n *\n * const provider = new WsProvider('ws://127.0.0.1:9944');\n * const rpc = new Rpc(provider);\n * ```\n */\n\n\nvar _instanceId = (0, _classPrivateFieldLooseKey2.default)(\"instanceId\");\n\nvar _registryDefault = (0, _classPrivateFieldLooseKey2.default)(\"registryDefault\");\n\nvar _getBlockRegistry = (0, _classPrivateFieldLooseKey2.default)(\"getBlockRegistry\");\n\nvar _storageCache = (0, _classPrivateFieldLooseKey2.default)(\"storageCache\");\n\nclass Rpc {\n  // Ok, this is quite horrible - we really should not be using the ! here, but we are actually assigning\n  // these via the createInterfaces inside the constructor. However... this is not quite visible. The reason\n  // why we don't do for individual assignments is to allow user-defined RPCs to also be defined\n\n  /**\n   * @constructor\n   * Default constructor for the Api Object\n   * @param  {ProviderInterface} provider An API provider using HTTP or WebSocket\n   */\n  constructor(instanceId, registry, provider, userRpc = {}) {\n    Object.defineProperty(this, _instanceId, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _registryDefault, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _getBlockRegistry, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _storageCache, {\n      writable: true,\n      value: new Map()\n    });\n    this.mapping = new Map();\n    this.provider = void 0;\n    this.sections = [];\n    this.author = void 0;\n    this.babe = void 0;\n    this.chain = void 0;\n    this.childstate = void 0;\n    this.contracts = void 0;\n    this.engine = void 0;\n    this.grandpa = void 0;\n    this.offchain = void 0;\n    this.payment = void 0;\n    this.rpc = void 0;\n    this.state = void 0;\n    this.system = void 0; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n    (0, _util.assert)(provider && (0, _util.isFunction)(provider.send), 'Expected Provider to API create');\n    (0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId] = instanceId;\n    (0, _classPrivateFieldLooseBase2.default)(this, _registryDefault)[_registryDefault] = registry;\n    this.provider = provider;\n    const sectionNames = Object.keys(_jsonrpc.default); // these are the base keys (i.e. part of jsonrpc)\n\n    this.sections.push(...sectionNames);\n    this.addUserInterfaces(userRpc);\n  }\n  /**\n   * @description Returns the connected status of a provider\n   */\n\n\n  get isConnected() {\n    return this.provider.isConnected;\n  }\n  /**\n   * @description Manually connect from the attached provider\n   */\n\n\n  connect() {\n    return this.provider.connect();\n  }\n  /**\n   * @description Manually disconnect from the attached provider\n   */\n\n\n  disconnect() {\n    return this.provider.disconnect();\n  }\n  /**\n   * @description Sets a registry swap (typically from Api)\n   */\n\n\n  setRegistrySwap(registrySwap) {\n    (0, _classPrivateFieldLooseBase2.default)(this, _getBlockRegistry)[_getBlockRegistry] = registrySwap;\n  }\n\n  addUserInterfaces(userRpc) {\n    // add any extra user-defined sections\n    this.sections.push(...Object.keys(userRpc).filter(key => !this.sections.includes(key))); // decorate the sections with base and user methods\n\n    this.sections.forEach(sectionName => {\n      if (!this[sectionName]) {\n        this[sectionName] = {};\n      }\n\n      const section = this[sectionName];\n      Object.entries(_objectSpread(_objectSpread({}, this._createInterface(sectionName, _jsonrpc.default[sectionName] || {})), this._createInterface(sectionName, userRpc[sectionName] || {}))).forEach(([key, value]) => {\n        // we don't want to clobber existing, i.e. when this is called again after chain is determined\n        if (!section[key]) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n          section[key] = value;\n        }\n      });\n    });\n  }\n\n  _createInterface(section, methods) {\n    return Object.keys(methods).filter(method => !this.mapping.has(`${section}_${method}`)).reduce((exposed, method) => {\n      const def = methods[method];\n      const isSubscription = !!def.pubsub;\n      this.mapping.set(`${section}_${method}`, _objectSpread(_objectSpread({}, def), {}, {\n        isSubscription,\n        jsonrpc: `${section}_${method}`,\n        method,\n        section\n      })); // FIXME Remove any here\n      // To do so, remove `RpcInterfaceMethod` from './types.ts', and refactor\n      // every method inside this class to take:\n      // `<S extends keyof RpcInterface, M extends keyof RpcInterface[S]>`\n      // Not doing so, because it makes this class a little bit less readable,\n      // and leaving it as-is doesn't harm much\n\n      exposed[method] = isSubscription ? this._createMethodSubscribe(section, method, def) : this._createMethodSend(section, method, def);\n      return exposed;\n    }, {});\n  }\n\n  _createMethodWithRaw(creator) {\n    const call = creator(false);\n    call.raw = creator(true);\n    return call;\n  }\n\n  _createMethodSend(section, method, def) {\n    const rpcName = `${section}_${method}`;\n    const hashIndex = def.params.findIndex(({\n      isHistoric\n    }) => isHistoric);\n    const cacheIndex = def.params.findIndex(({\n      isCached\n    }) => isCached);\n    let memoized = null; // execute the RPC call, doing a registry swap for historic as applicable\n\n    const callWithRegistry = async (isRaw, values) => {\n      const hash = hashIndex === -1 ? undefined : values[hashIndex];\n      const {\n        registry\n      } = hash && (0, _classPrivateFieldLooseBase2.default)(this, _getBlockRegistry)[_getBlockRegistry] ? await (0, _classPrivateFieldLooseBase2.default)(this, _getBlockRegistry)[_getBlockRegistry](hash) : {\n        registry: (0, _classPrivateFieldLooseBase2.default)(this, _registryDefault)[_registryDefault]\n      };\n\n      const params = this._formatInputs(registry, def, values);\n\n      const data = await this.provider.send(rpcName, params.map(param => param.toJSON()));\n      return isRaw ? registry.createType('Raw', data) : this._formatOutput(registry, method, def, params, data);\n    };\n\n    const creator = isRaw => (...values) => {\n      const isDelayed = hashIndex !== -1 && !!values[hashIndex] || cacheIndex !== -1 && !!values[cacheIndex];\n      return new _rxjs.Observable(observer => {\n        callWithRegistry(isRaw, values).then(value => {\n          observer.next(value);\n          observer.complete();\n        }).catch(error => {\n          logErrorMessage(method, def, error);\n          observer.error(error);\n          observer.complete();\n        });\n        return () => {\n          var _memoized; // delete old results from cache\n\n\n          (_memoized = memoized) === null || _memoized === void 0 ? void 0 : _memoized.delete(...values);\n        };\n      }).pipe((0, _operators.publishReplay)(1), // create a Replay(1)\n      isDelayed ? (0, _rxjs2.refCountDelay)() // Unsubscribe after delay\n      : (0, _operators.refCount)());\n    };\n\n    memoized = (0, _memoizee.default)(this._createMethodWithRaw(creator), {\n      length: false,\n      normalizer: args => (0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId] + JSON.stringify(args)\n    });\n    return memoized;\n  } // create a subscriptor, it subscribes once and resolves with the id as subscribe\n\n\n  _createSubscriber({\n    paramsJson,\n    subName,\n    subType,\n    update\n  }, errorHandler) {\n    return new Promise((resolve, reject) => {\n      this.provider.subscribe(subType, subName, paramsJson, update).then(resolve).catch(error => {\n        errorHandler(error);\n        reject(error);\n      });\n    });\n  }\n\n  _createMethodSubscribe(section, method, def) {\n    const [updateType, subMethod, unsubMethod] = def.pubsub;\n    const subName = `${section}_${subMethod}`;\n    const unsubName = `${section}_${unsubMethod}`;\n    const subType = `${section}_${updateType}`;\n    let memoized = null;\n\n    const creator = isRaw => (...values) => {\n      return new _rxjs.Observable(observer => {\n        // Have at least an empty promise, as used in the unsubscribe\n        let subscriptionPromise = Promise.resolve(null);\n\n        const registry = (0, _classPrivateFieldLooseBase2.default)(this, _registryDefault)[_registryDefault];\n\n        const errorHandler = error => {\n          logErrorMessage(method, def, error);\n          observer.error(error);\n        };\n\n        try {\n          const params = this._formatInputs(registry, def, values);\n\n          const paramsJson = params.map(param => param.toJSON());\n\n          const update = (error, result) => {\n            if (error) {\n              logErrorMessage(method, def, error);\n              return;\n            }\n\n            try {\n              observer.next(isRaw ? registry.createType('Raw', result) : this._formatOutput(registry, method, def, params, result));\n            } catch (error) {\n              observer.error(error);\n            }\n          };\n\n          subscriptionPromise = this._createSubscriber({\n            paramsJson,\n            subName,\n            subType,\n            update\n          }, errorHandler);\n        } catch (error) {\n          errorHandler(error);\n        } // Teardown logic\n\n\n        return () => {\n          var _memoized2; // Delete from cache, so old results don't hang around\n\n\n          (_memoized2 = memoized) === null || _memoized2 === void 0 ? void 0 : _memoized2.delete(...values); // Unsubscribe from provider\n\n          subscriptionPromise.then(subscriptionId => (0, _util.isNull)(subscriptionId) ? Promise.resolve(false) : this.provider.unsubscribe(subType, unsubName, subscriptionId)).catch(error => logErrorMessage(method, def, error));\n        };\n      }).pipe((0, _rxjs2.drr)());\n    };\n\n    memoized = (0, _memoizee.default)(this._createMethodWithRaw(creator), {\n      // Dynamic length for argument\n      length: false,\n      // Normalize args so that different args that should be cached\n      // together are cached together.\n      // E.g.: `query.my.method('abc') === query.my.method(createType('AccountId', 'abc'));`\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      normalizer: args => (0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId] + JSON.stringify(args)\n    });\n    return memoized;\n  }\n\n  _formatInputs(registry, def, inputs) {\n    const reqArgCount = def.params.filter(({\n      isOptional\n    }) => !isOptional).length;\n    const optText = reqArgCount === def.params.length ? '' : ` (${def.params.length - reqArgCount} optional)`;\n    (0, _util.assert)(inputs.length >= reqArgCount && inputs.length <= def.params.length, `Expected ${def.params.length} parameters${optText}, ${inputs.length} found instead`);\n    return inputs.map((input, index) => (0, _types.createTypeUnsafe)(registry, def.params[index].type, [input]));\n  }\n\n  _treatAsHex(key) {\n    // :code is problematic - it does not have the length attached, which is\n    // unlike all other storage entries where it is indeed properly encoded\n    return ['0x3a636f6465'].includes(key.toHex());\n  }\n\n  _formatOutput(registry, method, rpc, params, result) {\n    if (rpc.type === 'StorageData') {\n      const key = params[0];\n\n      try {\n        return this._formatStorageData(registry, key, result);\n      } catch (error) {\n        console.error(`Unable to decode storage ${key.section || 'unknown'}.${key.method || 'unknown'}:`, error.message);\n        throw error;\n      }\n    } else if (rpc.type === 'StorageChangeSet') {\n      const keys = params[0];\n      return keys ? this._formatStorageSet(registry, keys, result.changes) : registry.createType('StorageChangeSet', result);\n    } else if (rpc.type === 'Vec<StorageChangeSet>') {\n      const mapped = result.map(({\n        block,\n        changes\n      }) => [registry.createType('Hash', block), this._formatStorageSet(registry, params[0], changes)]); // we only query at a specific block, not a range - flatten\n\n      return method === 'queryStorageAt' ? mapped[0][1] : mapped;\n    }\n\n    return (0, _types.createTypeUnsafe)(registry, rpc.type, [result]);\n  }\n\n  _formatStorageData(registry, key, value) {\n    // single return value (via state.getStorage), decode the value based on the\n    // outputType that we have specified. Fallback to Raw on nothing\n    const type = key.outputType || 'Raw';\n    const meta = key.meta || EMPTY_META;\n    const isEmpty = (0, _util.isNull)(value); // we convert to Uint8Array since it maps to the raw encoding, all\n    // data will be correctly encoded (incl. numbers, excl. :code)\n\n    const input = isEmpty ? null : this._treatAsHex(key) ? value : (0, _util.u8aToU8a)(value);\n\n    if (meta.modifier.isOptional) {\n      return new _types.Option(registry, (0, _types.createClass)(registry, type), isEmpty ? null : (0, _types.createTypeUnsafe)(registry, type, [input], true));\n    }\n\n    return (0, _types.createTypeUnsafe)(registry, type, [isEmpty ? meta.fallback ? (0, _util.hexToU8a)(meta.fallback.toHex()) : undefined : input], true);\n  }\n\n  _formatStorageSet(registry, keys, changes) {\n    // For StorageChangeSet, the changes has the [key, value] mappings\n    const withCache = keys.length !== 1; // multiple return values (via state.storage subscription), decode the values\n    // one at a time, all based on the query types. Three values can be returned -\n    //   - Codec - There is a valid value, non-empty\n    //   - null - The storage key is empty\n\n    return keys.reduce((results, key) => {\n      try {\n        results.push(this._formatStorageSetEntry(registry, key, changes, withCache));\n      } catch (error) {\n        console.error(`Unable to decode storage ${key.section || 'unknown'}.${key.method || 'unknown'}:`, error.message);\n        throw error;\n      }\n\n      return results;\n    }, []);\n  }\n\n  _formatStorageSetEntry(registry, key, changes, witCache) {\n    // Fallback to Raw (i.e. just the encoding) if we don't have a specific type\n    const type = key.outputType || 'Raw';\n    const hexKey = key.toHex();\n    const meta = key.meta || EMPTY_META;\n    const found = changes.find(([key]) => key === hexKey); // if we don't find the value, this is our fallback\n    //   - in the case of an array of values, fill the hole from the cache\n    //   - if a single result value, don't fill - it is not an update hole\n    //   - fallback to an empty option in all cases\n\n    const value = (0, _util.isUndefined)(found) ? witCache && (0, _classPrivateFieldLooseBase2.default)(this, _storageCache)[_storageCache].get(hexKey) || null : found[1];\n    const isEmpty = (0, _util.isNull)(value);\n    const input = isEmpty || this._treatAsHex(key) ? value : (0, _util.u8aToU8a)(value); // store the retrieved result - the only issue with this cache is that there is no\n    // clearing of it, so very long running processes (not just a couple of hours, longer)\n    // will increase memory beyond what is allowed.\n\n    (0, _classPrivateFieldLooseBase2.default)(this, _storageCache)[_storageCache].set(hexKey, value);\n\n    if (meta.modifier.isOptional) {\n      return new _types.Option(registry, (0, _types.createClass)(registry, type), isEmpty ? null : (0, _types.createTypeUnsafe)(registry, type, [input], true));\n    }\n\n    return (0, _types.createTypeUnsafe)(registry, type, [isEmpty ? meta.fallback ? (0, _util.hexToU8a)(meta.fallback.toHex()) : undefined : input], true);\n  }\n\n}\n\nexports.default = Rpc;","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/rpc-core/index.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_defineProperty2","_classPrivateFieldLooseBase2","_classPrivateFieldLooseKey2","_memoizee","_rxjs","_operators","_jsonrpc","_types","_util","_rxjs2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","l","logger","EMPTY_META","fallback","undefined","modifier","isOptional","type","asMap","linked","isTrue","isMap","logErrorMessage","method","params","error","inputs","map","name","join","message","_instanceId","_registryDefault","_getBlockRegistry","_storageCache","Rpc","constructor","instanceId","registry","provider","userRpc","writable","Map","mapping","sections","author","babe","chain","childstate","contracts","engine","grandpa","offchain","payment","rpc","state","system","assert","isFunction","send","sectionNames","addUserInterfaces","isConnected","connect","disconnect","setRegistrySwap","registrySwap","includes","sectionName","section","entries","_createInterface","methods","has","reduce","exposed","def","isSubscription","pubsub","set","jsonrpc","_createMethodSubscribe","_createMethodSend","_createMethodWithRaw","creator","call","raw","rpcName","hashIndex","findIndex","isHistoric","cacheIndex","isCached","memoized","callWithRegistry","isRaw","values","hash","_formatInputs","data","param","toJSON","createType","_formatOutput","isDelayed","Observable","observer","then","next","complete","catch","_memoized","delete","pipe","publishReplay","refCountDelay","refCount","normalizer","args","JSON","stringify","_createSubscriber","paramsJson","subName","subType","update","errorHandler","Promise","resolve","reject","subscribe","updateType","subMethod","unsubMethod","unsubName","subscriptionPromise","result","_memoized2","subscriptionId","isNull","unsubscribe","drr","reqArgCount","optText","input","index","createTypeUnsafe","_treatAsHex","toHex","_formatStorageData","console","_formatStorageSet","changes","mapped","block","outputType","meta","isEmpty","u8aToU8a","Option","createClass","hexToU8a","withCache","results","_formatStorageSetEntry","witCache","hexKey","found","find","isUndefined","get"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _memoizee = _interopRequireDefault(require(\"memoizee\"));\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _jsonrpc = _interopRequireDefault(require(\"@polkadot/types/interfaces/jsonrpc\"));\n\nvar _types = require(\"@polkadot/types\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _rxjs2 = require(\"./rxjs\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst l = (0, _util.logger)('rpc-core');\nconst EMPTY_META = {\n  fallback: undefined,\n  modifier: {\n    isOptional: true\n  },\n  type: {\n    asMap: {\n      linked: {\n        isTrue: false\n      }\n    },\n    isMap: false\n  }\n}; // utility method to create a nicely-formatted error\n\n/** @internal */\n\nfunction logErrorMessage(method, {\n  params,\n  type\n}, error) {\n  const inputs = params.map(({\n    isOptional,\n    name,\n    type\n  }) => `${name}${isOptional ? '?' : ''}: ${type}`).join(', ');\n  l.error(`${method}(${inputs}): ${type}:: ${error.message}`);\n}\n/**\n * @name Rpc\n * @summary The API may use a HTTP or WebSockets provider.\n * @description It allows for querying a Polkadot Client Node.\n * WebSockets provider is recommended since HTTP provider only supports basic querying.\n *\n * ```mermaid\n * graph LR;\n *   A[Api] --> |WebSockets| B[WsProvider];\n *   B --> |endpoint| C[ws://127.0.0.1:9944]\n * ```\n *\n * @example\n * <BR>\n *\n * ```javascript\n * import Rpc from '@polkadot/rpc-core';\n * import WsProvider from '@polkadot/rpc-provider/ws';\n *\n * const provider = new WsProvider('ws://127.0.0.1:9944');\n * const rpc = new Rpc(provider);\n * ```\n */\n\n\nvar _instanceId = (0, _classPrivateFieldLooseKey2.default)(\"instanceId\");\n\nvar _registryDefault = (0, _classPrivateFieldLooseKey2.default)(\"registryDefault\");\n\nvar _getBlockRegistry = (0, _classPrivateFieldLooseKey2.default)(\"getBlockRegistry\");\n\nvar _storageCache = (0, _classPrivateFieldLooseKey2.default)(\"storageCache\");\n\nclass Rpc {\n  // Ok, this is quite horrible - we really should not be using the ! here, but we are actually assigning\n  // these via the createInterfaces inside the constructor. However... this is not quite visible. The reason\n  // why we don't do for individual assignments is to allow user-defined RPCs to also be defined\n\n  /**\n   * @constructor\n   * Default constructor for the Api Object\n   * @param  {ProviderInterface} provider An API provider using HTTP or WebSocket\n   */\n  constructor(instanceId, registry, provider, userRpc = {}) {\n    Object.defineProperty(this, _instanceId, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _registryDefault, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _getBlockRegistry, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _storageCache, {\n      writable: true,\n      value: new Map()\n    });\n    this.mapping = new Map();\n    this.provider = void 0;\n    this.sections = [];\n    this.author = void 0;\n    this.babe = void 0;\n    this.chain = void 0;\n    this.childstate = void 0;\n    this.contracts = void 0;\n    this.engine = void 0;\n    this.grandpa = void 0;\n    this.offchain = void 0;\n    this.payment = void 0;\n    this.rpc = void 0;\n    this.state = void 0;\n    this.system = void 0;\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    (0, _util.assert)(provider && (0, _util.isFunction)(provider.send), 'Expected Provider to API create');\n    (0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId] = instanceId;\n    (0, _classPrivateFieldLooseBase2.default)(this, _registryDefault)[_registryDefault] = registry;\n    this.provider = provider;\n    const sectionNames = Object.keys(_jsonrpc.default); // these are the base keys (i.e. part of jsonrpc)\n\n    this.sections.push(...sectionNames);\n    this.addUserInterfaces(userRpc);\n  }\n  /**\n   * @description Returns the connected status of a provider\n   */\n\n\n  get isConnected() {\n    return this.provider.isConnected;\n  }\n  /**\n   * @description Manually connect from the attached provider\n   */\n\n\n  connect() {\n    return this.provider.connect();\n  }\n  /**\n   * @description Manually disconnect from the attached provider\n   */\n\n\n  disconnect() {\n    return this.provider.disconnect();\n  }\n  /**\n   * @description Sets a registry swap (typically from Api)\n   */\n\n\n  setRegistrySwap(registrySwap) {\n    (0, _classPrivateFieldLooseBase2.default)(this, _getBlockRegistry)[_getBlockRegistry] = registrySwap;\n  }\n\n  addUserInterfaces(userRpc) {\n    // add any extra user-defined sections\n    this.sections.push(...Object.keys(userRpc).filter(key => !this.sections.includes(key))); // decorate the sections with base and user methods\n\n    this.sections.forEach(sectionName => {\n      if (!this[sectionName]) {\n        this[sectionName] = {};\n      }\n\n      const section = this[sectionName];\n      Object.entries(_objectSpread(_objectSpread({}, this._createInterface(sectionName, _jsonrpc.default[sectionName] || {})), this._createInterface(sectionName, userRpc[sectionName] || {}))).forEach(([key, value]) => {\n        // we don't want to clobber existing, i.e. when this is called again after chain is determined\n        if (!section[key]) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n          section[key] = value;\n        }\n      });\n    });\n  }\n\n  _createInterface(section, methods) {\n    return Object.keys(methods).filter(method => !this.mapping.has(`${section}_${method}`)).reduce((exposed, method) => {\n      const def = methods[method];\n      const isSubscription = !!def.pubsub;\n      this.mapping.set(`${section}_${method}`, _objectSpread(_objectSpread({}, def), {}, {\n        isSubscription,\n        jsonrpc: `${section}_${method}`,\n        method,\n        section\n      })); // FIXME Remove any here\n      // To do so, remove `RpcInterfaceMethod` from './types.ts', and refactor\n      // every method inside this class to take:\n      // `<S extends keyof RpcInterface, M extends keyof RpcInterface[S]>`\n      // Not doing so, because it makes this class a little bit less readable,\n      // and leaving it as-is doesn't harm much\n\n      exposed[method] = isSubscription ? this._createMethodSubscribe(section, method, def) : this._createMethodSend(section, method, def);\n      return exposed;\n    }, {});\n  }\n\n  _createMethodWithRaw(creator) {\n    const call = creator(false);\n    call.raw = creator(true);\n    return call;\n  }\n\n  _createMethodSend(section, method, def) {\n    const rpcName = `${section}_${method}`;\n    const hashIndex = def.params.findIndex(({\n      isHistoric\n    }) => isHistoric);\n    const cacheIndex = def.params.findIndex(({\n      isCached\n    }) => isCached);\n    let memoized = null; // execute the RPC call, doing a registry swap for historic as applicable\n\n    const callWithRegistry = async (isRaw, values) => {\n      const hash = hashIndex === -1 ? undefined : values[hashIndex];\n      const {\n        registry\n      } = hash && (0, _classPrivateFieldLooseBase2.default)(this, _getBlockRegistry)[_getBlockRegistry] ? await (0, _classPrivateFieldLooseBase2.default)(this, _getBlockRegistry)[_getBlockRegistry](hash) : {\n        registry: (0, _classPrivateFieldLooseBase2.default)(this, _registryDefault)[_registryDefault]\n      };\n\n      const params = this._formatInputs(registry, def, values);\n\n      const data = await this.provider.send(rpcName, params.map(param => param.toJSON()));\n      return isRaw ? registry.createType('Raw', data) : this._formatOutput(registry, method, def, params, data);\n    };\n\n    const creator = isRaw => (...values) => {\n      const isDelayed = hashIndex !== -1 && !!values[hashIndex] || cacheIndex !== -1 && !!values[cacheIndex];\n      return new _rxjs.Observable(observer => {\n        callWithRegistry(isRaw, values).then(value => {\n          observer.next(value);\n          observer.complete();\n        }).catch(error => {\n          logErrorMessage(method, def, error);\n          observer.error(error);\n          observer.complete();\n        });\n        return () => {\n          var _memoized;\n\n          // delete old results from cache\n          (_memoized = memoized) === null || _memoized === void 0 ? void 0 : _memoized.delete(...values);\n        };\n      }).pipe((0, _operators.publishReplay)(1), // create a Replay(1)\n      isDelayed ? (0, _rxjs2.refCountDelay)() // Unsubscribe after delay\n      : (0, _operators.refCount)());\n    };\n\n    memoized = (0, _memoizee.default)(this._createMethodWithRaw(creator), {\n      length: false,\n      normalizer: args => (0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId] + JSON.stringify(args)\n    });\n    return memoized;\n  } // create a subscriptor, it subscribes once and resolves with the id as subscribe\n\n\n  _createSubscriber({\n    paramsJson,\n    subName,\n    subType,\n    update\n  }, errorHandler) {\n    return new Promise((resolve, reject) => {\n      this.provider.subscribe(subType, subName, paramsJson, update).then(resolve).catch(error => {\n        errorHandler(error);\n        reject(error);\n      });\n    });\n  }\n\n  _createMethodSubscribe(section, method, def) {\n    const [updateType, subMethod, unsubMethod] = def.pubsub;\n    const subName = `${section}_${subMethod}`;\n    const unsubName = `${section}_${unsubMethod}`;\n    const subType = `${section}_${updateType}`;\n    let memoized = null;\n\n    const creator = isRaw => (...values) => {\n      return new _rxjs.Observable(observer => {\n        // Have at least an empty promise, as used in the unsubscribe\n        let subscriptionPromise = Promise.resolve(null);\n\n        const registry = (0, _classPrivateFieldLooseBase2.default)(this, _registryDefault)[_registryDefault];\n\n        const errorHandler = error => {\n          logErrorMessage(method, def, error);\n          observer.error(error);\n        };\n\n        try {\n          const params = this._formatInputs(registry, def, values);\n\n          const paramsJson = params.map(param => param.toJSON());\n\n          const update = (error, result) => {\n            if (error) {\n              logErrorMessage(method, def, error);\n              return;\n            }\n\n            try {\n              observer.next(isRaw ? registry.createType('Raw', result) : this._formatOutput(registry, method, def, params, result));\n            } catch (error) {\n              observer.error(error);\n            }\n          };\n\n          subscriptionPromise = this._createSubscriber({\n            paramsJson,\n            subName,\n            subType,\n            update\n          }, errorHandler);\n        } catch (error) {\n          errorHandler(error);\n        } // Teardown logic\n\n\n        return () => {\n          var _memoized2;\n\n          // Delete from cache, so old results don't hang around\n          (_memoized2 = memoized) === null || _memoized2 === void 0 ? void 0 : _memoized2.delete(...values); // Unsubscribe from provider\n\n          subscriptionPromise.then(subscriptionId => (0, _util.isNull)(subscriptionId) ? Promise.resolve(false) : this.provider.unsubscribe(subType, unsubName, subscriptionId)).catch(error => logErrorMessage(method, def, error));\n        };\n      }).pipe((0, _rxjs2.drr)());\n    };\n\n    memoized = (0, _memoizee.default)(this._createMethodWithRaw(creator), {\n      // Dynamic length for argument\n      length: false,\n      // Normalize args so that different args that should be cached\n      // together are cached together.\n      // E.g.: `query.my.method('abc') === query.my.method(createType('AccountId', 'abc'));`\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      normalizer: args => (0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId] + JSON.stringify(args)\n    });\n    return memoized;\n  }\n\n  _formatInputs(registry, def, inputs) {\n    const reqArgCount = def.params.filter(({\n      isOptional\n    }) => !isOptional).length;\n    const optText = reqArgCount === def.params.length ? '' : ` (${def.params.length - reqArgCount} optional)`;\n    (0, _util.assert)(inputs.length >= reqArgCount && inputs.length <= def.params.length, `Expected ${def.params.length} parameters${optText}, ${inputs.length} found instead`);\n    return inputs.map((input, index) => (0, _types.createTypeUnsafe)(registry, def.params[index].type, [input]));\n  }\n\n  _treatAsHex(key) {\n    // :code is problematic - it does not have the length attached, which is\n    // unlike all other storage entries where it is indeed properly encoded\n    return ['0x3a636f6465'].includes(key.toHex());\n  }\n\n  _formatOutput(registry, method, rpc, params, result) {\n    if (rpc.type === 'StorageData') {\n      const key = params[0];\n\n      try {\n        return this._formatStorageData(registry, key, result);\n      } catch (error) {\n        console.error(`Unable to decode storage ${key.section || 'unknown'}.${key.method || 'unknown'}:`, error.message);\n        throw error;\n      }\n    } else if (rpc.type === 'StorageChangeSet') {\n      const keys = params[0];\n      return keys ? this._formatStorageSet(registry, keys, result.changes) : registry.createType('StorageChangeSet', result);\n    } else if (rpc.type === 'Vec<StorageChangeSet>') {\n      const mapped = result.map(({\n        block,\n        changes\n      }) => [registry.createType('Hash', block), this._formatStorageSet(registry, params[0], changes)]); // we only query at a specific block, not a range - flatten\n\n      return method === 'queryStorageAt' ? mapped[0][1] : mapped;\n    }\n\n    return (0, _types.createTypeUnsafe)(registry, rpc.type, [result]);\n  }\n\n  _formatStorageData(registry, key, value) {\n    // single return value (via state.getStorage), decode the value based on the\n    // outputType that we have specified. Fallback to Raw on nothing\n    const type = key.outputType || 'Raw';\n    const meta = key.meta || EMPTY_META;\n    const isEmpty = (0, _util.isNull)(value); // we convert to Uint8Array since it maps to the raw encoding, all\n    // data will be correctly encoded (incl. numbers, excl. :code)\n\n    const input = isEmpty ? null : this._treatAsHex(key) ? value : (0, _util.u8aToU8a)(value);\n\n    if (meta.modifier.isOptional) {\n      return new _types.Option(registry, (0, _types.createClass)(registry, type), isEmpty ? null : (0, _types.createTypeUnsafe)(registry, type, [input], true));\n    }\n\n    return (0, _types.createTypeUnsafe)(registry, type, [isEmpty ? meta.fallback ? (0, _util.hexToU8a)(meta.fallback.toHex()) : undefined : input], true);\n  }\n\n  _formatStorageSet(registry, keys, changes) {\n    // For StorageChangeSet, the changes has the [key, value] mappings\n    const withCache = keys.length !== 1; // multiple return values (via state.storage subscription), decode the values\n    // one at a time, all based on the query types. Three values can be returned -\n    //   - Codec - There is a valid value, non-empty\n    //   - null - The storage key is empty\n\n    return keys.reduce((results, key) => {\n      try {\n        results.push(this._formatStorageSetEntry(registry, key, changes, withCache));\n      } catch (error) {\n        console.error(`Unable to decode storage ${key.section || 'unknown'}.${key.method || 'unknown'}:`, error.message);\n        throw error;\n      }\n\n      return results;\n    }, []);\n  }\n\n  _formatStorageSetEntry(registry, key, changes, witCache) {\n    // Fallback to Raw (i.e. just the encoding) if we don't have a specific type\n    const type = key.outputType || 'Raw';\n    const hexKey = key.toHex();\n    const meta = key.meta || EMPTY_META;\n    const found = changes.find(([key]) => key === hexKey); // if we don't find the value, this is our fallback\n    //   - in the case of an array of values, fill the hole from the cache\n    //   - if a single result value, don't fill - it is not an update hole\n    //   - fallback to an empty option in all cases\n\n    const value = (0, _util.isUndefined)(found) ? witCache && (0, _classPrivateFieldLooseBase2.default)(this, _storageCache)[_storageCache].get(hexKey) || null : found[1];\n    const isEmpty = (0, _util.isNull)(value);\n    const input = isEmpty || this._treatAsHex(key) ? value : (0, _util.u8aToU8a)(value); // store the retrieved result - the only issue with this cache is that there is no\n    // clearing of it, so very long running processes (not just a couple of hours, longer)\n    // will increase memory beyond what is allowed.\n\n    (0, _classPrivateFieldLooseBase2.default)(this, _storageCache)[_storageCache].set(hexKey, value);\n\n    if (meta.modifier.isOptional) {\n      return new _types.Option(registry, (0, _types.createClass)(registry, type), isEmpty ? null : (0, _types.createTypeUnsafe)(registry, type, [input], true));\n    }\n\n    return (0, _types.createTypeUnsafe)(registry, type, [isEmpty ? meta.fallback ? (0, _util.hexToU8a)(meta.fallback.toHex()) : undefined : input], true);\n  }\n\n}\n\nexports.default = Rpc;"]},"metadata":{},"sourceType":"script"}