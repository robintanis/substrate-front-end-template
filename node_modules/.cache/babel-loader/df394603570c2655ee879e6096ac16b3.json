{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.info = info;\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"../util\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nfunction createDerive(api, [[hasBabe, epochDuration, sessionsPerEra], {\n  activeEra,\n  activeEraStart,\n  currentEra,\n  currentIndex,\n  validatorCount\n}]) {\n  return {\n    activeEra,\n    activeEraStart,\n    currentEra,\n    currentIndex,\n    eraLength: api.registry.createType('BlockNumber', sessionsPerEra.mul(epochDuration)),\n    isEpoch: hasBabe,\n    sessionLength: epochDuration,\n    sessionsPerEra,\n    validatorCount\n  };\n}\n\nfunction queryAura(api) {\n  return api.derive.session.indexes().pipe((0, _operators.map)(indexes => {\n    var _api$consts$staking;\n\n    return createDerive(api, [[false, api.registry.createType('u64', 1), ((_api$consts$staking = api.consts.staking) === null || _api$consts$staking === void 0 ? void 0 : _api$consts$staking.sessionsPerEra) || api.registry.createType('SessionIndex', 1)], indexes]);\n  }));\n}\n\nfunction queryBabe(api) {\n  return api.derive.session.indexes().pipe((0, _operators.map)(indexes => createDerive(api, [[true, api.consts.babe.epochDuration, api.consts.staking.sessionsPerEra], indexes])));\n}\n/**\n * @description Retrieves all the session and era query and calculates specific values on it as the length of the session and eras\n */\n\n\nfunction info(instanceId, api) {\n  return (0, _util.memo)(instanceId, () => api.consts.babe ? queryBabe(api) : queryAura(api));\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/node_modules/@polkadot/api-derive/session/info.js"],"names":["Object","defineProperty","exports","value","info","_operators","require","_util","createDerive","api","hasBabe","epochDuration","sessionsPerEra","activeEra","activeEraStart","currentEra","currentIndex","validatorCount","eraLength","registry","createType","mul","isEpoch","sessionLength","queryAura","derive","session","indexes","pipe","map","_api$consts$staking","consts","staking","queryBabe","babe","instanceId","memo"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,IAAR,GAAeA,IAAf;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,gBAAD,CAAxB;;AAEA,IAAIC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAAnB,C,CAEA;AACA;;;AACA,SAASE,YAAT,CAAsBC,GAAtB,EAA2B,CAAC,CAACC,OAAD,EAAUC,aAAV,EAAyBC,cAAzB,CAAD,EAA2C;AACpEC,EAAAA,SADoE;AAEpEC,EAAAA,cAFoE;AAGpEC,EAAAA,UAHoE;AAIpEC,EAAAA,YAJoE;AAKpEC,EAAAA;AALoE,CAA3C,CAA3B,EAMI;AACF,SAAO;AACLJ,IAAAA,SADK;AAELC,IAAAA,cAFK;AAGLC,IAAAA,UAHK;AAILC,IAAAA,YAJK;AAKLE,IAAAA,SAAS,EAAET,GAAG,CAACU,QAAJ,CAAaC,UAAb,CAAwB,aAAxB,EAAuCR,cAAc,CAACS,GAAf,CAAmBV,aAAnB,CAAvC,CALN;AAMLW,IAAAA,OAAO,EAAEZ,OANJ;AAOLa,IAAAA,aAAa,EAAEZ,aAPV;AAQLC,IAAAA,cARK;AASLK,IAAAA;AATK,GAAP;AAWD;;AAED,SAASO,SAAT,CAAmBf,GAAnB,EAAwB;AACtB,SAAOA,GAAG,CAACgB,MAAJ,CAAWC,OAAX,CAAmBC,OAAnB,GAA6BC,IAA7B,CAAkC,CAAC,GAAGvB,UAAU,CAACwB,GAAf,EAAoBF,OAAO,IAAI;AACtE,QAAIG,mBAAJ;;AAEA,WAAOtB,YAAY,CAACC,GAAD,EAAM,CAAC,CAAC,KAAD,EAAQA,GAAG,CAACU,QAAJ,CAAaC,UAAb,CAAwB,KAAxB,EAA+B,CAA/B,CAAR,EAA2C,CAAC,CAACU,mBAAmB,GAAGrB,GAAG,CAACsB,MAAJ,CAAWC,OAAlC,MAA+C,IAA/C,IAAuDF,mBAAmB,KAAK,KAAK,CAApF,GAAwF,KAAK,CAA7F,GAAiGA,mBAAmB,CAAClB,cAAtH,KAAyIH,GAAG,CAACU,QAAJ,CAAaC,UAAb,CAAwB,cAAxB,EAAwC,CAAxC,CAApL,CAAD,EAAkOO,OAAlO,CAAN,CAAnB;AACD,GAJwC,CAAlC,CAAP;AAKD;;AAED,SAASM,SAAT,CAAmBxB,GAAnB,EAAwB;AACtB,SAAOA,GAAG,CAACgB,MAAJ,CAAWC,OAAX,CAAmBC,OAAnB,GAA6BC,IAA7B,CAAkC,CAAC,GAAGvB,UAAU,CAACwB,GAAf,EAAoBF,OAAO,IAAInB,YAAY,CAACC,GAAD,EAAM,CAAC,CAAC,IAAD,EAAOA,GAAG,CAACsB,MAAJ,CAAWG,IAAX,CAAgBvB,aAAvB,EAAsCF,GAAG,CAACsB,MAAJ,CAAWC,OAAX,CAAmBpB,cAAzD,CAAD,EAA2Ee,OAA3E,CAAN,CAA3C,CAAlC,CAAP;AACD;AACD;AACA;AACA;;;AAGA,SAASvB,IAAT,CAAc+B,UAAd,EAA0B1B,GAA1B,EAA+B;AAC7B,SAAO,CAAC,GAAGF,KAAK,CAAC6B,IAAV,EAAgBD,UAAhB,EAA4B,MAAM1B,GAAG,CAACsB,MAAJ,CAAWG,IAAX,GAAkBD,SAAS,CAACxB,GAAD,CAA3B,GAAmCe,SAAS,CAACf,GAAD,CAA9E,CAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.info = info;\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"../util\");\n\n// Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction createDerive(api, [[hasBabe, epochDuration, sessionsPerEra], {\n  activeEra,\n  activeEraStart,\n  currentEra,\n  currentIndex,\n  validatorCount\n}]) {\n  return {\n    activeEra,\n    activeEraStart,\n    currentEra,\n    currentIndex,\n    eraLength: api.registry.createType('BlockNumber', sessionsPerEra.mul(epochDuration)),\n    isEpoch: hasBabe,\n    sessionLength: epochDuration,\n    sessionsPerEra,\n    validatorCount\n  };\n}\n\nfunction queryAura(api) {\n  return api.derive.session.indexes().pipe((0, _operators.map)(indexes => {\n    var _api$consts$staking;\n\n    return createDerive(api, [[false, api.registry.createType('u64', 1), ((_api$consts$staking = api.consts.staking) === null || _api$consts$staking === void 0 ? void 0 : _api$consts$staking.sessionsPerEra) || api.registry.createType('SessionIndex', 1)], indexes]);\n  }));\n}\n\nfunction queryBabe(api) {\n  return api.derive.session.indexes().pipe((0, _operators.map)(indexes => createDerive(api, [[true, api.consts.babe.epochDuration, api.consts.staking.sessionsPerEra], indexes])));\n}\n/**\n * @description Retrieves all the session and era query and calculates specific values on it as the length of the session and eras\n */\n\n\nfunction info(instanceId, api) {\n  return (0, _util.memo)(instanceId, () => api.consts.babe ? queryBabe(api) : queryAura(api));\n}"]},"metadata":{},"sourceType":"script"}