{"ast":null,"code":"var _jsxFileName = \"/home/robin/substrate-front-end-template/src/AccountSelector.js\";\nimport React, { useState, useEffect } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { Menu, Button, Dropdown, Container, Icon, Image, Label } from 'semantic-ui-react';\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main(props) {\n  const {\n    keyring\n  } = useSubstrate();\n  const {\n    setAccountAddress\n  } = props;\n  const [accountSelected, setAccountSelected] = useState(''); // Get the list of accounts we possess the private key for\n\n  const keyringOptions = keyring.getPairs().map(account => ({\n    key: account.address,\n    value: account.address,\n    text: account.meta.name.toUpperCase(),\n    icon: 'user'\n  }));\n  const initialAddress = keyringOptions.length > 0 ? keyringOptions[0].value : ''; // Set the initial address\n\n  useEffect(() => {\n    setAccountAddress(initialAddress);\n    setAccountSelected(initialAddress);\n  }, [setAccountAddress, initialAddress]);\n\n  const onChange = address => {\n    // Update state with new account address\n    setAccountAddress(address);\n    setAccountSelected(address);\n  };\n\n  return /*#__PURE__*/React.createElement(Menu, {\n    attached: \"top\",\n    tabular: true,\n    style: {\n      backgroundColor: '#fff',\n      borderColor: '#fff',\n      paddingTop: '1em',\n      paddingBottom: '1em'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Menu.Menu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Image, {\n    src: `${process.env.PUBLIC_URL}/assets/substrate-logo.png`,\n    size: \"mini\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Menu.Menu, {\n    position: \"right\",\n    style: {\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, !accountSelected ? /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  }, \"Add your account with the\", ' ', /*#__PURE__*/React.createElement(\"a\", {\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    href: \"https://github.com/polkadot-js/extension\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 15\n    }\n  }, \"Polkadot JS Extension\")) : null, /*#__PURE__*/React.createElement(CopyToClipboard, {\n    text: accountSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    basic: true,\n    circular: true,\n    size: \"large\",\n    icon: \"user\",\n    color: accountSelected ? 'green' : 'red',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Dropdown, {\n    search: true,\n    selection: true,\n    clearable: true,\n    placeholder: \"Select an account\",\n    options: keyringOptions,\n    onChange: (_, dropdown) => {\n      onChange(dropdown.value);\n    },\n    value: accountSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(BalanceAnnotation, {\n    accountSelected: accountSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }))));\n}\n\nfunction BalanceAnnotation(props) {\n  const {\n    accountSelected\n  } = props;\n  const {\n    api\n  } = useSubstrate();\n  const [accountBalance, setAccountBalance] = useState(0); // When account address changes, update subscriptions\n\n  useEffect(() => {\n    let unsubscribe; // If the user has selected an address, create a new subscription\n\n    accountSelected && api.query.system.account(accountSelected, balance => {\n      setAccountBalance(balance.data.free.toHuman());\n    }).then(unsub => {\n      unsubscribe = unsub;\n    }).catch(console.error);\n    return () => unsubscribe && unsubscribe();\n  }, [api, accountSelected]);\n  return accountSelected ? /*#__PURE__*/React.createElement(Label, {\n    pointing: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    name: \"money\",\n    color: \"green\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }), accountBalance) : null;\n}\n\nexport default function AccountSelector(props) {\n  const {\n    api,\n    keyring\n  } = useSubstrate();\n  return keyring.getPairs && api.query ? /*#__PURE__*/React.createElement(Main, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 42\n    }\n  })) : null;\n}","map":{"version":3,"sources":["/home/robin/substrate-front-end-template/src/AccountSelector.js"],"names":["React","useState","useEffect","CopyToClipboard","Menu","Button","Dropdown","Container","Icon","Image","Label","useSubstrate","Main","props","keyring","setAccountAddress","accountSelected","setAccountSelected","keyringOptions","getPairs","map","account","key","address","value","text","meta","name","toUpperCase","icon","initialAddress","length","onChange","backgroundColor","borderColor","paddingTop","paddingBottom","process","env","PUBLIC_URL","alignItems","_","dropdown","BalanceAnnotation","api","accountBalance","setAccountBalance","unsubscribe","query","system","balance","data","free","toHuman","then","unsub","catch","console","error","AccountSelector"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\nimport {\n  Menu,\n  Button,\n  Dropdown,\n  Container,\n  Icon,\n  Image,\n  Label\n} from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { keyring } = useSubstrate();\n  const { setAccountAddress } = props;\n  const [accountSelected, setAccountSelected] = useState('');\n\n  // Get the list of accounts we possess the private key for\n  const keyringOptions = keyring.getPairs().map(account => ({\n    key: account.address,\n    value: account.address,\n    text: account.meta.name.toUpperCase(),\n    icon: 'user'\n  }));\n\n  const initialAddress =\n    keyringOptions.length > 0 ? keyringOptions[0].value : '';\n\n  // Set the initial address\n  useEffect(() => {\n    setAccountAddress(initialAddress);\n    setAccountSelected(initialAddress);\n  }, [setAccountAddress, initialAddress]);\n\n  const onChange = address => {\n    // Update state with new account address\n    setAccountAddress(address);\n    setAccountSelected(address);\n  };\n\n  return (\n    <Menu\n      attached='top'\n      tabular\n      style={{\n        backgroundColor: '#fff',\n        borderColor: '#fff',\n        paddingTop: '1em',\n        paddingBottom: '1em'\n      }}\n    >\n      <Container>\n        <Menu.Menu>\n          <Image src={`${process.env.PUBLIC_URL}/assets/substrate-logo.png`} size='mini' />\n        </Menu.Menu>\n        <Menu.Menu position='right' style={{ alignItems: 'center' }}>\n          { !accountSelected\n            ? <span>\n              Add your account with the{' '}\n              <a\n                target='_blank'\n                rel='noopener noreferrer'\n                href='https://github.com/polkadot-js/extension'\n              >\n                Polkadot JS Extension\n              </a>\n            </span>\n            : null }\n          <CopyToClipboard text={accountSelected}>\n            <Button\n              basic\n              circular\n              size='large'\n              icon='user'\n              color={accountSelected ? 'green' : 'red'}\n            />\n          </CopyToClipboard>\n          <Dropdown\n            search\n            selection\n            clearable\n            placeholder='Select an account'\n            options={keyringOptions}\n            onChange={(_, dropdown) => {\n              onChange(dropdown.value);\n            }}\n            value={accountSelected}\n          />\n          <BalanceAnnotation accountSelected={accountSelected} />\n        </Menu.Menu>\n      </Container>\n    </Menu>\n  );\n}\n\nfunction BalanceAnnotation (props) {\n  const { accountSelected } = props;\n  const { api } = useSubstrate();\n  const [accountBalance, setAccountBalance] = useState(0);\n\n  // When account address changes, update subscriptions\n  useEffect(() => {\n    let unsubscribe;\n\n    // If the user has selected an address, create a new subscription\n    accountSelected &&\n      api.query.system.account(accountSelected, balance => {\n        setAccountBalance(balance.data.free.toHuman());\n      })\n        .then(unsub => {\n          unsubscribe = unsub;\n        })\n        .catch(console.error);\n\n    return () => unsubscribe && unsubscribe();\n  }, [api, accountSelected]);\n\n  return accountSelected ? (\n    <Label pointing='left'>\n      <Icon name='money' color='green' />\n      {accountBalance}\n    </Label>\n  ) : null;\n}\n\nexport default function AccountSelector (props) {\n  const { api, keyring } = useSubstrate();\n  return keyring.getPairs && api.query ? <Main {...props} /> : null;\n}\n"]},"metadata":{},"sourceType":"module"}